#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PROTECTOR ENHANCED - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
=====================================================

–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–±–æ—Ç–∞
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç
- –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
- –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ...

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-10-09
"""

import time
import psutil
import requests
import json
import sys
import os
import io
import logging
from datetime import datetime
from colorama import Fore, Style, init
from utils.log_rotation import setup_logger_with_rotation

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Colorama
init(autoreset=True)

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ============================================================================

BOTS_PORT = 5001
CHECK_INTERVAL = 2  # —Å–µ–∫—É–Ω–¥—ã
BOTS_STATE_FILE = "data/bots_state.json"
AUTO_BOT_CONFIG_FILE = "data/auto_bot_config.json"
LOG_FILE = "logs/protector.log"
API_BASE_URL = f"http://127.0.0.1:{BOTS_PORT}/api/bots"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("logs", exist_ok=True)

# ============================================================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –° –†–û–¢–ê–¶–ò–ï–ô
# ============================================================================

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ 10MB
file_logger = setup_logger_with_rotation(
    name='Protector',
    log_file=LOG_FILE,
    level=logging.INFO,
    max_bytes=10 * 1024 * 1024,  # 10MB
    format_string='%(asctime)s - %(levelname)s - %(message)s'
)

def log(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    colors = {
        "INFO": Fore.CYAN,
        "SUCCESS": Fore.GREEN,
        "WARNING": Fore.YELLOW,
        "ERROR": Fore.RED,
        "CRITICAL": Fore.MAGENTA + Style.BRIGHT
    }
    
    color = colors.get(level, Fore.WHITE)
    formatted_message = f"[{timestamp}] {color}[{level}]{Style.RESET_ALL} {message}"
    
    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(formatted_message)
    
    # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ logger —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    try:
        log_level = getattr(logging, level, logging.INFO)
        file_logger.log(log_level, message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

# ============================================================================
# –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def find_bots_process():
    """–ù–∞—Ö–æ–¥–∏—Ç PID –ø—Ä–æ—Ü–µ—Å—Å–∞, —Å–ª—É—à–∞—é—â–µ–≥–æ –Ω–∞ –ø–æ—Ä—Ç—É 5001"""
    try:
        for conn in psutil.net_connections(kind='inet'):
            if conn.laddr.port == BOTS_PORT and conn.status == 'LISTEN':
                return conn.pid
        return None
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}", "ERROR")
        return None

def kill_bots_process(pid):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å bots.py"""
    try:
        process = psutil.Process(pid)
        log(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å bots.py (PID: {pid})", "WARNING")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è graceful shutdown
        process.terminate()
        process.wait(timeout=5)
        
        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º
        if process.is_running():
            process.kill()
            process.wait(timeout=3)
        
        log(f"–ü—Ä–æ—Ü–µ—Å—Å bots.py (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "SUCCESS")
        return True
        
    except psutil.NoSuchProcess:
        log(f"–ü—Ä–æ—Ü–µ—Å—Å bots.py (PID: {pid}) —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "WARNING")
        return True
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ bots.py (PID: {pid}): {e}", "ERROR")
        return False

def check_service_online():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–∏—Å bots.py"""
    try:
        response = requests.get(f"http://127.0.0.1:{BOTS_PORT}/api/status", timeout=1)
        return response.status_code == 200
    except:
        return False

def check_auto_bot_enabled():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–±–æ—Ç–∞"""
    try:
        response = requests.get(f"{API_BASE_URL}/auto-bot", timeout=1)
        if response.status_code == 200:
            config = response.json()
            return config.get('config', {}).get('enabled', False)
        return False
    except:
        return False

def check_active_bots():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤"""
    try:
        response = requests.get(f"{API_BASE_URL}/list", timeout=1)
        if response.status_code == 200:
            data = response.json()
            return len(data.get('bots', []))
        return -1
    except:
        return -1

def check_bots_state_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ"""
    try:
        if os.path.exists(BOTS_STATE_FILE):
            with open(BOTS_STATE_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return len(data.get('bots', {}))
        return 0
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}", "ERROR")
        return -1

def check_auto_bot_config_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ"""
    try:
        if os.path.exists(AUTO_BOT_CONFIG_FILE):
            with open(AUTO_BOT_CONFIG_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('enabled', False)
        return False
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", "ERROR")
        return False

# ============================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì
# ============================================================================

def perform_extended_monitoring(current_time):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑—Ä–µ–ª–æ—Å—Ç—å –º–æ–Ω–µ—Ç
        mature_coins = check_mature_coins()
        if mature_coins is not None:
            log(f"üìä [{current_time}] –ó—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç: {mature_coins}", "INFO")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RSI –¥–∞–Ω–Ω—ã–µ
        rsi_status = check_rsi_data_status()
        if rsi_status:
            log(f"üìà [{current_time}] RSI –¥–∞–Ω–Ω—ã–µ: {rsi_status}", "INFO")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
        exchange_positions = check_exchange_positions()
        if exchange_positions is not None:
            log(f"üíº [{current_time}] –ü–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ: {exchange_positions}", "INFO")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∞–≤—Ç–æ–±–æ—Ç–∞
        filters_status = check_autobot_filters()
        if filters_status:
            log(f"üîç [{current_time}] –§–∏–ª—å—Ç—Ä—ã: {filters_status}", "INFO")
            
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", "ERROR")

def check_mature_coins():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç"""
    try:
        mature_file = "data/mature_coins.json"
        if os.path.exists(mature_file):
            with open(mature_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return len(data.get('mature_coins', {}))
        return 0
    except:
        return None

def check_rsi_data_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å RSI –¥–∞–Ω–Ω—ã—Ö"""
    try:
        response = requests.get(f"{API_BASE_URL}/coins-with-rsi", timeout=2)
        if response.status_code == 200:
            data = response.json()
            total = data.get('total', 0)
            updating = data.get('update_in_progress', False)
            return f"{total} –º–æ–Ω–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'–¥–∞' if updating else '–Ω–µ—Ç'}"
        return None
    except:
        return None

def check_exchange_positions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ"""
    try:
        response = requests.get(f"{API_BASE_URL}/positions", timeout=2)
        if response.status_code == 200:
            data = response.json()
            positions = data.get('positions', [])
            return len([p for p in positions if abs(float(p.get('size', 0))) > 0])
        return None
    except:
        return None

def check_autobot_filters():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∞–≤—Ç–æ–±–æ—Ç–∞"""
    try:
        response = requests.get(f"{API_BASE_URL}/auto-bot-config", timeout=1)
        if response.status_code == 200:
            config = response.json()
            maturity_check = config.get('enable_maturity_check', False)
            dump_protection = config.get('enable_dump_protection', False)
            trend_filters = config.get('avoid_down_trend', False) or config.get('avoid_up_trend', False)
            
            filters = []
            if maturity_check:
                filters.append("–∑—Ä–µ–ª–æ—Å—Ç—å")
            if dump_protection:
                filters.append("–¥–∞–º–ø–∏–Ω–≥")
            if trend_filters:
                filters.append("—Ç—Ä–µ–Ω–¥—ã")
            
            return ", ".join(filters) if filters else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        return None
    except:
        return None

# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================================================

def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print(f"{Fore.CYAN}{'='*60}")
    print(f"üõ°Ô∏è  PROTECTOR ENHANCED - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print(f"{'='*60}")
    print(f"üìä –†–µ–∂–∏–º: –ü–û–°–¢–û–Ø–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì")
    print(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    print(f"üìù –õ–æ–≥ —Ñ–∞–π–ª: {LOG_FILE}")
    print(f"üåê API: http://127.0.0.1:{BOTS_PORT}")
    print(f"{'='*60}{Style.RESET_ALL}")
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –ü–û–°–¢–û–Ø–ù–ù–ê–Ø –†–ê–ë–û–¢–ê"""
    print_header()
    
    log("üõ°Ô∏è PROTECTOR ENHANCED - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê", "INFO")
    log("üìä –†–µ–∂–∏–º: –ü–û–°–¢–û–Ø–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì (–±–µ–∑ —Å–∞–º–æ–æ—Å—Ç–∞–Ω–æ–≤–∫–∏)", "INFO")
    log("üîÑ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n", "INFO")
    
    check_counter = 0
    last_service_status = None
    last_bots_count = 0
    last_autobot_status = None
    
    try:
        while True:
            check_counter += 1
            current_time = datetime.now().strftime("%H:%M:%S")
            
            # === –ü–†–û–í–ï–†–ö–ê 1: –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–ê ===
            service_online = check_service_online()
            if service_online != last_service_status:
                if service_online:
                    log(f"üü¢ [{current_time}] –°–µ—Ä–≤–∏—Å bots.py –ó–ê–ü–£–©–ï–ù", "SUCCESS")
                else:
                    log(f"üî¥ [{current_time}] –°–µ—Ä–≤–∏—Å bots.py –ù–ï –û–¢–í–ï–ß–ê–ï–¢", "WARNING")
                last_service_status = service_online
            
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if not service_online:
                if check_counter % 15 == 0:  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    log(f"‚è≥ [{current_time}] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞... (–ø—Ä–æ–≤–µ—Ä–∫–∞ #{check_counter})", "INFO")
                time.sleep(CHECK_INTERVAL)
                continue
            
            # === –ü–†–û–í–ï–†–ö–ê 2: –ê–í–¢–û–ë–û–¢ ===
            auto_bot_enabled = check_auto_bot_enabled()
            if auto_bot_enabled != last_autobot_status:
                if auto_bot_enabled:
                    log(f"üö® [{current_time}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–ì–†–û–ó–ê! –ê–í–¢–û–ë–û–¢ –í–ö–õ–Æ–ß–ï–ù!", "CRITICAL")
                    log(f"üõë [{current_time}] –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–ò–°–¢–ï–ú–£!", "CRITICAL")
                    pid = find_bots_process()
                    if pid:
                        if kill_bots_process(pid):
                            log(f"‚úÖ [{current_time}] –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", "SUCCESS")
                            log(f"üìù [{current_time}] –ü—Ä–∏—á–∏–Ω–∞: –ê–≤—Ç–æ–±–æ—Ç –±—ã–ª –≤–∫–ª—é—á–µ–Ω", "CRITICAL")
                            # –ù–ï –í–´–•–û–î–ò–ú - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!
                            log(f"üîÑ [{current_time}] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...", "INFO")
                        else:
                            log(f"‚ùå [{current_time}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É!", "ERROR")
                    else:
                        log(f"‚ùå [{current_time}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å bots.py!", "ERROR")
                else:
                    log(f"‚úÖ [{current_time}] –ê–≤—Ç–æ–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω", "SUCCESS")
                last_autobot_status = auto_bot_enabled
            
            # === –ü–†–û–í–ï–†–ö–ê 3: –ê–ö–¢–ò–í–ù–´–ï –ë–û–¢–´ ===
            active_bots = check_active_bots()
            if active_bots != last_bots_count:
                if active_bots > 0:
                    log(f"üö® [{current_time}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–ì–†–û–ó–ê! –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {active_bots} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤!", "CRITICAL")
                    log(f"üõë [{current_time}] –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–ò–°–¢–ï–ú–£!", "CRITICAL")
                    pid = find_bots_process()
                    if pid:
                        if kill_bots_process(pid):
                            log(f"‚úÖ [{current_time}] –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", "SUCCESS")
                            log(f"üìù [{current_time}] –ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {active_bots} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤", "CRITICAL")
                            # –ù–ï –í–´–•–û–î–ò–ú - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!
                            log(f"üîÑ [{current_time}] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...", "INFO")
                        else:
                            log(f"‚ùå [{current_time}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É!", "ERROR")
                    else:
                        log(f"‚ùå [{current_time}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å bots.py!", "ERROR")
                else:
                    log(f"‚úÖ [{current_time}] –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {active_bots}", "SUCCESS")
                last_bots_count = active_bots
            
            # === –ü–†–û–í–ï–†–ö–ê 4: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑—Ä–µ–ª–æ—Å—Ç—å –º–æ–Ω–µ—Ç, —Ñ–∏–ª—å—Ç—Ä—ã –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if check_counter % 10 == 0:  # –ö–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
                perform_extended_monitoring(current_time)
            
            # === –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ ===
            if check_counter % 30 == 0:  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                log(f"üìä [{current_time}] –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ (–ø—Ä–æ–≤–µ—Ä–∫–∞ #{check_counter}):", "INFO")
                log(f"   üü¢ –°–µ—Ä–≤–∏—Å: {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if service_online else '–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'}", "INFO")
                log(f"   ü§ñ –ê–≤—Ç–æ–±–æ—Ç: {'–≤–∫–ª—é—á–µ–Ω' if auto_bot_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}", "INFO")
                log(f"   üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {active_bots}", "INFO")
                log(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {check_counter * CHECK_INTERVAL} —Å–µ–∫", "INFO")
                log("", "INFO")
            
            time.sleep(CHECK_INTERVAL)
            
    except KeyboardInterrupt:
        log(f"\nüõë [{datetime.now().strftime('%H:%M:%S')}] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)", "WARNING")
        log("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "INFO")
    except Exception as e:
        log(f"‚ùå [{datetime.now().strftime('%H:%M:%S')}] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
        log("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏", "ERROR")
    finally:
        log(f"üèÅ [{datetime.now().strftime('%H:%M:%S')}] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω", "INFO")

# ============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ============================================================================

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
