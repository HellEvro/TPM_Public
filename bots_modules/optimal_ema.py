"""–§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ EMA –ø–µ—Ä–∏–æ–¥–∞–º–∏

–í–∫–ª—é—á–∞–µ—Ç:
- load_optimal_ema_data - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA
- get_optimal_ema_periods - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã
- update_optimal_ema_data - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
- save_optimal_ema_periods - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import json
import logging
import time

logger = logging.getLogger('BotsService')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
optimal_ema_data = {}
OPTIMAL_EMA_FILE = 'data/optimal_ema.json'

def load_optimal_ema_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA –∏–∑ —Ñ–∞–π–ª–∞"""
    global optimal_ema_data
    try:
        if os.path.exists(OPTIMAL_EMA_FILE):
            with open(OPTIMAL_EMA_FILE, 'r', encoding='utf-8') as f:
                optimal_ema_data = json.load(f)
                logger.info(f"[OPTIMAL_EMA] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(optimal_ema_data)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA")
        else:
            optimal_ema_data = {}
            logger.info("[OPTIMAL_EMA] –§–∞–π–ª —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ EMA –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"[OPTIMAL_EMA] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA: {e}")
        optimal_ema_data = {}

def get_optimal_ema_periods(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ EMA –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
    global optimal_ema_data
    if symbol in optimal_ema_data:
        data = optimal_ema_data[symbol]
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (ema_short_period, ema_long_period)
        if 'ema_short_period' in data and 'ema_long_period' in data:
            return {
                'ema_short': data['ema_short_period'],
                'ema_long': data['ema_long_period'],
                'accuracy': data.get('accuracy', 0),
                'long_signals': data.get('long_signals', 0),
                'short_signals': data.get('short_signals', 0),
                'analysis_method': data.get('analysis_method', 'unknown')
            }
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (ema_short, ema_long)
        elif 'ema_short' in data and 'ema_long' in data:
            return {
                'ema_short': data['ema_short'],
                'ema_long': data['ema_long'],
                'accuracy': data.get('accuracy', 0),
                'long_signals': 0,
                'short_signals': 0,
                'analysis_method': 'legacy'
            }
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            logger.warning(f"[OPTIMAL_EMA] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return {
                'ema_short': 50,
                'ema_long': 200,
                'accuracy': 0,
                'long_signals': 0,
                'short_signals': 0,
                'analysis_method': 'default'
            }
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return {
            'ema_short': 50,
            'ema_long': 200,
            'accuracy': 0,
            'long_signals': 0,
            'short_signals': 0,
            'analysis_method': 'default'
        }

def calculate_all_coins_optimal_ema(mode='auto', force_symbols=None):
    """üìä –ü–ê–ö–ï–¢–ù–´–ô —Ä–∞—Å—á–µ—Ç Optimal EMA —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    
    Args:
        mode (str): –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            - 'auto': --all (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã)
            - 'force': --force (–≤—Å–µ –º–æ–Ω–µ—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
            - 'symbols': --force --coins LIST (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã)
        force_symbols (list): –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–µ—Å–ª–∏ mode='symbols')
    """
    try:
        logger.info(f"[OPTIMAL_EMA_BATCH] üìä –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç Optimal EMA (—Ä–µ–∂–∏–º: {mode})...")
        
        from bots_modules.imports_and_globals import rsi_data_lock, coins_rsi_data
        import subprocess
        import os
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã —Å RSI –¥–∞–Ω–Ω—ã–º–∏
        coins_to_check = []
        with rsi_data_lock:
            for symbol, coin_data in coins_rsi_data['coins'].items():
                if coin_data.get('rsi6h') is not None:
                    coins_to_check.append(symbol)
        
        logger.info(f"[OPTIMAL_EMA_BATCH] üìä –ù–∞–π–¥–µ–Ω–æ {len(coins_to_check)} –º–æ–Ω–µ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Optimal EMA")
        
        # üßπ –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Optimal EMA (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ auto)
        if mode == 'auto':
            logger.info("[OPTIMAL_EMA_BATCH] üßπ –û—á–∏—â–∞–µ–º Optimal EMA –æ—Ç –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç...")
            global optimal_ema_data
            original_count = len(optimal_ema_data)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ RSI –¥–∞–Ω–Ω—ã—Ö
            coins_to_keep = set(coins_to_check)
            optimal_ema_data = {symbol: data for symbol, data in optimal_ema_data.items() if symbol in coins_to_keep}
            
            removed_count = original_count - len(optimal_ema_data)
            if removed_count > 0:
                logger.info(f"[OPTIMAL_EMA_BATCH] üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ Optimal EMA")
                logger.info(f"[OPTIMAL_EMA_BATCH] üìä –û—Å—Ç–∞–ª–æ—Å—å {len(optimal_ema_data)} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        if not coins_to_check:
            logger.warning("[OPTIMAL_EMA_BATCH] ‚ö†Ô∏è –ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Optimal EMA")
            return False
        
        # üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –°–ö–†–ò–ü–¢ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        script_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'scripts', 'sync', 'optimal_ema.py')
        
        if not os.path.exists(script_path):
            logger.error(f"[OPTIMAL_EMA_BATCH] ‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if mode == 'auto':
            cmd = ['python', script_path, '--all']
            logger.info("[OPTIMAL_EMA_BATCH] üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --all (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã)...")
        elif mode == 'force':
            cmd = ['python', script_path, '--force']
            logger.info("[OPTIMAL_EMA_BATCH] üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --force (–≤—Å–µ –º–æ–Ω–µ—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)...")
        elif mode == 'symbols' and force_symbols:
            symbols_str = ','.join(force_symbols)
            cmd = ['python', script_path, '--force', '--coins', symbols_str]
            logger.info(f"[OPTIMAL_EMA_BATCH] üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ --force --coins {symbols_str}...")
        else:
            logger.error(f"[OPTIMAL_EMA_BATCH] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–Ω–µ—Ç—ã: mode={mode}, symbols={force_symbols}")
            return False
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600, 
                                  cwd=os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
            
            if result.returncode == 0:
                logger.info("[OPTIMAL_EMA_BATCH] ‚úÖ –°–∫—Ä–∏–ø—Ç optimal_ema.py –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"[OPTIMAL_EMA_BATCH] üìä –í—ã–≤–æ–¥: {result.stdout.strip()}")
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
                load_optimal_ema_data()
                
                logger.info(f"[OPTIMAL_EMA_BATCH] üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ: {len(optimal_ema_data)}")
                return True
            else:
                logger.error(f"[OPTIMAL_EMA_BATCH] ‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("[OPTIMAL_EMA_BATCH] ‚ùå –°–∫—Ä–∏–ø—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (10 –º–∏–Ω—É—Ç)")
            return False
        except Exception as script_error:
            logger.error(f"[OPTIMAL_EMA_BATCH] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {script_error}")
            return False
        
    except Exception as e:
        logger.error(f"[OPTIMAL_EMA_BATCH] ‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ Optimal EMA: {e}")
        return False

def update_optimal_ema_data(new_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    global optimal_ema_data
    try:
        if isinstance(new_data, dict):
            optimal_ema_data.update(new_data)
            logger.info(f"[OPTIMAL_EMA] –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(new_data)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA")
            return True
        else:
            logger.error("[OPTIMAL_EMA] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
    except Exception as e:
        logger.error(f"[OPTIMAL_EMA] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

