"""–§–æ–Ω–æ–≤—ã–µ –≤–æ—Ä–∫–µ—Ä—ã

–í–∫–ª—é—á–∞–µ—Ç:
- auto_save_worker - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- auto_bot_worker - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ Auto Bot
"""

import time
import logging
import threading
from datetime import datetime

logger = logging.getLogger('BotsService')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ imports_and_globals
try:
    from bots_modules.imports_and_globals import (
        shutdown_flag, system_initialized, bots_data_lock, bots_data,
        process_state, mature_coins_storage, mature_coins_lock, exchange
    )
except ImportError as e:
    print(f"Warning: Could not import globals in workers: {e}")
    shutdown_flag = threading.Event()
    system_initialized = False
    bots_data_lock = threading.Lock()
    bots_data = {}
    process_state = {}
    mature_coins_storage = {}
    mature_coins_lock = threading.Lock()
    exchange = None

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –≤ SystemConfig

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π (–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞)
from bot_engine.bot_config import SystemConfig

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from bots_modules.imports_and_globals import should_log_message
    from bots_modules.sync_and_cache import (
        save_bots_state, update_process_state, save_auto_bot_config,
        update_bots_cache_data, check_missing_stop_losses,
        cleanup_inactive_bots, check_trading_rules_activation,
        check_delisting_emergency_close
    )
    from bots_modules.maturity import save_mature_coins_storage
    from bots_modules.filters import process_auto_bot_signals
except ImportError as e:
    print(f"Warning: Could not import functions in workers: {e}")
    def should_log_message(category, message, interval_seconds=60):
        return (True, message)
    def save_bots_state():
        return True
    def save_mature_coins_storage():
        pass
    def update_process_state(name, data):
        pass
    def save_auto_bot_config():
        pass
    def update_bots_cache_data():
        pass
    def check_missing_stop_losses():
        pass
    def cleanup_inactive_bots():
        pass
    def check_trading_rules_activation():
        pass
    def process_auto_bot_signals(exchange_obj=None):
        pass

def log_system_status(cycle_count, auto_bot_enabled, check_interval_seconds):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        from bots_modules.imports_and_globals import mature_coins_storage, bots_data_lock
        
        with bots_data_lock:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ—Ç–æ–≤
            total_bots = len(bots_data.get('bots', {}))
            active_bots = sum(1 for bot in bots_data['bots'].values() 
                            if bot.get('status') not in ['paused', 'idle'])
            in_position = sum(1 for bot in bots_data['bots'].values() 
                            if bot.get('status') in ['in_position_long', 'in_position_short'])
            
            # –ó—Ä–µ–ª—ã–µ –º–æ–Ω–µ—Ç—ã
            mature_count = len(mature_coins_storage)
            
            # AI Status
            try:
                from bot_engine.ai.risk_manager import DynamicRiskManager
                ai_status = "‚úÖ AI –¥–æ—Å—Ç—É–ø–µ–Ω"
            except:
                ai_status = "‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            # Exchange
            exchange_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if exchange else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            logger.info("=" * 80)
            logger.info("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
            logger.info("=" * 80)
            logger.info(f"ü§ñ –ë–æ—Ç—ã: {total_bots} –≤—Å–µ–≥–æ | {active_bots} –∞–∫—Ç–∏–≤–Ω—ã—Ö | {in_position} –≤ –ø–æ–∑–∏—Ü–∏–∏")
            logger.info(f"üí∞ –ó—Ä–µ–ª—ã–µ –º–æ–Ω–µ—Ç—ã: {mature_count}")
            logger.info(f"{'üéØ' if auto_bot_enabled else '‚èπÔ∏è'}  AutoBot: {'ON' if auto_bot_enabled else 'OFF'} (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval_seconds}s)")
            logger.info(f"üí° AI: {ai_status}")
            logger.info(f"üåê –ë–∏—Ä–∂–∞: {exchange_status}")
            logger.info("=" * 80)
            
    except Exception as e:
        logger.debug(f"[STATUS] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

def auto_save_worker():
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    interval = SystemConfig.AUTO_SAVE_INTERVAL
    logger.info(f"[AUTO_SAVE] üíæ –ó–∞–ø—É—Å–∫ Auto Save Worker (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥)")
    
    while not shutdown_flag.is_set():
        try:
            # –ñ–¥–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if shutdown_flag.wait(interval):
                break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            # ‚ö° –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò: GIL –¥–µ–ª–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω—ã–º
            bots_count = len(bots_data['bots'])
            
            if bots_count > 0:
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 5 –º–∏–Ω—É—Ç
                should_log = (getattr(auto_save_worker, '_last_log_time', 0) + 300 < time.time())
                if should_log:
                    logger.info(f"[AUTO_SAVE] üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è {bots_count} –±–æ—Ç–æ–≤...")
                    auto_save_worker._last_log_time = time.time()
                save_result = save_bots_state()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç
                save_mature_coins_storage()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                update_process_state('auto_save_worker', {
                    'last_save': datetime.now().isoformat(),
                    'save_count': process_state['auto_save_worker']['save_count'] + 1,
                    'last_error': None if save_result else 'Save failed'
                })
            
        except Exception as e:
            logger.error(f"[AUTO_SAVE] ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    logger.info("[AUTO_SAVE] üíæ Auto Save Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def auto_bot_worker():
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Auto Bot —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("[AUTO_BOT] üö´ Auto Bot Worker –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è")
    logger.info("[AUTO_BOT] üí° –ê–≤—Ç–æ–±–æ—Ç –ù–ï –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
    logger.info("[AUTO_BOT] üí° –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –í–†–£–ß–ù–£–Æ —á–µ—Ä–µ–∑ UI –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Auto Bot
    # ‚ö° –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò: GIL –¥–µ–ª–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω—ã–º
    auto_bot_enabled = bots_data['auto_bot_config']['enabled']
    
    if auto_bot_enabled:
        logger.info("[AUTO_BOT] ‚úÖ –ê–≤—Ç–æ–±–æ—Ç –≤–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.info("[AUTO_BOT] ‚èπÔ∏è –ê–≤—Ç–æ–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ —á–µ—Ä–µ–∑ UI –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
    
    # –í—Ö–æ–¥–∏–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –ù–û –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∞–≤—Ç–æ–±–æ—Ç –≤–∫–ª—é—á–µ–Ω –≤—Ä—É—á–Ω—É—é
    last_position_update = time.time() - SystemConfig.BOT_STATUS_UPDATE_INTERVAL
    last_stop_loss_setup = time.time() - SystemConfig.STOP_LOSS_SETUP_INTERVAL
    last_position_sync = time.time() - SystemConfig.POSITION_SYNC_INTERVAL
    last_inactive_cleanup = time.time() - SystemConfig.INACTIVE_BOT_CLEANUP_INTERVAL
    last_auto_bot_check = time.time()  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∞–≤—Ç–æ–±–æ—Ç–∞
    last_delisting_check = time.time() - 600  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ª–∏—Å—Ç–∏–Ω–≥–∞ (10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
    
    logger.info("[AUTO_BOT] üîÑ –í—Ö–æ–¥–∏–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª (–∞–≤—Ç–æ–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω, –∂–¥–µ–º —Ä—É—á–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è)...")
    
    # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞
    cycle_count = 0
    
    while not shutdown_flag.is_set():
        try:
            cycle_count += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            # ‚ö° –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò: GIL –¥–µ–ª–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω—ã–º
            check_interval_seconds = bots_data['auto_bot_config']['check_interval']
            auto_bot_enabled = bots_data['auto_bot_config']['enabled']
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            if cycle_count % 300 == 1:
                log_system_status(cycle_count, auto_bot_enabled, check_interval_seconds)
            
            # –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
            if shutdown_flag.wait(1):
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Auto Bot –≤–∫–ª—é—á–µ–Ω –ò –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            current_time = time.time()
            time_since_auto_bot_check = current_time - last_auto_bot_check
            
            if auto_bot_enabled and time_since_auto_bot_check >= check_interval_seconds:
                logger.debug(f"[AUTO_BOT] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã...")
                from bots_modules.imports_and_globals import get_exchange
                process_auto_bot_signals(exchange_obj=get_exchange())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                last_auto_bot_check = current_time
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                current_count = process_state.get('auto_bot_worker', {}).get('check_count', 0)
                update_process_state('auto_bot_worker', {
                    'last_check': datetime.now().isoformat(),
                    'check_count': current_count + 1,
                    'interval_seconds': check_interval_seconds,
                    'enabled': True
                })
            else:
                logger.debug(f"[AUTO_BOT] –í—ã–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                update_process_state('auto_bot_worker', {
                    'last_check': datetime.now().isoformat(),
                    'enabled': False,
                    'interval_seconds': check_interval_seconds
                })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π –∫–∞–∂–¥—ã–µ BOT_STATUS_UPDATE_INTERVAL —Å–µ–∫—É–Ω–¥ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç Auto Bot)
            current_time = time.time()
            time_since_last_update = current_time - last_position_update
            
            if time_since_last_update >= SystemConfig.BOT_STATUS_UPDATE_INTERVAL:
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–ø—Ä–æ–±–ª–µ–º–∞!)
                worker_t_start = time.time()
                update_bots_cache_data()
                execution_time = time.time() - worker_t_start
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –û–ß–ï–ù–¨ –º–µ–¥–ª–µ–Ω–Ω–æ
                if execution_time > 2.0:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 2 —Å–µ–∫—É–Ω–¥
                    logger.warning(f"[WORKER] ‚ö†Ô∏è –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {execution_time:.1f}—Å")
                
                last_position_update = current_time
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∫–∞–∂–¥—ã–µ SystemConfig.STOP_LOSS_SETUP_INTERVAL —Å–µ–∫—É–Ω–¥
            time_since_stop_setup = current_time - last_stop_loss_setup
            if time_since_stop_setup >= SystemConfig.STOP_LOSS_SETUP_INTERVAL:
                check_missing_stop_losses()
                last_stop_loss_setup = current_time
            
            # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –∫–∞–∂–¥—ã–µ SystemConfig.INACTIVE_BOT_CLEANUP_INTERVAL —Å–µ–∫—É–Ω–¥
            time_since_cleanup = current_time - last_inactive_cleanup
            if time_since_cleanup >= SystemConfig.INACTIVE_BOT_CLEANUP_INTERVAL:
                cleanup_inactive_bots()
                check_trading_rules_activation()
                last_inactive_cleanup = current_time
            
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –î–ï–õ–ò–°–¢–ò–ù–ì–ê: –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–∏—Å—Ç–∏–Ω–≥ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            current_time = time.time()
            time_since_delisting_check = current_time - last_delisting_check
            
            if time_since_delisting_check >= 600:  # 10 –º–∏–Ω—É—Ç = 600 —Å–µ–∫—É–Ω–¥
                logger.debug("[DELISTING] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–∏—Å—Ç–∏–Ω–≥–∞...")
                check_delisting_emergency_close()
                last_delisting_check = current_time
            
        except Exception as e:
            logger.error(f"[AUTO_BOT] ‚ùå –û—à–∏–±–∫–∞ Auto Bot Worker: {e}")
            update_process_state('auto_bot_worker', {
                'last_error': str(e),
                'last_check': datetime.now().isoformat()
            })
    
    logger.info("[AUTO_BOT] üõë Auto Bot Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def positions_monitor_worker():
    """
    üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
    
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä—É—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏–∑–±–µ–≥–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
    –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –±–æ—Ç–æ–≤!
    """
    logger.info("[POSITIONS_MONITOR] üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –ø–æ–∑–∏—Ü–∏–π
    global positions_cache
    positions_cache = {
        'positions': [],
        'last_update': None,
        'symbols_with_positions': set()
    }
    
    while not shutdown_flag.is_set():
        try:
            from bots_modules.imports_and_globals import get_exchange
            
            exchange_obj = get_exchange()
            if not exchange_obj:
                logger.warning("[POSITIONS_MONITOR] ‚ö†Ô∏è Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                time.sleep(5)
                continue
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                should_log = (int(time.time()) % 30 == 0)
                if should_log:
                    logger.info(f"[POSITIONS_MONITOR] üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏...")
                
                exchange_positions = exchange_obj.get_positions()
                if isinstance(exchange_positions, tuple):
                    positions_list = exchange_positions[0] if exchange_positions else []
                else:
                    positions_list = exchange_positions if exchange_positions else []
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                symbols_with_positions = set()
                active_positions_log = []
                for pos in positions_list:
                    if abs(float(pos.get('size', 0))) > 0:
                        symbol = pos.get('symbol', '').replace('USDT', '')
                        symbols_with_positions.add(symbol)
                        if should_log:
                            active_positions_log.append(f"{symbol} (—Ä–∞–∑–º–µ—Ä: {pos.get('size')})")
                
                positions_cache['positions'] = positions_list
                positions_cache['last_update'] = datetime.now().isoformat()
                positions_cache['symbols_with_positions'] = symbols_with_positions
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                if should_log:
                    logger.info(f"[POSITIONS_MONITOR] üìä –ü–æ–ª—É—á–µ–Ω–æ {len(positions_list)} –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏")
                    if active_positions_log:
                        logger.info(f"[POSITIONS_MONITOR] üìà –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {', '.join(active_positions_log)}")
                    logger.info(f"[POSITIONS_MONITOR] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {len(positions_list)} –ø–æ–∑–∏—Ü–∏–π, –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(symbols_with_positions)}")
                
            except Exception as e:
                logger.error(f"[POSITIONS_MONITOR] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
                import traceback
                traceback.print_exc()
            
            # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π - –ö–ê–ñ–î–£–Æ –°–ï–ö–£–ù–î–£!
            time.sleep(1)
            
        except Exception as e:
            logger.error(f"[POSITIONS_MONITOR] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(10)
    
    logger.info("[POSITIONS_MONITOR] üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –ø–æ–∑–∏—Ü–∏–π
positions_cache = {
    'positions': [],
    'last_update': None,
    'symbols_with_positions': set()
}

