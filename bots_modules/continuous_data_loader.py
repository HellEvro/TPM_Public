"""
üîÑ –ù–ï–ü–†–ï–†–´–í–ù–´–ô –ó–ê–ì–†–£–ó–ß–ò–ö –î–ê–ù–ù–´–•
–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –≤–æ—Ä–∫–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –∫—Ä—É–≥—É, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
"""

import threading
import time
from datetime import datetime
import logging

logger = logging.getLogger('BotsService')
# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö
class PrefixedLogger:
    def __init__(self, logger, prefix):
        self.logger = logger
        self.prefix = prefix
    
    def info(self, msg):
        self.logger.info(f"{self.prefix} {msg}")
    
    def warning(self, msg):
        self.logger.warning(f"{self.prefix} {msg}")
    
    def error(self, msg):
        self.logger.error(f"{self.prefix} {msg}")
    
    def debug(self, msg):
        self.logger.debug(f"{self.prefix} {msg}")

logger = PrefixedLogger(logger, "üîÑ [CONTINUOUS]")

class ContinuousDataLoader:
    def __init__(self, exchange_obj=None, update_interval=180):
        """
        Args:
            exchange_obj: –û–±—ä–µ–∫—Ç –±–∏—Ä–∂–∏
            update_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 180 = 3 –º–∏–Ω—É—Ç—ã)
        """
        self.exchange = exchange_obj
        self.update_interval = update_interval
        self.is_running = False
        self.thread = None
        self.last_update_time = None
        self.update_count = 0
        self.error_count = 0
        
    def start(self):
        """üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            logger.warning("[CONTINUOUS] ‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        self.thread = threading.Thread(target=self._continuous_loop, daemon=True)
        self.thread.start()
        logger.info(f"[CONTINUOUS] üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.update_interval}—Å)")
        
    def stop(self):
        """üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä"""
        if not self.is_running:
            return
            
        logger.info("[CONTINUOUS] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä...")
        self.is_running = False
        if self.thread:
            self.thread.join(timeout=5)
        logger.info("[CONTINUOUS] ‚úÖ –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def _continuous_loop(self):
        """üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("[CONTINUOUS] üîÑ –í—Ö–æ–¥–∏–º –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        
        # ‚ö° –¢–†–ï–ô–°–ò–ù–ì –û–¢–ö–õ–Æ–ß–ï–ù - –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ (deadlock –Ω–∞ bots_data_lock)
        # try:
        #     from trace_debug import enable_trace
        #     enable_trace()
        #     logger.info("üîç [CONTINUOUS] –¢—Ä–µ–π—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–π")
        # except Exception as e:
        #     logger.warning(f"‚ö†Ô∏è [CONTINUOUS] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–π—Å–∏–Ω–≥: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º (–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è)
        time.sleep(5)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º shutdown_flag –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        from bots_modules.imports_and_globals import shutdown_flag
        
        while self.is_running and not shutdown_flag.is_set():
            try:
                cycle_start = time.time()
                self.update_count += 1
                
                # ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π –∏ RSI —Ç–µ–ø–µ—Ä—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ
                from bots_modules.imports_and_globals import coins_rsi_data
                coins_rsi_data['processing_cycle'] = True  # –¢–æ–ª—å–∫–æ —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                logger.info("[CONTINUOUS] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º)")
                
                logger.info("=" * 80)
                logger.info(f"[CONTINUOUS] üîÑ –†–ê–£–ù–î #{self.update_count} –ù–ê–ß–ê–¢")
                logger.info(f"[CONTINUOUS] üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
                logger.info("=" * 80)
                
                # ‚úÖ –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç (15-20 —Å–µ–∫) - –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ò–ô
                success = self._load_candles_non_blocking()
                if not success:
                    logger.error("[CONTINUOUS] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—É–Ω–¥")
                    self.error_count += 1
                    time.sleep(30)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    continue
                
                # ‚úÖ –≠—Ç–∞–ø 2: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç (30-40 —Å–µ–∫) - –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ò–ô
                success = self._calculate_rsi_non_blocking()
                if not success:
                    logger.error("[CONTINUOUS] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å RSI, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—É–Ω–¥")
                    self.error_count += 1
                    time.sleep(30)
                    continue
                
                # ‚úÖ –≠—Ç–∞–ø 3: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑—Ä–µ–ª–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç) (10-20 —Å–µ–∫)
                self._calculate_maturity()
                
                # ‚úÖ –≠—Ç–∞–ø 4: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –¥–ª—è —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç (RSI ‚â§29 –∏–ª–∏ ‚â•71) (5-10 —Å–µ–∫)
                self._analyze_trends()
                
                # ‚úÖ –≠—Ç–∞–ø 5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–Ω–≥/—à–æ—Ä—Ç –º–æ–Ω–µ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (5 —Å–µ–∫)
                filtered_coins = self._process_filters()
                
                # ‚úÖ –≠—Ç–∞–ø 6: –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∞–≤—Ç–æ–±–æ—Ç—É
                self._set_filtered_coins_for_autobot(filtered_coins)
                
                cycle_duration = time.time() - cycle_start
                self.last_update_time = datetime.now()
                
                logger.info("=" * 80)
                logger.info(f"[CONTINUOUS] ‚úÖ –†–ê–£–ù–î #{self.update_count} –ó–ê–í–ï–†–®–ï–ù")
                logger.info(f"[CONTINUOUS] ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {cycle_duration:.1f}—Å")
                logger.info(f"[CONTINUOUS] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π={self.update_count}, –æ—à–∏–±–æ–∫={self.error_count}")
                logger.info(f"[CONTINUOUS] üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –º–æ–Ω–µ—Ç: {len(filtered_coins)}")
                logger.info("=" * 80)
                
                # ‚úÖ –ó–ê–í–ï–†–®–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö
                from bots_modules.imports_and_globals import coins_rsi_data
                coins_rsi_data['processing_cycle'] = False  # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                coins_rsi_data['data_version'] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö
                logger.info(f"[CONTINUOUS] ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö: {coins_rsi_data['data_version']})")
                
                # üöÄ –ë–ï–ó –ü–ê–£–ó: –†–∞—É–Ω–¥—ã –∏–¥—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º!
                # –ß–µ–º –±—ã—Å—Ç—Ä–µ–µ –∂–µ–ª–µ–∑–æ - —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
                logger.info(f"[CONTINUOUS] üöÄ –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥...")
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π shutdown)
                if shutdown_flag.wait(1):  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º—ã–π sleep
                    break
                    
            except Exception as e:
                logger.error(f"[CONTINUOUS] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                self.error_count += 1
                
                # ‚úÖ –ó–ê–í–ï–†–®–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                from bots_modules.imports_and_globals import coins_rsi_data
                coins_rsi_data['processing_cycle'] = False  # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                coins_rsi_data['data_version'] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                logger.info(f"[CONTINUOUS] ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏, –≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö: {coins_rsi_data['data_version']})")
                
                time.sleep(30)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                
        logger.info("[CONTINUOUS] üèÅ –í—ã—Ö–æ–¥ –∏–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    
    def _load_candles(self):
        """üì¶ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç"""
        try:
            logger.info("[CONTINUOUS] üì¶ –≠—Ç–∞–ø 1/6: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏...")
            start = time.time()
            
            logger.info("[CONTINUOUS] üîÑ –í—ã–∑—ã–≤–∞–µ–º load_all_coins_candles_fast()...")
            from bots_modules.filters import load_all_coins_candles_fast
            success = load_all_coins_candles_fast()
            logger.info(f"[CONTINUOUS] üìä load_all_coins_candles_fast() –≤–µ—Ä–Ω—É–ª–∞: {success}")
            
            duration = time.time() - start
            if success:
                logger.info(f"[CONTINUOUS] ‚úÖ –°–≤–µ—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {duration:.1f}—Å")
                return True
            else:
                logger.error(f"[CONTINUOUS] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏")
                return False
                
        except Exception as e:
            logger.error(f"[CONTINUOUS] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π: {e}")
            import traceback
            logger.error(f"[CONTINUOUS] ‚ùå Traceback: {traceback.format_exc()}")
            return False
    
    def _load_candles_non_blocking(self):
        """üì¶ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ò–ô)"""
        try:
            logger.info("[CONTINUOUS] üì¶ –≠—Ç–∞–ø 1/6: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)...")
            start = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤–µ—á–∏ –≤ –∫—ç—à–µ
            from bots_modules.imports_and_globals import coins_rsi_data
            if 'candles_cache' in coins_rsi_data and coins_rsi_data['candles_cache']:
                last_update = coins_rsi_data.get('last_candles_update', '')
                if last_update:
                    from datetime import datetime, timedelta
                    try:
                        last_update_time = datetime.fromisoformat(last_update.replace('Z', '+00:00'))
                        time_diff = datetime.now() - last_update_time.replace(tzinfo=None)
                        if time_diff.total_seconds() < 300:  # –ï—Å–ª–∏ —Å–≤–µ—á–∏ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                            logger.info("[CONTINUOUS] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞")
                            return True
                    except:
                        pass
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            def load_candles_thread():
                try:
                    logger.info("[CONTINUOUS] üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º load_all_coins_candles_fast() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
                    from bots_modules.filters import load_all_coins_candles_fast
                    success = load_all_coins_candles_fast()
                    logger.info(f"[CONTINUOUS] üìä load_all_coins_candles_fast() –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success}")
                except Exception as e:
                    logger.error(f"[CONTINUOUS] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            candles_thread = threading.Thread(target=load_candles_thread, daemon=True)
            candles_thread.start()
            
            # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            candles_thread.join(timeout=2)
            
            duration = time.time() - start
            logger.info(f"[CONTINUOUS] ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ –∑–∞ {duration:.1f}—Å")
            return True
                
        except Exception as e:
            logger.error(f"[CONTINUOUS] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π: {e}")
            import traceback
            logger.error(f"[CONTINUOUS] ‚ùå Traceback: {traceback.format_exc()}")
            return False
    
    def _calculate_rsi(self):
        """üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç"""
        try:
            logger.info("[CONTINUOUS] üìä –≠—Ç–∞–ø 2/6: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI...")
            start = time.time()
            
            # ‚ö° –¢–†–ï–ô–°–ò–ù–ì –û–¢–ö–õ–Æ–ß–ï–ù - –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ (deadlock –Ω–∞ bots_data_lock)
            # try:
            #     from trace_debug import enable_trace
            #     enable_trace()
            #     logger.info("üîç [CONTINUOUS] –¢—Ä–µ–π—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω –¥–ª—è load_all_coins_rsi()")
            # except Exception as trace_error:
            #     logger.warning(f"‚ö†Ô∏è [CONTINUOUS] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–π—Å–∏–Ω–≥: {trace_error}")
            
            # ‚ö° –£–ü–†–û–©–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ threading timeout
            # Threading timeout –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ Windows
            logger.info("[CONTINUOUS] üîÑ –í—ã–∑—ã–≤–∞–µ–º load_all_coins_rsi()...")
            from bots_modules.filters import load_all_coins_rsi
            success = load_all_coins_rsi()
            logger.info(f"[CONTINUOUS] üìä load_all_coins_rsi() –≤–µ—Ä–Ω—É–ª–∞: {success}")
            
            duration = time.time() - start
            if success:
                logger.info(f"[CONTINUOUS] ‚úÖ RSI —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∑–∞ {duration:.1f}—Å")
                return True
            else:
                logger.error(f"[CONTINUOUS] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å RSI")
                return False
                
        except Exception as e:
            logger.error(f"[CONTINUOUS] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {e}")
            import traceback
            logger.error(f"[CONTINUOUS] ‚ùå Traceback: {traceback.format_exc()}")
            return False
    
    def _calculate_rsi_non_blocking(self):
        """üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ò–ô)"""
        try:
            logger.info("[CONTINUOUS] üìä –≠—Ç–∞–ø 2/6: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)...")
            start = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ RSI –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
            from bots_modules.imports_and_globals import coins_rsi_data
            if 'rsi_data' in coins_rsi_data and coins_rsi_data['rsi_data']:
                last_update = coins_rsi_data.get('last_rsi_update', '')
                if last_update:
                    from datetime import datetime
                    try:
                        last_update_time = datetime.fromisoformat(last_update.replace('Z', '+00:00'))
                        time_diff = datetime.now() - last_update_time.replace(tzinfo=None)
                        if time_diff.total_seconds() < 600:  # –ï—Å–ª–∏ RSI –æ–±–Ω–æ–≤–ª—è–ª—Å—è –º–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                            logger.info("[CONTINUOUS] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ RSI –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
                            return True
                    except:
                        pass
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            def calculate_rsi_thread():
                try:
                    logger.info("[CONTINUOUS] üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º load_all_coins_rsi() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
                    from bots_modules.filters import load_all_coins_rsi
                    success = load_all_coins_rsi()
                    logger.info(f"[CONTINUOUS] üìä load_all_coins_rsi() –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success}")
                except Exception as e:
                    logger.error(f"[CONTINUOUS] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Ä–∞—Å—á–µ—Ç–∞ RSI: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            rsi_thread = threading.Thread(target=calculate_rsi_thread, daemon=True)
            rsi_thread.start()
            
            # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            rsi_thread.join(timeout=3)
            
            duration = time.time() - start
            logger.info(f"[CONTINUOUS] ‚úÖ –†–∞—Å—á–µ—Ç RSI –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ –∑–∞ {duration:.1f}—Å")
            return True
                
        except Exception as e:
            logger.error(f"[CONTINUOUS] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {e}")
            import traceback
            logger.error(f"[CONTINUOUS] ‚ùå Traceback: {traceback.format_exc()}")
            return False
    
    def _calculate_maturity(self):
        """üßÆ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑—Ä–µ–ª–æ—Å—Ç—å –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –Ω–µ–∑—Ä–µ–ª—ã–µ)"""
        try:
            logger.info("[CONTINUOUS] üßÆ –≠—Ç–∞–ø 3/6: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑—Ä–µ–ª–æ—Å—Ç—å...")
            start = time.time()
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ threading (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Windows)
            from threading import Thread
            
            result = [None]
            exception = [None]
            
            def run_maturity():
                try:
                    from bots_modules.maturity import calculate_all_coins_maturity
                    calculate_all_coins_maturity()
                    result[0] = True
                except Exception as e:
                    exception[0] = e
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = Thread(target=run_maturity)
            thread.daemon = True
            thread.start()
            
            # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
            thread.join(timeout=60)
            
            if thread.is_alive():
                logger.error("[CONTINUOUS] ‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç —Ä–∞—Å—á–µ—Ç–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏ (60—Å)")
                return
            
            if exception[0]:
                raise exception[0]
                
            duration = time.time() - start
            logger.info(f"[CONTINUOUS] ‚úÖ –ó—Ä–µ–ª–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∑–∞ {duration:.1f}—Å")
            
        except Exception as e:
            logger.error(f"[CONTINUOUS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    
    def _analyze_trends(self):
        """üìà –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –¥–ª—è —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç"""
        try:
            logger.info("[CONTINUOUS] üìà –≠—Ç–∞–ø 4/6: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã...")
            start = time.time()
            
            from bots_modules.filters import analyze_trends_for_signal_coins
            analyze_trends_for_signal_coins()
            
            duration = time.time() - start
            logger.info(f"[CONTINUOUS] ‚úÖ –¢—Ä–µ–Ω–¥—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {duration:.1f}—Å")
            
        except Exception as e:
            logger.error(f"[CONTINUOUS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    
    def _process_filters(self):
        """üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–Ω–≥/—à–æ—Ä—Ç –º–æ–Ω–µ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        try:
            logger.info("[CONTINUOUS] üîç –≠—Ç–∞–ø 5/6: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...")
            start = time.time()
            
            from bots_modules.filters import process_long_short_coins_with_filters
            filtered_coins = process_long_short_coins_with_filters()
            
            duration = time.time() - start
            logger.info(f"[CONTINUOUS] ‚úÖ –§–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞ {duration:.1f}—Å ({len(filtered_coins)} –º–æ–Ω–µ—Ç)")
            return filtered_coins
            
        except Exception as e:
            logger.error(f"[CONTINUOUS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {e}")
            return []
    
    def _set_filtered_coins_for_autobot(self, filtered_coins):
        """‚úÖ –ü–µ—Ä–µ–¥–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∞–≤—Ç–æ–±–æ—Ç—É"""
        try:
            logger.info("[CONTINUOUS] ‚úÖ –≠—Ç–∞–ø 6/6: –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–Ω–µ—Ç—ã –∞–≤—Ç–æ–±–æ—Ç—É...")
            start = time.time()
            
            from bots_modules.filters import set_filtered_coins_for_autobot
            set_filtered_coins_for_autobot(filtered_coins)
            
            duration = time.time() - start
            logger.info(f"[CONTINUOUS] ‚úÖ –ú–æ–Ω–µ—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∑–∞ {duration:.3f}—Å")
            
        except Exception as e:
            logger.error(f"[CONTINUOUS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –º–æ–Ω–µ—Ç –∞–≤—Ç–æ–±–æ—Ç—É: {e}")

    def get_status(self):
        """üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞"""
        return {
            'is_running': self.is_running,
            'update_count': self.update_count,
            'error_count': self.error_count,
            'last_update': self.last_update_time.isoformat() if self.last_update_time else None,
            'update_interval': self.update_interval
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–æ—Ä–∫–µ—Ä–∞
_continuous_loader = None

def start_continuous_loader(exchange_obj=None, update_interval=180):
    """üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö"""
    global _continuous_loader
    
    if _continuous_loader and _continuous_loader.is_running:
        logger.warning("[CONTINUOUS] ‚ö†Ô∏è –ó–∞–≥—Ä—É–∑—á–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return _continuous_loader
    
    _continuous_loader = ContinuousDataLoader(exchange_obj, update_interval)
    _continuous_loader.start()
    return _continuous_loader

def stop_continuous_loader():
    """üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö"""
    global _continuous_loader
    
    if _continuous_loader:
        _continuous_loader.stop()
        _continuous_loader = None

def get_continuous_loader():
    """üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
    return _continuous_loader

