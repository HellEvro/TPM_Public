"""–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç

–í–∫–ª—é—á–∞–µ—Ç:
- load_mature_coins_storage - –∑–∞–≥—Ä—É–∑–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç
- save_mature_coins_storage - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
- is_coin_mature_stored - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
- add_mature_coin_to_storage - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
- remove_mature_coin_from_storage - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
- update_mature_coin_verification - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
- check_coin_maturity_with_storage - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
- check_coin_maturity - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏
"""

import os
import json
import time
import threading
import logging
from datetime import datetime

logger = logging.getLogger('BotsService')

# –ò–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ imports_and_globals
try:
    from bots_modules.imports_and_globals import (
        bots_data_lock, bots_data,
        MIN_CANDLES_FOR_MATURITY, MIN_RSI_LOW, MAX_RSI_HIGH
    )
except ImportError:
    bots_data_lock = threading.Lock()
    bots_data = {}
    # ‚úÖ –í–ê–ñ–ù–û: Fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å default_auto_bot_config.json
    MIN_CANDLES_FOR_MATURITY = 400  # –ë—ã–ª–æ 200, —Ç–µ–ø–µ—Ä—å 400
    MIN_RSI_LOW = 35
    MAX_RSI_HIGH = 65

# –ò–º–ø–æ—Ä—Ç calculate_rsi_history –∏–∑ calculations
try:
    from bots_modules.calculations import calculate_rsi_history
except ImportError:
    def calculate_rsi_history(prices, period=14):
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
mature_coins_storage = {}
MATURE_COINS_FILE = 'data/mature_coins.json'
MATURITY_CHECK_CACHE_FILE = 'data/maturity_check_cache.json'  # üöÄ –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
mature_coins_lock = threading.Lock()

# üöÄ –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞)
last_maturity_check = {'coins_count': 0, 'config_hash': None}
maturity_data_invalidated = False  # –§–ª–∞–≥: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è

def load_maturity_check_cache():
    """üöÄ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    global last_maturity_check
    try:
        if os.path.exists(MATURITY_CHECK_CACHE_FILE):
            with open(MATURITY_CHECK_CACHE_FILE, 'r', encoding='utf-8') as f:
                cached_data = json.load(f)
                last_maturity_check['coins_count'] = cached_data.get('coins_count', 0)
                last_maturity_check['config_hash'] = cached_data.get('config_hash', None)
                logger.info(f"[MATURITY_CACHE] üíæ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à: {last_maturity_check['coins_count']} –º–æ–Ω–µ—Ç")
        else:
            logger.info("[MATURITY_CACHE] üìù –§–∞–π–ª –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
    except Exception as e:
        logger.error(f"[MATURITY_CACHE] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
        last_maturity_check = {'coins_count': 0, 'config_hash': None}

def save_maturity_check_cache():
    """üöÄ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª"""
    try:
        os.makedirs(os.path.dirname(MATURITY_CHECK_CACHE_FILE), exist_ok=True)
        with open(MATURITY_CHECK_CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(last_maturity_check, f, indent=2, ensure_ascii=False)
        logger.debug(f"[MATURITY_CACHE] üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {last_maturity_check['coins_count']} –º–æ–Ω–µ—Ç")
    except Exception as e:
        logger.error(f"[MATURITY_CACHE] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")

def load_mature_coins_storage(expected_coins_count=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    global mature_coins_storage, maturity_data_invalidated
    try:
        if os.path.exists(MATURE_COINS_FILE):
            with open(MATURE_COINS_FILE, 'r', encoding='utf-8') as f:
                loaded_data = json.load(f)
            
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–∏–º–∏
            need_recalculation = False
            if loaded_data:
                # üéØ –ü–†–û–í–ï–†–ö–ê 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
                if expected_coins_count is not None and len(loaded_data) != expected_coins_count:
                    logger.warning(f"[MATURITY_STORAGE] üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: —Ñ–∞–π–ª={len(loaded_data)}, –±–∏—Ä–∂–∞={expected_coins_count}")
                    need_recalculation = True
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                first_coin = list(loaded_data.values())[0]
                if 'maturity_data' in first_coin and 'details' in first_coin['maturity_data']:
                    file_min_required = first_coin['maturity_data']['details'].get('min_required')
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    from bots_modules.imports_and_globals import bots_data, bots_data_lock
                    with bots_data_lock:
                        config = bots_data.get('auto_bot_config', {})
                    
                    current_min_candles = config.get('min_candles_for_maturity', MIN_CANDLES_FOR_MATURITY)
                    current_min_rsi_low = config.get('min_rsi_low', MIN_RSI_LOW)
                    current_max_rsi_high = config.get('max_rsi_high', MAX_RSI_HIGH)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    if (file_min_required != current_min_candles or 
                        first_coin['maturity_data']['details'].get('config_min_rsi_low') != current_min_rsi_low or
                        first_coin['maturity_data']['details'].get('config_max_rsi_high') != current_max_rsi_high):
                        
                        logger.warning(f"[MATURITY_STORAGE] ‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å!")
                        logger.warning(f"[MATURITY_STORAGE] –§–∞–π–ª: min_candles={file_min_required}, min_rsi={first_coin['maturity_data']['details'].get('config_min_rsi_low')}, max_rsi={first_coin['maturity_data']['details'].get('config_max_rsi_high')}")
                        logger.warning(f"[MATURITY_STORAGE] –¢–µ–∫—É—â–∏–µ: min_candles={current_min_candles}, min_rsi={current_min_rsi_low}, max_rsi={current_max_rsi_high}")
                        logger.warning(f"[MATURITY_STORAGE] üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑—Ä–µ–ª–æ—Å—Ç–∏...")
                        
                        need_recalculation = True
                        
                        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
                        os.remove(MATURE_COINS_FILE)
                        loaded_data = {}
                        
                        # ‚úÖ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è
                        maturity_data_invalidated = True
                        logger.warning(f"[MATURITY_STORAGE] üö´ –î–∞–Ω–Ω—ã–µ –∑—Ä–µ–ª–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ó–ê–ü–†–ï–©–ï–ù–û –¥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞")
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å in-place, –∞ –Ω–µ –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º
            # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç.–∫. mature_coins_storage –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏
            with mature_coins_lock:
                mature_coins_storage.clear()
                mature_coins_storage.update(loaded_data)
            
            # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ imports_and_globals
            try:
                import bots_modules.imports_and_globals as ig_module
                if hasattr(ig_module, 'mature_coins_storage'):
                    with ig_module.mature_coins_lock:
                        ig_module.mature_coins_storage.clear()
                        ig_module.mature_coins_storage.update(loaded_data)
                    logger.debug(f"[MATURITY_STORAGE] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –≤ imports_and_globals")
            except Exception as sync_error:
                logger.warning(f"[MATURITY_STORAGE] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å imports_and_globals: {sync_error}")
            
            if need_recalculation:
                logger.info(f"[MATURITY_STORAGE] üîÑ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∑—Ä–µ–ª–æ—Å—Ç–∏")
            else:
                logger.info(f"[MATURITY_STORAGE] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(mature_coins_storage)} –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞")
        else:
            with mature_coins_lock:
                mature_coins_storage.clear()
            logger.info("[MATURITY_STORAGE] –§–∞–π–ª —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
    except Exception as e:
        logger.error(f"[MATURITY_STORAGE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        with mature_coins_lock:
            mature_coins_storage.clear()

def save_mature_coins_storage():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç –≤ —Ñ–∞–π–ª"""
    global maturity_data_invalidated
    
    # ‚úÖ –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    if maturity_data_invalidated:
        logger.warning(f"[MATURITY_STORAGE] üö´ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã (–∂–¥–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç–∞)")
        return False
    
    try:
        with mature_coins_lock:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            storage_copy = mature_coins_storage.copy()
        
        os.makedirs(os.path.dirname(MATURE_COINS_FILE), exist_ok=True)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ bot_engine.storage
        from bot_engine.storage import save_json_file
        save_json_file(MATURE_COINS_FILE, storage_copy)
        logger.debug(f"[MATURITY_STORAGE] –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(storage_copy)} –º–æ–Ω–µ—Ç")
        return True  # –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
    except Exception as e:
        logger.error(f"[MATURITY_STORAGE] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        return False

def is_coin_mature_stored(symbol):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –º–æ–Ω–µ—Ç–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    # ‚ö° –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò: —á—Ç–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è - –∞—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    if symbol not in mature_coins_storage:
        return False
    
    # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏
    stored_data = mature_coins_storage[symbol]
    maturity_data = stored_data.get('maturity_data', {})
    stored_details = maturity_data.get('details', {})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    # ‚ö° –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò: –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, GIL –¥–µ–ª–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –∞—Ç–æ–º–∞—Ä–Ω—ã–º
    config = bots_data.get('auto_bot_config', {})
    
    current_min_candles = config.get('min_candles_for_maturity', MIN_CANDLES_FOR_MATURITY)
    current_min_rsi_low = config.get('min_rsi_low', MIN_RSI_LOW)
    current_max_rsi_high = config.get('max_rsi_high', MAX_RSI_HIGH)
    
    # ‚úÖ –°–†–ê–í–ù–ò–í–ê–ï–ú –° –°–û–•–†–ê–ù–ï–ù–ù–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò –ö–û–ù–§–ò–ì–ê
    stored_min_candles = stored_details.get('min_required', 0)
    stored_config_min_rsi_low = stored_details.get('config_min_rsi_low', 0)
    stored_config_max_rsi_high = stored_details.get('config_max_rsi_high', 0)
    
    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–µ—Ç—É
    if stored_min_candles != current_min_candles:
        logger.debug(f"[MATURITY_STORAGE] {symbol}: –∏–∑–º–µ–Ω–∏–ª–æ—Å—å min_candles ({stored_min_candles} ‚Üí {current_min_candles})")
        del mature_coins_storage[symbol]
        return False
    
    if stored_config_min_rsi_low != current_min_rsi_low:
        logger.debug(f"[MATURITY_STORAGE] {symbol}: –∏–∑–º–µ–Ω–∏–ª–æ—Å—å config_min_rsi_low ({stored_config_min_rsi_low} ‚Üí {current_min_rsi_low})")
        del mature_coins_storage[symbol]
        return False
    
    if stored_config_max_rsi_high != current_max_rsi_high:
        logger.debug(f"[MATURITY_STORAGE] {symbol}: –∏–∑–º–µ–Ω–∏–ª–æ—Å—å config_max_rsi_high ({stored_config_max_rsi_high} ‚Üí {current_max_rsi_high})")
        del mature_coins_storage[symbol]
        return False
    
    logger.debug(f"[MATURITY_STORAGE] {symbol}: –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    return True

def add_mature_coin_to_storage(symbol, maturity_data, auto_save=True):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–Ω–µ—Ç—É –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë —Ç–∞–º –µ—â–µ –Ω–µ—Ç)"""
    global mature_coins_storage, maturity_data_invalidated
    
    with mature_coins_lock:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–æ–Ω–µ—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if symbol in mature_coins_storage:
            # –ú–æ–Ω–µ—Ç–∞ —É–∂–µ –µ—Å—Ç—å - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            logger.debug(f"[MATURITY_STORAGE] {symbol}: —É–∂–µ –µ—Å—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            return
        
        # ‚úÖ –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì: –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞, –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞ –≤–∞–ª–∏–¥–Ω—ã
        if maturity_data_invalidated:
            maturity_data_invalidated = False
            logger.info(f"[MATURITY_STORAGE] ‚úÖ –ù–∞—á–∞—Ç –ø–µ—Ä–µ—Å—á–µ—Ç –∑—Ä–µ–ª–æ—Å—Ç–∏ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        mature_coins_storage[symbol] = {
            'timestamp': time.time(),
            'maturity_data': maturity_data
        }
    
    if auto_save:
        save_mature_coins_storage()
        logger.info(f"[MATURITY_STORAGE] –ú–æ–Ω–µ—Ç–∞ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç")
    else:
        logger.debug(f"[MATURITY_STORAGE] –ú–æ–Ω–µ—Ç–∞ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–±–µ–∑ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)")

def remove_mature_coin_from_storage(symbol):
    """–£–¥–∞–ª—è–µ—Ç –º–æ–Ω–µ—Ç—É –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç"""
    global mature_coins_storage
    if symbol in mature_coins_storage:
        del mature_coins_storage[symbol]
        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–∞–∫–µ—Ç–Ω–æ
        logger.debug(f"[MATURITY_STORAGE] –ú–æ–Ω–µ—Ç–∞ {symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–±–µ–∑ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)")

def load_optimal_ema_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA –∏–∑ —Ñ–∞–π–ª–∞"""
    global optimal_ema_data
    try:
        if os.path.exists(OPTIMAL_EMA_FILE):
            with open(OPTIMAL_EMA_FILE, 'r', encoding='utf-8') as f:
                optimal_ema_data = json.load(f)
                logger.info(f"[OPTIMAL_EMA] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(optimal_ema_data)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA")
        else:
            optimal_ema_data = {}
            logger.info("[OPTIMAL_EMA] –§–∞–π–ª —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ EMA –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"[OPTIMAL_EMA] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA: {e}")
        optimal_ema_data = {}

def get_optimal_ema_periods(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ EMA –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
    global optimal_ema_data
    if symbol in optimal_ema_data:
        data = optimal_ema_data[symbol]
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (ema_short_period, ema_long_period)
        if 'ema_short_period' in data and 'ema_long_period' in data:
            return {
                'ema_short': data['ema_short_period'],
                'ema_long': data['ema_long_period'],
                'accuracy': data.get('accuracy', 0),
                'long_signals': data.get('long_signals', 0),
                'short_signals': data.get('short_signals', 0),
                'analysis_method': data.get('analysis_method', 'unknown')
            }
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (ema_short, ema_long)
        elif 'ema_short' in data and 'ema_long' in data:
            return {
                'ema_short': data['ema_short'],
                'ema_long': data['ema_long'],
                'accuracy': data.get('accuracy', 0),
                'long_signals': 0,
                'short_signals': 0,
                'analysis_method': 'legacy'
            }
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            logger.warning(f"[OPTIMAL_EMA] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return {
                'ema_short': 50,
                'ema_long': 200,
                'accuracy': 0,
                'long_signals': 0,
                'short_signals': 0,
                'analysis_method': 'default'
            }
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return {
            'ema_short': 50,
            'ema_long': 200,
            'accuracy': 0,
            'long_signals': 0,
            'short_signals': 0,
            'analysis_method': 'default'
        }

def update_optimal_ema_data(new_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    global optimal_ema_data
    try:
        if isinstance(new_data, dict):
            optimal_ema_data.update(new_data)
            logger.info(f"[OPTIMAL_EMA] –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(new_data)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA")
            return True
        else:
            logger.error("[OPTIMAL_EMA] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
    except Exception as e:
        logger.error(f"[OPTIMAL_EMA] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_coin_maturity_with_storage(symbol, candles):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑—Ä–µ–ª–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if is_coin_mature_stored(symbol):
        logger.debug(f"[MATURITY_STORAGE] {symbol}: –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç")
        return {
            'is_mature': True,
            'details': {'stored': True, 'from_storage': True}
        }
    
    # –ï—Å–ª–∏ –Ω–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    maturity_result = check_coin_maturity(symbol, candles)
    
    # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ –∑—Ä–µ–ª–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–±–µ–∑ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    if maturity_result['is_mature']:
        add_mature_coin_to_storage(symbol, maturity_result, auto_save=False)
    
    return maturity_result

def check_coin_maturity(symbol, candles):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑—Ä–µ–ª–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with bots_data_lock:
            config = bots_data.get('auto_bot_config', {})
        
        min_candles = config.get('min_candles_for_maturity', MIN_CANDLES_FOR_MATURITY)
        min_rsi_low = config.get('min_rsi_low', MIN_RSI_LOW)
        max_rsi_high = config.get('max_rsi_high', MAX_RSI_HIGH)
        # –£–±—Ä–∞–ª–∏ min_volatility - –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        
        if not candles or len(candles) < min_candles:
            return {
                'is_mature': False,
                'reason': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π: {len(candles) if candles else 0}/{min_candles}',
                'details': {
                    'candles_count': len(candles) if candles else 0,
                    'min_required': min_candles
                }
            }
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏
        # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –º–æ–Ω–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –†–ï–¶–ï–ù–¢–ù–û–ï –≤—Ä–µ–º—è
        recent_candles = candles[-min_candles:] if len(candles) >= min_candles else candles
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
        closes = [candle['close'] for candle in recent_candles]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é RSI
        rsi_history = calculate_rsi_history(closes, 14)
        if not rsi_history:
            return {
                'is_mature': False,
                'reason': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é RSI',
                'details': {}
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω RSI
        rsi_min = min(rsi_history)
        rsi_max = max(rsi_history)
        rsi_range = rsi_max - rsi_min
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏ (—É–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)
        maturity_checks = {
            'sufficient_candles': len(candles) >= min_candles,
            'rsi_reached_low': rsi_min <= min_rsi_low,
            'rsi_reached_high': rsi_max >= max_rsi_high
        }
        
        # –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ - –æ–Ω–∞ –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–æ–π
        volatility = 0  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –∑—Ä–µ–ª–æ—Å—Ç—å
        # –ú–æ–Ω–µ—Ç–∞ –∑—Ä–µ–ª–∞—è, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –ò RSI –¥–æ—Å—Ç–∏–≥–∞–ª –Ω–∏–∑–∫–∏—Ö –ò –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª)
        is_mature = maturity_checks['sufficient_candles'] and maturity_checks['rsi_reached_low'] and maturity_checks['rsi_reached_high']
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞)
        # logger.info(f"[MATURITY_DEBUG] {symbol}: —Å–≤–µ—á–∏={maturity_checks['sufficient_candles']} ({len(candles)}/{min_candles}), RSI_low={maturity_checks['rsi_reached_low']} (min={rsi_min:.1f}<=>{min_rsi_low}), RSI_high={maturity_checks['rsi_reached_high']} (max={rsi_max:.1f}>={max_rsi_high}), –∑—Ä–µ–ª–∞—è={is_mature}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞
        details = {
            'candles_count': len(candles),
            'min_required': min_candles,
            'config_min_rsi_low': min_rsi_low,
            'config_max_rsi_high': max_rsi_high,
            'rsi_min': round(rsi_min, 1),
            'rsi_max': round(rsi_max, 1)
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –Ω–µ–∑—Ä–µ–ª–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç)
        if not is_mature:
            failed_checks = [check for check, passed in maturity_checks.items() if not passed]
            reason = f'–ù–µ –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏: {", ".join(failed_checks)}'
            logger.debug(f"[MATURITY] {symbol}: {reason}")
            logger.debug(f"[MATURITY] {symbol}: –°–≤–µ—á–∏={len(candles)}, RSI={rsi_min:.1f}-{rsi_max:.1f}")
        else:
            reason = None  # –î–ª—è –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç reason –Ω–µ –Ω—É–∂–µ–Ω
        
        result = {
            'is_mature': is_mature,
            'details': details
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º reason —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç
        if reason:
            result['reason'] = reason
        
        return result
        
    except Exception as e:
        logger.error(f"[MATURITY] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏ {symbol}: {e}")
        return {
            'is_mature': False,
            'reason': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}',
            'details': {}
        }

def calculate_all_coins_maturity():
    """üßÆ –£–ú–ù–´–ô —Ä–∞—Å—á–µ—Ç –∑—Ä–µ–ª–æ—Å—Ç–∏ - –¢–û–õ–¨–ö–û –¥–ª—è –Ω–µ–∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç!"""
    try:
        logger.info("[MATURITY_BATCH] üßÆ –ù–∞—á–∏–Ω–∞–µ–º –£–ú–ù–´–ô —Ä–∞—Å—á–µ—Ç –∑—Ä–µ–ª–æ—Å—Ç–∏...")
        
        from bots_modules.imports_and_globals import rsi_data_lock, coins_rsi_data, get_exchange, bots_data
        
        exchange = get_exchange()
        if not exchange:
            logger.error("[MATURITY_BATCH] ‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã —Å RSI –¥–∞–Ω–Ω—ã–º–∏
        # ‚ö° –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò: —á—Ç–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è - –∞—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        all_coins = []
        for symbol, coin_data in coins_rsi_data['coins'].items():
            if coin_data.get('rsi6h') is not None:
                all_coins.append(symbol)
        
        logger.info(f"[MATURITY_BATCH] üìä –ù–∞–π–¥–µ–Ω–æ {len(all_coins)} –º–æ–Ω–µ—Ç —Å RSI –¥–∞–Ω–Ω—ã–º–∏")
        
        # üöÄ –°–£–ü–ï–†-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å!
        global last_maturity_check
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –∑—Ä–µ–ª–æ—Å—Ç–∏
        config = bots_data.get('auto_bot_config', {})
        current_config_params = {
            'min_candles': config.get('min_candles_for_maturity', MIN_CANDLES_FOR_MATURITY),
            'min_rsi_low': config.get('min_rsi_low', MIN_RSI_LOW),
            'max_rsi_high': config.get('max_rsi_high', MAX_RSI_HIGH)
        }
        current_config_hash = str(current_config_params)
        current_coins_count = len(all_coins)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —á—Ç–æ-—Ç–æ —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ä–∞–∑–∞?
        if (last_maturity_check['coins_count'] == current_coins_count and 
            last_maturity_check['config_hash'] == current_config_hash):
            logger.info(f"[MATURITY_BATCH] ‚ö° –ü–†–û–ü–£–°–ö: –ö–æ–Ω—Ñ–∏–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç ({current_coins_count}) –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å!")
            logger.info(f"[MATURITY_BATCH] üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑—Ä–µ–ª–æ—Å—Ç–∏")
            return True
        
        logger.info(f"[MATURITY_BATCH] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
        if last_maturity_check['coins_count'] != current_coins_count:
            logger.info(f"[MATURITY_BATCH] üìä –ú–æ–Ω–µ—Ç—ã: {last_maturity_check['coins_count']} ‚Üí {current_coins_count}")
        if last_maturity_check['config_hash'] != current_config_hash:
            logger.info(f"[MATURITY_BATCH] ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥ –∑—Ä–µ–ª–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è")
        
        if not all_coins:
            logger.warning("[MATURITY_BATCH] ‚ö†Ô∏è –ù–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏")
            return False
        
        # üéØ –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û –Ω–µ–∑—Ä–µ–ª—ã–µ –º–æ–Ω–µ—Ç—ã!
        coins_to_check = []
        already_mature_count = 0
        
        for symbol in all_coins:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–Ω–µ—Ç–∞ —É–∂–µ –≤ –∫—ç—à–µ –∫–∞–∫ –∑—Ä–µ–ª–∞—è
            if is_coin_mature_stored(symbol):
                already_mature_count += 1
                logger.debug(f"[MATURITY_BATCH] ‚úÖ {symbol}: –£–ñ–ï –ó–†–ï–õ–ê–Ø –≤ –∫—ç—à–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            else:
                coins_to_check.append(symbol)
                logger.debug(f"[MATURITY_BATCH] ‚ùì {symbol}: –ù–ï–ó–†–ï–õ–ê–Ø –∏–ª–∏ –ù–û–í–ê–Ø - –ø—Ä–æ–≤–µ—Ä–∏–º")
        
        logger.info(f"[MATURITY_BATCH] üéØ –£–ú–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø:")
        logger.info(f"[MATURITY_BATCH] üìä –£–∂–µ –∑—Ä–µ–ª—ã–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º): {already_mature_count}")
        logger.info(f"[MATURITY_BATCH] üìä –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {len(coins_to_check)}")
        
        if not coins_to_check:
            logger.info("[MATURITY_BATCH] ‚úÖ –í—Å–µ –º–æ–Ω–µ—Ç—ã —É–∂–µ –∑—Ä–µ–ª—ã–µ - –ø–µ—Ä–µ—Å—á–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω!")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑—Ä–µ–ª–æ—Å—Ç—å –¢–û–õ–¨–ö–û –¥–ª—è –Ω–µ–∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç
        mature_count = 0
        immature_count = 0
        
        for i, symbol in enumerate(coins_to_check, 1):
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –º–æ–Ω–µ—Ç
                if i == 1 or i % 10 == 0 or i == len(coins_to_check):
                    logger.info(f"[MATURITY_BATCH] üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(coins_to_check)} –º–æ–Ω–µ—Ç ({round(i/len(coins_to_check)*100)}%)")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏
                chart_response = exchange.get_chart_data(symbol, '6h', '30d')
                if not chart_response or not chart_response.get('success'):
                    logger.debug(f"[MATURITY_BATCH] ‚ö†Ô∏è {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏")
                    immature_count += 1
                    continue
                
                candles = chart_response.get('data', {}).get('candles', [])
                if not candles:
                    logger.debug(f"[MATURITY_BATCH] ‚ö†Ô∏è {symbol}: –ù–µ—Ç —Å–≤–µ—á–µ–π")
                    immature_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑—Ä–µ–ª–æ—Å—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                maturity_result = check_coin_maturity_with_storage(symbol, candles)
                
                if maturity_result['is_mature']:
                    mature_count += 1
                    logger.debug(f"[MATURITY_BATCH] ‚úÖ {symbol}: –°–¢–ê–õ–ê –ó–†–ï–õ–û–ô ({maturity_result.get('reason', '–ó—Ä–µ–ª–∞—è')})")
                else:
                    immature_count += 1
                    logger.debug(f"[MATURITY_BATCH] ‚ùå {symbol}: –û–°–¢–ê–õ–ê–°–¨ –ù–ï–ó–†–ï–õ–û–ô ({maturity_result.get('reason', '–ù–µ–∑—Ä–µ–ª–∞—è')})")
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–£–°–ö–û–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
                time.sleep(0.05)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 0.1 –¥–æ 0.05
                
            except Exception as e:
                logger.error(f"[MATURITY_BATCH] ‚ùå {symbol}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏: {e}")
                immature_count += 1
        
        logger.info(f"[MATURITY_BATCH] ‚úÖ –£–ú–ù–´–ô —Ä–∞—Å—á–µ—Ç –∑—Ä–µ–ª–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        logger.info(f"[MATURITY_BATCH] üìä –£–∂–µ –±—ã–ª–∏ –∑—Ä–µ–ª—ã–º–∏: {already_mature_count}")
        logger.info(f"[MATURITY_BATCH] üìä –°—Ç–∞–ª–∏ –∑—Ä–µ–ª—ã–º–∏: {mature_count}")
        logger.info(f"[MATURITY_BATCH] üìä –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑—Ä–µ–ª—ã–º–∏: {immature_count}")
        logger.info(f"[MATURITY_BATCH] üìä –í—Å–µ–≥–æ –∑—Ä–µ–ª—ã—Ö: {already_mature_count + mature_count}")
        logger.info(f"[MATURITY_BATCH] üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏: {len(coins_to_check)}")
        
        # üöÄ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞ –ò –°–û–•–†–ê–ù–Ø–ï–ú –í –§–ê–ô–õ
        last_maturity_check['coins_count'] = current_coins_count
        last_maturity_check['config_hash'] = current_config_hash
        save_maturity_check_cache()  # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª!
        logger.info(f"[MATURITY_BATCH] üíæ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {current_coins_count} –º–æ–Ω–µ—Ç")
        
        return True
        
    except Exception as e:
        logger.error(f"[MATURITY_BATCH] ‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏: {e}")
        return False

