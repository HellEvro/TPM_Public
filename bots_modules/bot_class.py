"""–ö–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ NewTradingBot

–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (RSI time filter, trend, maturity)
- –ó–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ (trailing stop, break-even)
"""

import logging
from datetime import datetime
import time
import threading

logger = logging.getLogger('BotsService')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
try:
    from bots_modules.imports_and_globals import (
        bots_data_lock, bots_data, rsi_data_lock, coins_rsi_data,
        BOT_STATUS, get_exchange, system_initialized, get_auto_bot_config
    )
except ImportError:
    # Fallback –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è
    bots_data_lock = threading.Lock()
    bots_data = {}
    rsi_data_lock = threading.Lock()
    coins_rsi_data = {}
    BOT_STATUS = {
        'IDLE': 'idle',
        'RUNNING': 'running',
        'IN_POSITION_LONG': 'in_position_long',
        'IN_POSITION_SHORT': 'in_position_short',
        'WAITING': 'waiting',
        'STOPPED': 'stopped',
        'ERROR': 'error',
        'PAUSED': 'paused'
    }
    def get_exchange():
        return None
    system_initialized = False

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞)
try:
    from bots_modules.filters import check_rsi_time_filter
except:
    def check_rsi_time_filter(*args, **kwargs):
        return {'allowed': True, 'reason': 'Filter not loaded'}

# –ò–º–ø–æ—Ä—Ç AI Risk Manager –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ TP/SL
try:
    from bot_engine.ai.risk_manager import DynamicRiskManager
    AI_RISK_MANAGER_AVAILABLE = True
except ImportError:
    DynamicRiskManager = None
    AI_RISK_MANAGER_AVAILABLE = False

class NewTradingBot:
    """–ù–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    
    def __init__(self, symbol, config=None, exchange=None):
        self.symbol = symbol
        self.config = config or {}
        self.exchange = exchange
        
        logger.info(f"[NEW_BOT_{symbol}] ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.volume_mode = self.config.get('volume_mode', 'usdt')
        self.volume_value = self.config.get('volume_value', 10.0)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.status = self.config.get('status', BOT_STATUS['IDLE'])
        self.entry_price = self.config.get('entry_price', None)
        self.position_side = self.config.get('position_side', None)
        self.unrealized_pnl = self.config.get('unrealized_pnl', 0.0)
        self.created_at = self.config.get('created_at', datetime.now().isoformat())
        self.last_signal_time = self.config.get('last_signal_time', None)
        
        # –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
        self.max_profit_achieved = self.config.get('max_profit_achieved', 0.0)
        self.trailing_stop_price = self.config.get('trailing_stop_price', None)
        self.break_even_activated = bool(self.config.get('break_even_activated', False))
        
        # –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
        position_start_str = self.config.get('position_start_time', None)
        if position_start_str:
            try:
                self.position_start_time = datetime.fromisoformat(position_start_str)
            except:
                self.position_start_time = None
        else:
            self.position_start_time = None
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        self.order_id = self.config.get('order_id', None)
        self.entry_timestamp = self.config.get('entry_timestamp', None)
        self.opened_by_autobot = self.config.get('opened_by_autobot', False)
        
        logger.info(f"[NEW_BOT_{symbol}] ‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å—Ç–∞—Ç—É—Å: {self.status})")
        
    def update_status(self, new_status, entry_price=None, position_side=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        old_status = self.status
        self.status = new_status
        
        if entry_price is not None:
            self.entry_price = entry_price
        if position_side is not None:
            self.position_side = position_side
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—é
        if new_status in [BOT_STATUS['IN_POSITION_LONG'], BOT_STATUS['IN_POSITION_SHORT']]:
            self.position_start_time = datetime.now()
            self.max_profit_achieved = 0.0
            self.trailing_stop_price = None
            self.break_even_activated = False
            
        logger.info(f"[NEW_BOT_{self.symbol}] üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {old_status} ‚Üí {new_status}")
    
    def should_open_long(self, rsi, trend, candles):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é"""
        try:
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –î–ï–õ–ò–°–¢–ò–ù–ì–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –î–û –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            from bots_modules.sync_and_cache import load_delisted_coins
            delisted_data = load_delisted_coins()
            delisted_coins = delisted_data.get('delisted_coins', {})
            
            if self.symbol in delisted_coins:
                delisting_info = delisted_coins[self.symbol]
                logger.warning(f"[NEW_BOT_{self.symbol}] üö® –î–ï–õ–ò–°–¢–ò–ù–ì! –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG - {delisting_info.get('reason', 'Delisting detected')}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                rsi_long_threshold = auto_config.get('rsi_long_threshold', 29)
                avoid_down_trend = auto_config.get('avoid_down_trend', True)
                rsi_time_filter_enabled = auto_config.get('rsi_time_filter_enabled', True)
                rsi_time_filter_candles = auto_config.get('rsi_time_filter_candles', 8)
                rsi_time_filter_lower = auto_config.get('rsi_time_filter_lower', 35)
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ RSI
            if rsi > rsi_long_threshold:
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚ùå RSI {rsi:.1f} > {rsi_long_threshold} - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG")
                return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
            if avoid_down_trend and trend == 'DOWN':
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚ùå DOWN —Ç—Ä–µ–Ω–¥ - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG")
                return False
            
            # 3. RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
            if rsi_time_filter_enabled:
                time_filter_result = self.check_rsi_time_filter_for_long(candles, rsi, rsi_time_filter_candles, rsi_time_filter_lower)
                if not time_filter_result['allowed']:
                    logger.info(f"[NEW_BOT_{self.symbol}] ‚ùå RSI Time Filter –±–ª–æ–∫–∏—Ä—É–µ—Ç LONG: {time_filter_result['reason']}")
                    return False
            
            logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG (RSI: {rsi:.1f}, Trend: {trend})")
            return True
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LONG: {e}")
            return False
    
    def should_open_short(self, rsi, trend, candles):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—é"""
        try:
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –î–ï–õ–ò–°–¢–ò–ù–ì–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –î–û –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            from bots_modules.sync_and_cache import load_delisted_coins
            delisted_data = load_delisted_coins()
            delisted_coins = delisted_data.get('delisted_coins', {})
            
            if self.symbol in delisted_coins:
                delisting_info = delisted_coins[self.symbol]
                logger.warning(f"[NEW_BOT_{self.symbol}] üö® –î–ï–õ–ò–°–¢–ò–ù–ì! –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT - {delisting_info.get('reason', 'Delisting detected')}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                rsi_short_threshold = auto_config.get('rsi_short_threshold', 71)
                avoid_up_trend = auto_config.get('avoid_up_trend', True)
                rsi_time_filter_enabled = auto_config.get('rsi_time_filter_enabled', True)
                rsi_time_filter_candles = auto_config.get('rsi_time_filter_candles', 8)
                rsi_time_filter_upper = auto_config.get('rsi_time_filter_upper', 65)
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ RSI
            if rsi < rsi_short_threshold:
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚ùå RSI {rsi:.1f} < {rsi_short_threshold} - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT")
                return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
            if avoid_up_trend and trend == 'UP':
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚ùå UP —Ç—Ä–µ–Ω–¥ - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT")
                return False
            
            # 3. RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
            if rsi_time_filter_enabled:
                time_filter_result = self.check_rsi_time_filter_for_short(candles, rsi, rsi_time_filter_candles, rsi_time_filter_upper)
                if not time_filter_result['allowed']:
                    logger.info(f"[NEW_BOT_{self.symbol}] ‚ùå RSI Time Filter –±–ª–æ–∫–∏—Ä—É–µ—Ç SHORT: {time_filter_result['reason']}")
                    return False
            
            logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT (RSI: {rsi:.1f}, Trend: {trend})")
            return True
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SHORT: {e}")
            return False
    
    def check_rsi_time_filter_for_long(self, candles, rsi, filter_candles, filter_lower):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è LONG (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            return check_rsi_time_filter(candles, rsi, 'ENTER_LONG')
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ RSI Time Filter –¥–ª—è LONG: {e}")
            return {'allowed': False, 'reason': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}
    
    def check_rsi_time_filter_for_short(self, candles, rsi, filter_candles, filter_upper):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è SHORT (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            return check_rsi_time_filter(candles, rsi, 'ENTER_SHORT')
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ RSI Time Filter –¥–ª—è SHORT: {e}")
            return {'allowed': False, 'reason': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}
    
    def should_close_long(self, rsi, current_price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é"""
        try:
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                rsi_long_exit = auto_config.get('rsi_long_exit', 65)
            
            if rsi >= rsi_long_exit:
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º LONG: RSI {rsi:.1f} >= {rsi_long_exit}")
                return True, 'RSI_EXIT'
            
            return False, None
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è LONG: {e}")
            return False, None
    
    def should_close_short(self, rsi, current_price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—é"""
        try:
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                rsi_short_exit = auto_config.get('rsi_short_exit', 35)
            
            if rsi <= rsi_short_exit:
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º SHORT: RSI {rsi:.1f} <= {rsi_short_exit}")
                return True, 'RSI_EXIT'
            
            return False, None
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è SHORT: {e}")
            return False, None
    
    def update(self, force_analysis=False, external_signal=None, external_trend=None):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        try:
            if not self.exchange:
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return {'success': False, 'error': 'Exchange not initialized'}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            current_price = None
            current_rsi = None
            current_trend = external_trend
            
            # –ü–æ–ª—É—á–∞–µ–º RSI –¥–∞–Ω–Ω—ã–µ
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ª–∏ rsi_data_lock
                if 'rsi_data_lock' in globals():
                    with rsi_data_lock:
                        coin_data = coins_rsi_data['coins'].get(self.symbol)
                        if coin_data:
                            current_rsi = coin_data.get('rsi6h')
                            current_price = coin_data.get('price')
                            if not current_trend:
                                current_trend = coin_data.get('trend6h', 'NEUTRAL')
                else:
                    # Fallback –µ—Å–ª–∏ lock –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                    coin_data = coins_rsi_data['coins'].get(self.symbol)
                    if coin_data:
                        current_rsi = coin_data.get('rsi6h')
                        current_price = coin_data.get('price')
                        if not current_trend:
                            current_trend = coin_data.get('trend6h', 'NEUTRAL')
            except Exception as e:
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RSI –¥–∞–Ω–Ω—ã—Ö: {e}")
                # Fallback –µ—Å–ª–∏ lock –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                coin_data = coins_rsi_data['coins'].get(self.symbol)
                if coin_data:
                    current_rsi = coin_data.get('rsi6h')
                    current_price = coin_data.get('price')
                    if not current_trend:
                        current_trend = coin_data.get('trend6h', 'NEUTRAL')
            
            if current_rsi is None or current_price is None:
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ—Ç RSI –¥–∞–Ω–Ω—ã—Ö")
                return {'success': False, 'error': 'No RSI data'}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            chart_response = self.exchange.get_chart_data(self.symbol, '6h', '30d')
            if not chart_response or not chart_response.get('success'):
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏")
                return {'success': False, 'error': 'No candles data'}
            
            candles = chart_response.get('data', {}).get('candles', [])
            if not candles:
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ—Ç —Å–≤–µ—á–µ–π")
                return {'success': False, 'error': 'Empty candles'}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if self.status == BOT_STATUS['IDLE']:
                return self._handle_idle_state(current_rsi, current_trend, candles, current_price)
            elif self.status in [BOT_STATUS['IN_POSITION_LONG'], BOT_STATUS['IN_POSITION_SHORT']]:
                return self._handle_position_state(current_rsi, current_trend, candles, current_price)
            else:
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚è≥ –°—Ç–∞—Ç—É—Å {self.status} - –∂–¥–µ–º")
                return {'success': True, 'status': self.status}
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {'success': False, 'error': str(e)}
    
    def _handle_idle_state(self, rsi, trend, candles, price):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE (–æ–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–±–æ—Ç
            with bots_data_lock:
                auto_bot_enabled = bots_data['auto_bot_config']['enabled']
            
            if not auto_bot_enabled:
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚èπÔ∏è –ê–≤—Ç–æ–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")
                return {'success': True, 'status': self.status}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è LONG
            if self.should_open_long(rsi, trend, candles):
                logger.info(f"[NEW_BOT_{self.symbol}] üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é (RSI: {rsi:.1f})")
                if self._open_position_on_exchange('LONG', price):
                    self.update_status(BOT_STATUS['IN_POSITION_LONG'], price, 'LONG')
                    return {'success': True, 'action': 'OPEN_LONG', 'status': self.status}
            else:
                    logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é")
                    return {'success': False, 'error': 'Failed to open LONG position'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT
            if self.should_open_short(rsi, trend, candles):
                logger.info(f"[NEW_BOT_{self.symbol}] üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é (RSI: {rsi:.1f})")
                if self._open_position_on_exchange('SHORT', price):
                    self.update_status(BOT_STATUS['IN_POSITION_SHORT'], price, 'SHORT')
                    return {'success': True, 'action': 'OPEN_SHORT', 'status': self.status}
                else:
                    logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—é")
                    return {'success': False, 'error': 'Failed to open SHORT position'}
            
            logger.debug(f"[NEW_BOT_{self.symbol}] ‚è≥ –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª (RSI: {rsi:.1f}, Trend: {trend})")
            return {'success': True, 'status': self.status}
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –≤ idle —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def _handle_position_state(self, rsi, trend, candles, price):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.entry_price:
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –ù–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –±–∏—Ä–∂–∏")
                self._sync_position_with_exchange()
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
            protection_result = self.check_protection_mechanisms(price)
            if protection_result['should_close']:
                logger.info(f"[NEW_BOT_{self.symbol}] üõ°Ô∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é: {protection_result['reason']}")
                self._close_position_on_exchange(protection_result['reason'])
                return {'success': True, 'action': f"CLOSE_{self.position_side}", 'reason': protection_result['reason']}
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ RSI
            if self.position_side == 'LONG':
                should_close, reason = self.should_close_long(rsi, price)
                if should_close:
                    logger.info(f"[NEW_BOT_{self.symbol}] üî¥ –ó–∞–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é: {reason}")
                    self._close_position_on_exchange(reason)
                    return {'success': True, 'action': 'CLOSE_LONG', 'reason': reason}
            
            elif self.position_side == 'SHORT':
                should_close, reason = self.should_close_short(rsi, price)
                if should_close:
                    logger.info(f"[NEW_BOT_{self.symbol}] üî¥ –ó–∞–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é: {reason}")
                    self._close_position_on_exchange(reason)
                    return {'success': True, 'action': 'CLOSE_SHORT', 'reason': reason}
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
            self._update_protection_mechanisms(price)
            
            logger.debug(f"[NEW_BOT_{self.symbol}] üìä –í –ø–æ–∑–∏—Ü–∏–∏ {self.position_side} (RSI: {rsi:.1f}, –¶–µ–Ω–∞: {price})")
            return {'success': True, 'status': self.status, 'position_side': self.position_side}
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def check_protection_mechanisms(self, current_price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã"""
        try:
            if not self.entry_price or not current_price:
                return {'should_close': False, 'reason': None}
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                stop_loss_percent = auto_config.get('stop_loss_percent', 15.0)
                trailing_activation_percent = auto_config.get('trailing_activation_percent', 300.0)
                trailing_distance_percent = auto_config.get('trailing_distance_percent', 150.0)
                break_even_trigger_percent = auto_config.get('break_even_trigger_percent', 100.0)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            if self.position_side == 'LONG':
                profit_percent = ((current_price - self.entry_price) / self.entry_price) * 100
            else:  # SHORT
                profit_percent = ((self.entry_price - current_price) / self.entry_price) * 100
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if profit_percent <= -stop_loss_percent:
                logger.warning(f"[NEW_BOT_{self.symbol}] üíÄ –°—Ç–æ–ø-–ª–æ—Å—Å! –£–±—ã—Ç–æ–∫: {profit_percent:.2f}%")
                return {'should_close': True, 'reason': f'STOP_LOSS_{profit_percent:.2f}%'}
            
            # 2. –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
            if profit_percent > self.max_profit_achieved:
                self.max_profit_achieved = profit_percent
                logger.debug(f"[NEW_BOT_{self.symbol}] üìà –ù–æ–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%")
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
            if not self.break_even_activated and profit_percent >= break_even_trigger_percent:
                self.break_even_activated = True
                logger.info(f"[NEW_BOT_{self.symbol}] üõ°Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞—â–∏—Ç–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ {profit_percent:.2f}%")
            
            if self.break_even_activated and profit_percent <= 0:
                logger.info(f"[NEW_BOT_{self.symbol}] üõ°Ô∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (–±—ã–ª–æ {self.max_profit_achieved:.2f}%, —Å–µ–π—á–∞—Å {profit_percent:.2f}%)")
                return {'should_close': True, 'reason': f'BREAK_EVEN_MAX_{self.max_profit_achieved:.2f}%'}
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ trailing stop
            if self.max_profit_achieved >= trailing_activation_percent:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º trailing stop —Ü–µ–Ω—É
                if self.position_side == 'LONG':
                    # –î–ª—è LONG trailing stop –Ω–∏–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                    max_price = self.entry_price * (1 + self.max_profit_achieved / 100)
                    trailing_stop = max_price * (1 - trailing_distance_percent / 100)
                    
                    if current_price <= trailing_stop:
                        logger.info(f"[NEW_BOT_{self.symbol}] üöÄ Trailing Stop! –ú–∞–∫—Å: {self.max_profit_achieved:.2f}%, –¢–µ–∫—É—â: {profit_percent:.2f}%")
                        return {'should_close': True, 'reason': f'TRAILING_STOP_MAX_{self.max_profit_achieved:.2f}%'}
                else:  # SHORT
                    # –î–ª—è SHORT trailing stop –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                    min_price = self.entry_price * (1 - self.max_profit_achieved / 100)
                    trailing_stop = min_price * (1 + trailing_distance_percent / 100)
                    
                    if current_price >= trailing_stop:
                        logger.info(f"[NEW_BOT_{self.symbol}] üöÄ Trailing Stop! –ú–∞–∫—Å: {self.max_profit_achieved:.2f}%, –¢–µ–∫—É—â: {profit_percent:.2f}%")
                        return {'should_close': True, 'reason': f'TRAILING_STOP_MAX_{self.max_profit_achieved:.2f}%'}
            
            return {'should_close': False, 'reason': None}
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤: {e}")
            return {'should_close': False, 'reason': None}
    
    def _update_protection_mechanisms(self, current_price):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã"""
        try:
            if not self.entry_price or not current_price:
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å
            if self.position_side == 'LONG':
                profit_percent = ((current_price - self.entry_price) / self.entry_price) * 100
            else:  # SHORT
                profit_percent = ((self.entry_price - current_price) / self.entry_price) * 100
            
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
            if profit_percent > self.max_profit_achieved:
                self.max_profit_achieved = profit_percent
                logger.debug(f"[NEW_BOT_{self.symbol}] üìà –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –±–∏—Ä–∂–µ (–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥)
                self._update_stop_loss_on_exchange(current_price, profit_percent)
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤: {e}")
    
    def _update_stop_loss_on_exchange(self, current_price, profit_percent):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
        
        Args:
            current_price (float): –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            profit_percent (float): –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å –≤ %
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                stop_loss_percent = auto_config.get('stop_loss_percent', 15.0)
                trailing_activation_percent = auto_config.get('trailing_activation_percent', 300.0)
                trailing_distance_percent = auto_config.get('trailing_distance_percent', 150.0)
            
            # –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π trailing stop –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ trailing_activation_percent
            if profit_percent < trailing_activation_percent:
                return  # –ï—â–µ —Ä–∞–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if self.position_side == 'LONG':
                # –î–ª—è LONG: —Å—Ç–æ–ø –Ω–∏–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                max_price = self.entry_price * (1 + self.max_profit_achieved / 100)
                new_stop_loss = max_price * (1 - trailing_distance_percent / 100)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Å—Ç–æ–ø –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ
                current_stop = self.entry_price * (1 - stop_loss_percent / 100)
                if new_stop_loss <= current_stop:
                    return  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Å—Ç–æ–ø –Ω–∏–∂–µ –±–∞–∑–æ–≤–æ–≥–æ
            else:  # SHORT
                # –î–ª—è SHORT: —Å—Ç–æ–ø –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                min_price = self.entry_price * (1 - self.max_profit_achieved / 100)
                new_stop_loss = min_price * (1 + trailing_distance_percent / 100)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Å—Ç–æ–ø –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ
                current_stop = self.entry_price * (1 + stop_loss_percent / 100)
                if new_stop_loss >= current_stop:
                    return  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Å—Ç–æ–ø –≤—ã—à–µ –±–∞–∑–æ–≤–æ–≥–æ
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏—Ä–∂–µ–≤–æ–π —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞) —á–µ—Ä–µ–∑ API —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            if not hasattr(self, '_trailing_stop_activated'):
                self._trailing_stop_activated = False
            
            if not self._trailing_stop_activated:
                try:
                    from bots_modules.imports_and_globals import get_exchange
                    current_exchange = get_exchange()
                    if current_exchange:
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º trailingStop —á–µ—Ä–µ–∑ Bybit API (–æ–¥–∏–Ω —Ä–∞–∑)
                        trailing_result = current_exchange.client.set_trading_stop(
                            category="linear",
                            symbol=f"{self.symbol}USDT",
                            positionIdx=1 if self.position_side == 'LONG' else 2,
                            trailingStop=str(trailing_distance_percent / 100)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å
                        )
                        
                        if trailing_result and trailing_result.get('retCode') == 0:
                            logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –ë–∏—Ä–∂–µ–≤–æ–π trailing stop –ê–ö–¢–ò–í–ò–†–û–í–ê–ù: {trailing_distance_percent}%")
                            self._trailing_stop_activated = True
                        else:
                            logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏—Ä–∂–µ–≤–æ–≥–æ trailing stop: {trailing_result.get('retMsg') if trailing_result else 'Unknown'}")
                except Exception as e:
                    logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ API –±–∏—Ä–∂–µ–≤–æ–≥–æ trailing stop: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –±–∏—Ä–∂–µ (–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥)
            if self.exchange:
                try:
                    result = self.exchange.update_stop_loss(self.symbol, new_stop_loss, self.position_side)
                    if result and result.get('success'):
                        logger.info(f"[NEW_BOT_{self.symbol}] üìà –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π trailing stop –æ–±–Ω–æ–≤–ª–µ–Ω: {new_stop_loss:.6f} (–ø—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%)")
                    else:
                        logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π trailing stop: {result.get('message', 'Unknown error') if result else 'No response'}")
                except Exception as e:
                    logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ trailing stop: {e}")
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ trailing stop: {e}")
    
    def _sync_position_with_exchange(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ —Å –ø–æ–∑–∏—Ü–∏–µ–π –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            if not self.exchange:
                return
            
            exchange_positions = self.exchange.get_positions()
            if isinstance(exchange_positions, tuple):
                positions_list = exchange_positions[0] if exchange_positions else []
            else:
                positions_list = exchange_positions if exchange_positions else []
            
            for pos in positions_list:
                if pos.get('symbol') == self.symbol and abs(float(pos.get('size', 0))) > 0:
                    self.entry_price = float(pos.get('entry_price', 0))
                    self.position_side = pos.get('side', 'UNKNOWN')
                    self.unrealized_pnl = float(pos.get('unrealized_pnl', 0))
                    logger.info(f"[NEW_BOT_{self.symbol}] üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –±–∏—Ä–∂–µ–π: {self.position_side} @ {self.entry_price}")
                    break
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π: {e}")
    
    def enter_position(self, direction):
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
        
        Args:
            direction (str): –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ('LONG' –∏–ª–∏ 'SHORT')
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = self.exchange.get_ticker(self.symbol) if self.exchange else None
            price = ticker['last'] if ticker and 'last' in ticker else 0
            
            logger.info(f"[NEW_BOT_{self.symbol}] üìà –í—Ö–æ–¥–∏–º –≤ {direction} –ø–æ–∑–∏—Ü–∏—é @ {price}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            if self._open_position_on_exchange(direction, price):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                status_key = 'IN_POSITION_LONG' if direction == 'LONG' else 'IN_POSITION_SHORT'
                self.update_status(BOT_STATUS[status_key], price, direction)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                with bots_data_lock:
                    bots_data['bots'][self.symbol] = self.to_dict()
                
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –í—Ö–æ–¥ –≤ {direction} –ø–æ–∑–∏—Ü–∏—é —É—Å–ø–µ—à–µ–Ω")
                return True
            else:
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ {direction} –ø–æ–∑–∏—Ü–∏—é")
                return False
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é: {e}")
            return False
    
    def _open_position_on_exchange(self, side, price):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            if not self.exchange:
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            logger.info(f"[NEW_BOT_{self.symbol}] üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {side} @ {price}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ volume_value –≤ USDT
            qty_in_coins = self.volume_value / price if price > 0 else 0
            
            
            # –ü–æ–ª—É—á–∞–µ–º max_loss_percent –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ Auto Bot –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            auto_bot_config = get_auto_bot_config()
            max_loss_percent = auto_bot_config.get('max_loss_percent', 15.0)
            
            logger.info(f"[NEW_BOT_{self.symbol}] üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –û–†–î–ï–†: symbol={self.symbol}, side={side}, quantity={self.volume_value} USDT (–ë–ï–ó TP/SL)")
            
            # –®–ê–ì 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ë–ï–ó —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            order_result = self.exchange.place_order(
                symbol=self.symbol,
                side=side,
                quantity=self.volume_value,  # ‚ö° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ USDT (–Ω–µ –≤ –º–æ–Ω–µ—Ç–∞—Ö!)
                order_type='market',
                take_profit=None,  # üî¥ –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP
                stop_loss=None,  # üî¥ –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL
                max_loss_percent=None  # üî¥ –ù–ï —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL
            )
            
            if order_result and order_result.get('success'):
                self.order_id = order_result.get('order_id')
                self.entry_timestamp = datetime.now().isoformat()
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –ü–æ–∑–∏—Ü–∏—è {side} –æ—Ç–∫—Ä—ã—Ç–∞: Order ID {self.order_id}")
                
                # –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (entry_price, leverage, quantity) —Å RETRY
                logger.info(f"[NEW_BOT_{self.symbol}] ‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ TP/SL...")
                
                actual_entry_price = None
                actual_leverage = None
                actual_qty = None
                
                # RETRY: 3 –ø–æ–ø—ã—Ç–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 0.5—Å, 1—Å, 2—Å (–æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç ~3.5—Å)
                max_attempts = 3
                retry_delays = [0.5, 1.0, 2.0]
                
                for attempt in range(max_attempts):
                    try:
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                        time.sleep(retry_delays[attempt])
                        
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –±–∏—Ä–∂–∏
                        position_data = self.exchange.get_positions()
                        
                        if isinstance(position_data, tuple):
                            positions_list = position_data[0] if position_data else []
                        else:
                            positions_list = position_data if position_data else []
                        
                        # –ò—â–µ–º –Ω–∞—à—É –ø–æ–∑–∏—Ü–∏—é
                        for pos in positions_list:
                            if pos.get('symbol') == self.symbol and abs(float(pos.get('size', 0))) > 0:
                                actual_entry_price = float(pos.get('entry_price', 0))
                                actual_leverage = float(pos.get('leverage', 10.0))
                                actual_qty = float(pos.get('size', 0))
                                logger.info(f"[NEW_BOT_{self.symbol}] üìä –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}: entry={actual_entry_price}, leverage={actual_leverage}x, qty={actual_qty}")
                                
                                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                                if actual_entry_price and actual_entry_price > 0:
                                    logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                                    break
                        
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤–∞–ª–∏–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é - –≤—ã—Ö–æ–¥–∏–º –∏–∑ retry-—Ü–∏–∫–ª–∞
                        if actual_entry_price and actual_entry_price > 0:
                            break
                        else:
                            logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    
                    except Exception as retry_error:
                        logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}: –æ—à–∏–±–∫–∞ {retry_error}")
                        if attempt == max_attempts - 1:
                            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
                
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                if not actual_entry_price or actual_entry_price == 0:
                    logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: —Ü–µ–Ω–∞={price}, –ø–ª–µ—á–æ=10x")
                    actual_entry_price = price
                    actual_leverage = 10.0  # –î–µ—Ñ–æ–ª—Ç
                
                if not actual_leverage:
                    actual_leverage = 10.0  # –î–µ—Ñ–æ–ª—Ç
                
                # –®–ê–ì 3: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Stop Loss —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ—á–∞
                stop_loss_price = None
                sl_percent_from_config = max_loss_percent
                
                if max_loss_percent:
                    # ü§ñ –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ SL
                    try:
                        if AI_RISK_MANAGER_AVAILABLE and DynamicRiskManager:
                            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
                            chart_response = self.exchange.get_chart_data(self.symbol, '6h', limit=50)
                            candles_for_ai = []
                            
                            if chart_response and chart_response.get('success'):
                                candles_data = chart_response.get('data', {}).get('candles', [])
                                if candles_data and len(candles_data) >= 20:
                                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è AI
                                    for c in candles_data[-30:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–≤–µ—á–µ–π
                                        candles_for_ai.append({
                                            'open': float(c.get('open', 0)),
                                            'high': float(c.get('high', 0)),
                                            'low': float(c.get('low', 0)),
                                            'close': float(c.get('close', 0)),
                                            'volume': float(c.get('volume', 0))
                                        })
                                    
                                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Risk Manager
                                    risk_manager = DynamicRiskManager()
                                    ai_sl_result = risk_manager.calculate_dynamic_sl(
                                        self.symbol, candles_for_ai, side
                                    )
                                    
                                    # –ë–µ—Ä–µ–º AI –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SL
                                    sl_percent_from_config = ai_sl_result['sl_percent']
                                    logger.info(f"[NEW_BOT_{self.symbol}] ü§ñ AI –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª SL: {max_loss_percent}% ‚Üí {sl_percent_from_config}% ({ai_sl_result['reason']})")
                    except Exception as ai_error:
                        logger.debug(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è AI SL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ai_error}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    position_value = abs(actual_qty) * actual_entry_price if actual_qty else (self.volume_value)
                    margin = position_value / actual_leverage
                    max_loss_usdt = margin * (sl_percent_from_config / 100)
                    loss_per_coin = max_loss_usdt / abs(actual_qty) if actual_qty and abs(actual_qty) > 0 else (max_loss_usdt / (self.volume_value / actual_entry_price))
                    
                    if side == 'LONG':
                        stop_loss_price = actual_entry_price - loss_per_coin
                    else:
                        stop_loss_price = actual_entry_price + loss_per_coin
                    
                    logger.info(f"[NEW_BOT_{self.symbol}] üõë SL —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {stop_loss_price:.6f} (entry={actual_entry_price}, leverage={actual_leverage}x, —É–±—ã—Ç–æ–∫ {max_loss_usdt:.4f} USDT = {sl_percent_from_config}%)")
                
                # –®–ê–ì 4: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Take Profit –æ—Ç –º–∞—Ä–∂–∏
                take_profit_price = None
                tp_percent_from_config = None
                
                # ü§ñ –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ TP
                try:
                    if AI_RISK_MANAGER_AVAILABLE and DynamicRiskManager:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
                        chart_response = self.exchange.get_chart_data(self.symbol, '6h', limit=50)
                        candles_for_ai = []
                        
                        if chart_response and chart_response.get('success'):
                            candles_data = chart_response.get('data', {}).get('candles', [])
                            if candles_data and len(candles_data) >= 20:
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è AI
                                for c in candles_data[-30:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–≤–µ—á–µ–π
                                    candles_for_ai.append({
                                        'open': float(c.get('open', 0)),
                                        'high': float(c.get('high', 0)),
                                        'low': float(c.get('low', 0)),
                                        'close': float(c.get('close', 0)),
                                        'volume': float(c.get('volume', 0))
                                    })
                                
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Risk Manager –¥–ª—è TP
                                risk_manager = DynamicRiskManager()
                                ai_tp_result = risk_manager.calculate_dynamic_tp(
                                    self.symbol, candles_for_ai, side
                                )
                                
                                # –ë–µ—Ä–µ–º AI –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TP –ø—Ä–æ—Ü–µ–Ω—Ç
                                tp_percent_from_config = ai_tp_result['tp_percent']
                                logger.info(f"[NEW_BOT_{self.symbol}] ü§ñ AI –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª TP: ‚Üí {tp_percent_from_config}% ({ai_tp_result['reason']})")
                except Exception as ai_error:
                    logger.debug(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è AI TP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ai_error}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP –æ—Ç –º–∞—Ä–∂–∏
                if tp_percent_from_config:
                    take_profit_price = self.calculate_dynamic_take_profit(side, actual_entry_price, actual_leverage, actual_qty, tp_percent_from_config)
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                    auto_bot_config = get_auto_bot_config()
                    default_tp_percent = auto_bot_config.get('take_profit_percent', 100.0)
                    take_profit_price = self.calculate_dynamic_take_profit(side, actual_entry_price, actual_leverage, actual_qty, default_tp_percent)
                
                if take_profit_price:
                    logger.info(f"[NEW_BOT_{self.symbol}] üéØ TP —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –æ—Ç –º–∞—Ä–∂–∏: {actual_entry_price:.6f} ‚Üí {take_profit_price:.6f}")
                
                # –®–ê–ì 5: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Stop Loss –∏ Take Profit –Ω–∞ –±–∏—Ä–∂–µ
                if stop_loss_price and stop_loss_price > 0:
                    sl_result = self.exchange.update_stop_loss(self.symbol, stop_loss_price, side)
                    if sl_result and sl_result.get('success'):
                        logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ Stop Loss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stop_loss_price:.6f}")
                    else:
                        logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL: {sl_result.get('message') if sl_result else 'Unknown'}")
                
                if take_profit_price and take_profit_price > 0:
                    tp_result = self.exchange.update_take_profit(self.symbol, take_profit_price, side)
                    if tp_result and tp_result.get('success'):
                        logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ Take Profit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {take_profit_price:.6f}")
                    else:
                        logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP: {tp_result.get('message') if tp_result else 'Unknown'}")
                
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ —Å TP/SL")
                return True
            else:
                error = order_result.get('error', 'Unknown error') if order_result else 'No response'
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {error}")
                return False
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
    
    def _close_position_on_exchange(self, reason):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            if not self.exchange:
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            logger.info(f"[NEW_BOT_{self.symbol}] üî¥ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {self.position_side} (–ø—Ä–∏—á–∏–Ω–∞: {reason})")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ
            close_result = self.exchange.close_position(
                symbol=self.symbol,
                side=self.position_side
            )
            
            if close_result and close_result.get('success'):
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
                self.update_status(BOT_STATUS['IDLE'])
                return True
            else:
                error = close_result.get('error', 'Unknown error') if close_result else 'No response'
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {error}")
                return False
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
    
    def emergency_close_delisting(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –¥–µ–ª–∏—Å—Ç–∏–Ω–≥–µ - —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º –ø–æ –ª—é–±–æ–π —Ü–µ–Ω–µ"""
        try:
            if not self.exchange:
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è")
                return False
            
            if self.status not in [BOT_STATUS['IN_POSITION_LONG'], BOT_STATUS['IN_POSITION_SHORT']]:
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –ë–æ—Ç –Ω–µ –≤ –ø–æ–∑–∏—Ü–∏–∏, —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return True
            
            logger.warning(f"[NEW_BOT_{self.symbol}] üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï: –î–ï–õ–ò–°–¢–ò–ù–ì –û–ë–ù–ê–†–£–ñ–ï–ù! –ó–∞–∫—Ä—ã–≤–∞–µ–º {self.position_side} —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏–∏)
            close_side = 'Sell' if self.position_side == 'Long' else 'Buy'
            
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
            emergency_result = self.exchange.close_position(
                symbol=self.symbol,
                side=self.position_side,
                order_type='Market',  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                emergency=True  # –§–ª–∞–≥ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            )
            
            if emergency_result and emergency_result.get('success'):
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚úÖ –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –£–°–ü–ï–®–ù–û: –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º")
                self.update_status(BOT_STATUS['IDLE'])
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                self.position_side = None
                self.entry_price = None
                self.unrealized_pnl = 0.0
                self.max_profit_achieved = 0.0
                self.trailing_stop_price = None
                self.break_even_activated = False
                
                return True
            else:
                error = emergency_result.get('error', 'Unknown error') if emergency_result else 'No response'
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ù–ï–£–î–ê–ß–ù–û: {error}")
                return False
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ó–ê–ö–†–´–¢–ò–Ø: {e}")
            return False
    
    def calculate_dynamic_take_profit(self, side, actual_entry_price, actual_leverage, actual_qty, tp_percent=None):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Take Profit –æ—Ç –º–∞—Ä–∂–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
        
        Args:
            side (str): –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ('LONG' –∏–ª–∏ 'SHORT')
            actual_entry_price (float): –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
            actual_leverage (float): –†–µ–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ
            actual_qty (float): –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            tp_percent (float, optional): TP –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞—Ä–∂–∏. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
            
        Returns:
            float: –¶–µ–Ω–∞ Take Profit
        """
        try:
            # –ï—Å–ª–∏ tp_percent –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100%)
            if tp_percent is None:
                auto_bot_config = get_auto_bot_config()
                tp_percent = auto_bot_config.get('take_profit_percent', 100.0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂—É –∏ –ø—Ä–∏–±—ã–ª—å
            position_value = abs(actual_qty) * actual_entry_price if actual_qty else self.volume_value
            margin = position_value / actual_leverage
            target_profit_usdt = margin * (tp_percent / 100)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –Ω–∞ –º–æ–Ω–µ—Ç—É
            profit_per_coin = target_profit_usdt / abs(actual_qty) if actual_qty and abs(actual_qty) > 0 else (target_profit_usdt / (self.volume_value / actual_entry_price))
            
            logger.info(f"[NEW_BOT_{self.symbol}] üéØ TP CALC: side={side}, entry={actual_entry_price}, leverage={actual_leverage}x, margin={margin:.4f} USDT, target_profit={target_profit_usdt:.4f} USDT (+{tp_percent}%)")
            
            if side == 'LONG':
                # –î–ª—è LONG: TP –≤—ã—à–µ
                tp_price = actual_entry_price + profit_per_coin
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ TP –¥–ª—è LONG: {actual_entry_price:.6f} ‚Üí {tp_price:.6f} (+{tp_percent}% –æ—Ç –º–∞—Ä–∂–∏)")
                return tp_price
                
            elif side == 'SHORT':
                # –î–ª—è SHORT: TP –Ω–∏–∂–µ
                tp_price = actual_entry_price - profit_per_coin
                logger.info(f"[NEW_BOT_{self.symbol}] üìâ TP –¥–ª—è SHORT: {actual_entry_price:.6f} ‚Üí {tp_price:.6f} (+{tp_percent}% –æ—Ç –º–∞—Ä–∂–∏)")
                return tp_price
            
            return None
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ TP: {e}")
            return None
    
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–æ—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            'symbol': self.symbol,
            'status': self.status,
            'entry_price': self.entry_price,
            'position_side': self.position_side,
            'unrealized_pnl': self.unrealized_pnl,
            'created_at': self.created_at,
            'last_signal_time': self.last_signal_time,
            'max_profit_achieved': self.max_profit_achieved,
            'trailing_stop_price': self.trailing_stop_price,
            'break_even_activated': self.break_even_activated,
            'position_start_time': self.position_start_time.isoformat() if self.position_start_time else None,
            'order_id': self.order_id,
            'entry_timestamp': self.entry_timestamp,
            'opened_by_autobot': self.opened_by_autobot
        }

