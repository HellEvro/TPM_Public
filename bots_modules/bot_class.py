"""–ö–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ NewTradingBot

–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (RSI time filter, trend, maturity)
- –ó–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ (trailing stop, break-even)
"""

import logging
from datetime import datetime
import time
import threading

logger = logging.getLogger('BotsService')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
bots_data_lock = threading.Lock()
bots_data = {}
rsi_data_lock = threading.Lock()
coins_rsi_data = {}
BOT_STATUS = {
    'IDLE': 'idle',
    'RUNNING': 'running',
    'IN_POSITION_LONG': 'in_position_long',
    'IN_POSITION_SHORT': 'in_position_short',
    'PAUSED': 'paused'
}

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞)
try:
    from bots_modules.filters import check_rsi_time_filter
except:
    def check_rsi_time_filter(*args, **kwargs):
        return {'allowed': True, 'reason': 'Filter not loaded'}

class NewTradingBot:
    """–ù–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    
    def __init__(self, symbol, config=None, exchange=None):
        self.symbol = symbol
        self.config = config or {}
        self.exchange = exchange
        
        logger.info(f"[NEW_BOT_{symbol}] ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.volume_mode = self.config.get('volume_mode', 'usdt')
        self.volume_value = self.config.get('volume_value', 10.0)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.status = self.config.get('status', BOT_STATUS['IDLE'])
        self.entry_price = self.config.get('entry_price', None)
        self.position_side = self.config.get('position_side', None)
        self.unrealized_pnl = self.config.get('unrealized_pnl', 0.0)
        self.created_at = self.config.get('created_at', datetime.now().isoformat())
        self.last_signal_time = self.config.get('last_signal_time', None)
        
        # –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
        self.max_profit_achieved = self.config.get('max_profit_achieved', 0.0)
        self.trailing_stop_price = self.config.get('trailing_stop_price', None)
        self.break_even_activated = bool(self.config.get('break_even_activated', False))
        
        # –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
        position_start_str = self.config.get('position_start_time', None)
        if position_start_str:
            try:
                self.position_start_time = datetime.fromisoformat(position_start_str)
            except:
                self.position_start_time = None
        else:
            self.position_start_time = None
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        self.order_id = self.config.get('order_id', None)
        self.entry_timestamp = self.config.get('entry_timestamp', None)
        self.opened_by_autobot = self.config.get('opened_by_autobot', False)
        
        logger.info(f"[NEW_BOT_{symbol}] ‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å—Ç–∞—Ç—É—Å: {self.status})")
        
    def update_status(self, new_status, entry_price=None, position_side=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        old_status = self.status
        self.status = new_status
        
        if entry_price is not None:
            self.entry_price = entry_price
        if position_side is not None:
            self.position_side = position_side
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—é
        if new_status in [BOT_STATUS['IN_POSITION_LONG'], BOT_STATUS['IN_POSITION_SHORT']]:
            self.position_start_time = datetime.now()
            self.max_profit_achieved = 0.0
            self.trailing_stop_price = None
            self.break_even_activated = False
            
        logger.info(f"[NEW_BOT_{self.symbol}] üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {old_status} ‚Üí {new_status}")
    
    def should_open_long(self, rsi, trend, candles):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                rsi_long_threshold = auto_config.get('rsi_long_threshold', 29)
                avoid_down_trend = auto_config.get('avoid_down_trend', True)
                rsi_time_filter_enabled = auto_config.get('rsi_time_filter_enabled', True)
                rsi_time_filter_candles = auto_config.get('rsi_time_filter_candles', 8)
                rsi_time_filter_lower = auto_config.get('rsi_time_filter_lower', 35)
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ RSI
            if rsi > rsi_long_threshold:
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚ùå RSI {rsi:.1f} > {rsi_long_threshold} - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG")
                return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
            if avoid_down_trend and trend == 'DOWN':
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚ùå DOWN —Ç—Ä–µ–Ω–¥ - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG")
                return False
            
            # 3. RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
            if rsi_time_filter_enabled:
                time_filter_result = self.check_rsi_time_filter_for_long(candles, rsi, rsi_time_filter_candles, rsi_time_filter_lower)
                if not time_filter_result['allowed']:
                    logger.info(f"[NEW_BOT_{self.symbol}] ‚ùå RSI Time Filter –±–ª–æ–∫–∏—Ä—É–µ—Ç LONG: {time_filter_result['reason']}")
                    return False
            
            logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG (RSI: {rsi:.1f}, Trend: {trend})")
            return True
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LONG: {e}")
            return False
    
    def should_open_short(self, rsi, trend, candles):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                rsi_short_threshold = auto_config.get('rsi_short_threshold', 71)
                avoid_up_trend = auto_config.get('avoid_up_trend', True)
                rsi_time_filter_enabled = auto_config.get('rsi_time_filter_enabled', True)
                rsi_time_filter_candles = auto_config.get('rsi_time_filter_candles', 8)
                rsi_time_filter_upper = auto_config.get('rsi_time_filter_upper', 65)
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ RSI
            if rsi < rsi_short_threshold:
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚ùå RSI {rsi:.1f} < {rsi_short_threshold} - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT")
                return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
            if avoid_up_trend and trend == 'UP':
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚ùå UP —Ç—Ä–µ–Ω–¥ - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT")
                return False
            
            # 3. RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
            if rsi_time_filter_enabled:
                time_filter_result = self.check_rsi_time_filter_for_short(candles, rsi, rsi_time_filter_candles, rsi_time_filter_upper)
                if not time_filter_result['allowed']:
                    logger.info(f"[NEW_BOT_{self.symbol}] ‚ùå RSI Time Filter –±–ª–æ–∫–∏—Ä—É–µ—Ç SHORT: {time_filter_result['reason']}")
                    return False
            
            logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT (RSI: {rsi:.1f}, Trend: {trend})")
            return True
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SHORT: {e}")
            return False
    
    def check_rsi_time_filter_for_long(self, candles, rsi, filter_candles, filter_lower):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è LONG (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            return check_rsi_time_filter(candles, rsi, 'ENTER_LONG')
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ RSI Time Filter –¥–ª—è LONG: {e}")
            return {'allowed': False, 'reason': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}
    
    def check_rsi_time_filter_for_short(self, candles, rsi, filter_candles, filter_upper):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è SHORT (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            return check_rsi_time_filter(candles, rsi, 'ENTER_SHORT')
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ RSI Time Filter –¥–ª—è SHORT: {e}")
            return {'allowed': False, 'reason': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}
    
    def should_close_long(self, rsi, current_price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é"""
        try:
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                rsi_long_exit = auto_config.get('rsi_long_exit', 65)
            
            if rsi >= rsi_long_exit:
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º LONG: RSI {rsi:.1f} >= {rsi_long_exit}")
                return True, 'RSI_EXIT'
            
            return False, None
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è LONG: {e}")
            return False, None
    
    def should_close_short(self, rsi, current_price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—é"""
        try:
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                rsi_short_exit = auto_config.get('rsi_short_exit', 35)
            
            if rsi <= rsi_short_exit:
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º SHORT: RSI {rsi:.1f} <= {rsi_short_exit}")
                return True, 'RSI_EXIT'
            
            return False, None
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è SHORT: {e}")
            return False, None
    
    def update(self, force_analysis=False, external_signal=None, external_trend=None):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        try:
            if not self.exchange:
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return {'success': False, 'error': 'Exchange not initialized'}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            current_price = None
            current_rsi = None
            current_trend = external_trend
            
            # –ü–æ–ª—É—á–∞–µ–º RSI –¥–∞–Ω–Ω—ã–µ
            with rsi_data_lock:
                coin_data = coins_rsi_data['coins'].get(self.symbol)
                if coin_data:
                    current_rsi = coin_data.get('rsi6h')
                    current_price = coin_data.get('price')
                    if not current_trend:
                        current_trend = coin_data.get('trend6h', 'NEUTRAL')
            
            if current_rsi is None or current_price is None:
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ—Ç RSI –¥–∞–Ω–Ω—ã—Ö")
                return {'success': False, 'error': 'No RSI data'}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            chart_response = self.exchange.get_chart_data(self.symbol, '6h', '30d')
            if not chart_response or not chart_response.get('success'):
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏")
                return {'success': False, 'error': 'No candles data'}
            
            candles = chart_response.get('data', {}).get('candles', [])
            if not candles:
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ—Ç —Å–≤–µ—á–µ–π")
                return {'success': False, 'error': 'Empty candles'}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if self.status == BOT_STATUS['IDLE']:
                return self._handle_idle_state(current_rsi, current_trend, candles, current_price)
            elif self.status in [BOT_STATUS['IN_POSITION_LONG'], BOT_STATUS['IN_POSITION_SHORT']]:
                return self._handle_position_state(current_rsi, current_trend, candles, current_price)
            else:
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚è≥ –°—Ç–∞—Ç—É—Å {self.status} - –∂–¥–µ–º")
                return {'success': True, 'status': self.status}
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {'success': False, 'error': str(e)}
    
    def _handle_idle_state(self, rsi, trend, candles, price):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE (–æ–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–±–æ—Ç
            with bots_data_lock:
                auto_bot_enabled = bots_data['auto_bot_config']['enabled']
            
            if not auto_bot_enabled:
                logger.debug(f"[NEW_BOT_{self.symbol}] ‚èπÔ∏è –ê–≤—Ç–æ–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")
                return {'success': True, 'status': self.status}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è LONG
            if self.should_open_long(rsi, trend, candles):
                logger.info(f"[NEW_BOT_{self.symbol}] üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é (RSI: {rsi:.1f})")
                if self._open_position_on_exchange('LONG', price):
                    self.update_status(BOT_STATUS['IN_POSITION_LONG'], price, 'LONG')
                    return {'success': True, 'action': 'OPEN_LONG', 'status': self.status}
            else:
                    logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é")
                    return {'success': False, 'error': 'Failed to open LONG position'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT
            if self.should_open_short(rsi, trend, candles):
                logger.info(f"[NEW_BOT_{self.symbol}] üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é (RSI: {rsi:.1f})")
                if self._open_position_on_exchange('SHORT', price):
                    self.update_status(BOT_STATUS['IN_POSITION_SHORT'], price, 'SHORT')
                    return {'success': True, 'action': 'OPEN_SHORT', 'status': self.status}
                else:
                    logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—é")
                    return {'success': False, 'error': 'Failed to open SHORT position'}
            
            logger.debug(f"[NEW_BOT_{self.symbol}] ‚è≥ –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª (RSI: {rsi:.1f}, Trend: {trend})")
            return {'success': True, 'status': self.status}
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –≤ idle —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def _handle_position_state(self, rsi, trend, candles, price):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.entry_price:
                logger.warning(f"[NEW_BOT_{self.symbol}] ‚ö†Ô∏è –ù–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –±–∏—Ä–∂–∏")
                self._sync_position_with_exchange()
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
            protection_result = self.check_protection_mechanisms(price)
            if protection_result['should_close']:
                logger.info(f"[NEW_BOT_{self.symbol}] üõ°Ô∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é: {protection_result['reason']}")
                self._close_position_on_exchange(protection_result['reason'])
                return {'success': True, 'action': f"CLOSE_{self.position_side}", 'reason': protection_result['reason']}
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ RSI
            if self.position_side == 'LONG':
                should_close, reason = self.should_close_long(rsi, price)
                if should_close:
                    logger.info(f"[NEW_BOT_{self.symbol}] üî¥ –ó–∞–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é: {reason}")
                    self._close_position_on_exchange(reason)
                    return {'success': True, 'action': 'CLOSE_LONG', 'reason': reason}
            
            elif self.position_side == 'SHORT':
                should_close, reason = self.should_close_short(rsi, price)
                if should_close:
                    logger.info(f"[NEW_BOT_{self.symbol}] üî¥ –ó–∞–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é: {reason}")
                    self._close_position_on_exchange(reason)
                    return {'success': True, 'action': 'CLOSE_SHORT', 'reason': reason}
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
            self._update_protection_mechanisms(price)
            
            logger.debug(f"[NEW_BOT_{self.symbol}] üìä –í –ø–æ–∑–∏—Ü–∏–∏ {self.position_side} (RSI: {rsi:.1f}, –¶–µ–Ω–∞: {price})")
            return {'success': True, 'status': self.status, 'position_side': self.position_side}
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def check_protection_mechanisms(self, current_price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã"""
        try:
            if not self.entry_price or not current_price:
                return {'should_close': False, 'reason': None}
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            with bots_data_lock:
                auto_config = bots_data.get('auto_bot_config', {})
                stop_loss_percent = auto_config.get('stop_loss_percent', 15.0)
                trailing_activation_percent = auto_config.get('trailing_activation_percent', 300.0)
                trailing_distance_percent = auto_config.get('trailing_distance_percent', 150.0)
                break_even_trigger_percent = auto_config.get('break_even_trigger_percent', 100.0)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            if self.position_side == 'LONG':
                profit_percent = ((current_price - self.entry_price) / self.entry_price) * 100
            else:  # SHORT
                profit_percent = ((self.entry_price - current_price) / self.entry_price) * 100
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if profit_percent <= -stop_loss_percent:
                logger.warning(f"[NEW_BOT_{self.symbol}] üíÄ –°—Ç–æ–ø-–ª–æ—Å—Å! –£–±—ã—Ç–æ–∫: {profit_percent:.2f}%")
                return {'should_close': True, 'reason': f'STOP_LOSS_{profit_percent:.2f}%'}
            
            # 2. –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
            if profit_percent > self.max_profit_achieved:
                self.max_profit_achieved = profit_percent
                logger.debug(f"[NEW_BOT_{self.symbol}] üìà –ù–æ–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%")
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
            if not self.break_even_activated and profit_percent >= break_even_trigger_percent:
                self.break_even_activated = True
                logger.info(f"[NEW_BOT_{self.symbol}] üõ°Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞—â–∏—Ç–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ {profit_percent:.2f}%")
            
            if self.break_even_activated and profit_percent <= 0:
                logger.info(f"[NEW_BOT_{self.symbol}] üõ°Ô∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (–±—ã–ª–æ {self.max_profit_achieved:.2f}%, —Å–µ–π—á–∞—Å {profit_percent:.2f}%)")
                return {'should_close': True, 'reason': f'BREAK_EVEN_MAX_{self.max_profit_achieved:.2f}%'}
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ trailing stop
            if self.max_profit_achieved >= trailing_activation_percent:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º trailing stop —Ü–µ–Ω—É
                if self.position_side == 'LONG':
                    # –î–ª—è LONG trailing stop –Ω–∏–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                    max_price = self.entry_price * (1 + self.max_profit_achieved / 100)
                    trailing_stop = max_price * (1 - trailing_distance_percent / 100)
                    
                    if current_price <= trailing_stop:
                        logger.info(f"[NEW_BOT_{self.symbol}] üöÄ Trailing Stop! –ú–∞–∫—Å: {self.max_profit_achieved:.2f}%, –¢–µ–∫—É—â: {profit_percent:.2f}%")
                        return {'should_close': True, 'reason': f'TRAILING_STOP_MAX_{self.max_profit_achieved:.2f}%'}
                else:  # SHORT
                    # –î–ª—è SHORT trailing stop –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                    min_price = self.entry_price * (1 - self.max_profit_achieved / 100)
                    trailing_stop = min_price * (1 + trailing_distance_percent / 100)
                    
                    if current_price >= trailing_stop:
                        logger.info(f"[NEW_BOT_{self.symbol}] üöÄ Trailing Stop! –ú–∞–∫—Å: {self.max_profit_achieved:.2f}%, –¢–µ–∫—É—â: {profit_percent:.2f}%")
                        return {'should_close': True, 'reason': f'TRAILING_STOP_MAX_{self.max_profit_achieved:.2f}%'}
            
            return {'should_close': False, 'reason': None}
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤: {e}")
            return {'should_close': False, 'reason': None}
    
    def _update_protection_mechanisms(self, current_price):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã"""
        try:
            if not self.entry_price or not current_price:
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å
            if self.position_side == 'LONG':
                profit_percent = ((current_price - self.entry_price) / self.entry_price) * 100
            else:  # SHORT
                profit_percent = ((self.entry_price - current_price) / self.entry_price) * 100
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
            if profit_percent > self.max_profit_achieved:
                self.max_profit_achieved = profit_percent
                logger.debug(f"[NEW_BOT_{self.symbol}] üìà –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%")
            
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤: {e}")
    
    def _sync_position_with_exchange(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ —Å –ø–æ–∑–∏—Ü–∏–µ–π –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            if not self.exchange:
                return
            
            exchange_positions = self.exchange.get_positions()
            if isinstance(exchange_positions, tuple):
                positions_list = exchange_positions[0] if exchange_positions else []
            else:
                positions_list = exchange_positions if exchange_positions else []
            
            for pos in positions_list:
                if pos.get('symbol') == self.symbol and abs(float(pos.get('size', 0))) > 0:
                    self.entry_price = float(pos.get('entry_price', 0))
                    self.position_side = pos.get('side', 'UNKNOWN')
                    self.unrealized_pnl = float(pos.get('unrealized_pnl', 0))
                    logger.info(f"[NEW_BOT_{self.symbol}] üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –±–∏—Ä–∂–µ–π: {self.position_side} @ {self.entry_price}")
                    break
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π: {e}")
    
    def _open_position_on_exchange(self, side, price):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            if not self.exchange:
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            logger.info(f"[NEW_BOT_{self.symbol}] üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {side} @ {price}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ
            order_result = self.exchange.place_market_order(
                symbol=self.symbol,
                side=side,
                qty=None,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ volume_value
                qty_in_usdt=self.volume_value
            )
            
            if order_result and order_result.get('success'):
                self.order_id = order_result.get('order_id')
                self.entry_timestamp = datetime.now().isoformat()
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –ü–æ–∑–∏—Ü–∏—è {side} –æ—Ç–∫—Ä—ã—Ç–∞: Order ID {self.order_id}")
                return True
            else:
                error = order_result.get('error', 'Unknown error') if order_result else 'No response'
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {error}")
                return False
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
    
    def _close_position_on_exchange(self, reason):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            if not self.exchange:
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            logger.info(f"[NEW_BOT_{self.symbol}] üî¥ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {self.position_side} (–ø—Ä–∏—á–∏–Ω–∞: {reason})")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ
            close_result = self.exchange.close_position(
                symbol=self.symbol,
                side=self.position_side
            )
            
            if close_result and close_result.get('success'):
                logger.info(f"[NEW_BOT_{self.symbol}] ‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
                self.update_status(BOT_STATUS['IDLE'])
                return True
            else:
                error = close_result.get('error', 'Unknown error') if close_result else 'No response'
                logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {error}")
                return False
                
        except Exception as e:
            logger.error(f"[NEW_BOT_{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
            
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–æ—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            'symbol': self.symbol,
            'status': self.status,
            'entry_price': self.entry_price,
            'position_side': self.position_side,
            'unrealized_pnl': self.unrealized_pnl,
            'created_at': self.created_at,
            'last_signal_time': self.last_signal_time,
            'max_profit_achieved': self.max_profit_achieved,
            'trailing_stop_price': self.trailing_stop_price,
            'break_even_activated': self.break_even_activated,
            'position_start_time': self.position_start_time.isoformat() if self.position_start_time else None,
            'order_id': self.order_id,
            'entry_timestamp': self.entry_timestamp,
            'opened_by_autobot': self.opened_by_autobot
        }

