"""
–ú–æ–¥—É–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ bot_config.py
"""
import re
import os
import logging
from typing import Dict, Any

logger = logging.getLogger('ConfigWriter')

def save_auto_bot_config_to_py(config: Dict[str, Any]) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç DEFAULT_AUTO_BOT_CONFIG –≤ bot_config.py
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª bot_config.py
    2. –ù–∞—Ö–æ–¥–∏—Ç –±–ª–æ–∫ DEFAULT_AUTO_BOT_CONFIG = {...}
    3. –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    4. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    
    Args:
        config: –°–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        config_file = 'bot_engine/bot_config.py'
        
        if not os.path.exists(config_file):
            logger.error(f"[CONFIG_WRITER] ‚ùå –§–∞–π–ª {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(config_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ DEFAULT_AUTO_BOT_CONFIG
        start_idx = None
        end_idx = None
        in_config_block = False
        brace_count = 0
        
        for i, line in enumerate(lines):
            if 'DEFAULT_AUTO_BOT_CONFIG' in line and '=' in line and '{' in line:
                start_idx = i
                in_config_block = True
                brace_count = line.count('{') - line.count('}')
                continue
            
            if in_config_block:
                brace_count += line.count('{') - line.count('}')
                if brace_count == 0:
                    end_idx = i
                    break
        
        if start_idx is None or end_idx is None:
            logger.error(f"[CONFIG_WRITER] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ DEFAULT_AUTO_BOT_CONFIG")
            return False
        
        logger.info(f"[CONFIG_WRITER] üìù –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: —Å—Ç—Ä–æ–∫–∏ {start_idx+1}-{end_idx+1}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        updated_lines = lines[:start_idx + 1]  # –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –±–ª–æ–∫–∞ + —Å—Ç—Ä–æ–∫–∞ —Å DEFAULT_AUTO_BOT_CONFIG
        
        for i in range(start_idx + 1, end_idx + 1):
            line = lines[i]
            updated_line = line
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª—é—á–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            # –§–æ—Ä–º–∞—Ç: '    'key': value,  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' –∏–ª–∏ '    'key': value,'
            match = re.match(r"^(\s*)'([^']+)':\s*([^,#]+)(,?)(.*)$", line)
            
            if match:
                indent = match.group(1)
                key = match.group(2)
                old_value = match.group(3).strip()
                comma = match.group(4)
                comment = match.group(5)
                
                # –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–ª—é—á –µ—Å—Ç—å –≤ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                if key in config:
                    new_value = config[key]
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Python-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                    if isinstance(new_value, bool):
                        new_value_str = str(new_value)
                    elif isinstance(new_value, str):
                        new_value_str = f"'{new_value}'"
                    elif isinstance(new_value, (int, float)):
                        new_value_str = str(new_value)
                    elif isinstance(new_value, list):
                        new_value_str = str(new_value)
                    else:
                        new_value_str = str(new_value)
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    updated_line = f"{indent}'{key}': {new_value_str}{comma}{comment}\n"
                    logger.debug(f"[CONFIG_WRITER] ‚úèÔ∏è {key}: {old_value} ‚Üí {new_value_str}")
            
            updated_lines.append(updated_line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        updated_lines.extend(lines[end_idx + 1:])
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open(config_file, 'w', encoding='utf-8') as f:
            f.writelines(updated_lines)
        
        logger.info(f"[CONFIG_WRITER] ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_file}")
        return True
        
    except Exception as e:
        logger.error(f"[CONFIG_WRITER] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

