"""–ò–º–ø–æ—Ä—Ç—ã, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è bots.py"""

import os
import sys
import signal
import threading
import time
import logging
import json
import atexit
import asyncio
import requests
import socket
import psutil
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS
import concurrent.futures

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
try:
    from bot_engine.async_processor import AsyncMainProcessor
    ASYNC_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    ASYNC_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ bot_engine
try:
    from bot_engine.utils.rsi_utils import calculate_rsi, calculate_rsi_history
    from bot_engine.utils.ema_utils import calculate_ema
    from bot_engine.filters import check_rsi_time_filter, check_exit_scam_filter, check_no_existing_position
    from bot_engine.maturity_checker import (
        check_coin_maturity, check_coin_maturity_with_storage,
        check_coin_maturity_stored_or_verify, is_coin_mature_stored,
        add_mature_coin_to_storage, remove_mature_coin_from_storage,
        update_mature_coin_verification, get_mature_coins_storage,
        set_mature_coins_storage, clear_mature_coins_storage as clear_mature_storage,
        mature_coins_storage, mature_coins_lock
    )
    from bot_engine.storage import (
        save_rsi_cache as storage_save_rsi_cache,
        load_rsi_cache as storage_load_rsi_cache,
        clear_rsi_cache,
        save_bots_state as storage_save_bots_state,
        load_bots_state as storage_load_bots_state,
        save_auto_bot_config as storage_save_auto_bot_config,
        load_auto_bot_config as storage_load_auto_bot_config,
        save_mature_coins, load_mature_coins,
        save_optimal_ema, load_optimal_ema,
        save_process_state as storage_save_process_state,
        load_process_state as storage_load_process_state,
        save_system_config as storage_save_system_config,
        load_system_config as storage_load_system_config
    )
    from bot_engine.signal_processor import get_effective_signal, check_autobot_filters, process_auto_bot_signals
    from bot_engine.optimal_ema_manager import (
        load_optimal_ema_data, get_optimal_ema_periods,
        update_optimal_ema_data, save_optimal_ema_periods,
        optimal_ema_data
    )
    MODULES_AVAILABLE = True
    print("[OK] New bot_engine modules loaded successfully")
except ImportError as e:
    print(f"[WARNING] Failed to load new bot_engine modules: {e}")
    print("[WARNING] Using legacy functions from bots.py")
    MODULES_AVAILABLE = False

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not MODULES_AVAILABLE:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ–∑–∂–µ –≤ —Ñ–∞–π–ª–µ
    def calculate_rsi(prices, period=14):
        """–ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–∏–∂–µ –≤ —Ñ–∞–π–ª–µ"""
        pass
    
    def calculate_rsi_history(prices, period=14):
        """–ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–∏–∂–µ –≤ —Ñ–∞–π–ª–µ"""
        pass
    
    def calculate_ema(prices, period):
        """–ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–∏–∂–µ –≤ —Ñ–∞–π–ª–µ"""
        pass

def check_and_stop_existing_bots_processes():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ä—Ç 5001 –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ –∑–∞–Ω–∏–º–∞–µ—Ç.
    
    Returns:
        bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–ø—É—Å–∫, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    """
    try:
        print("=" * 80)
        print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–†–¢–ê 5001 (BOTS SERVICE)")
        print("=" * 80)
        
        current_pid = os.getpid()
        print(f"üìç –¢–µ–∫—É—â–∏–π PID: {current_pid}")
        
        # –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 5001
        port_occupied = False
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('127.0.0.1', 5001))
            sock.close()
            
            if result == 0:
                port_occupied = True
                print("‚ö†Ô∏è  –ü–æ—Ä—Ç 5001 —É–∂–µ –∑–∞–Ω—è—Ç!")
            else:
                print("‚úÖ –ü–æ—Ä—Ç 5001 —Å–≤–æ–±–æ–¥–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
        
        # –ï—Å–ª–∏ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω - —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º
        if not port_occupied:
            print("=" * 80)
            print()
            return True
        
        # –ï—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if port_occupied:
            print("\n‚ö†Ô∏è  –ü–û–†–¢ 5001 –ó–ê–ù–Ø–¢ - –∏—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç...")
            
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 5001
            process_to_stop = None
            
            try:
                # –ò—â–µ–º –í–°–ï –ø—Ä–æ—Ü–µ—Å—Å—ã python —Å bots.py –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                python_processes = []
                for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                    try:
                        if proc.info['name'] and 'python' in proc.info['name'].lower():
                            cmdline = proc.info['cmdline']
                            if cmdline and any('bots.py' in arg for arg in cmdline):
                                if proc.info['pid'] != current_pid:
                                    python_processes.append(proc.info['pid'])
                                    print(f"üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å bots.py: PID {proc.info['pid']}")
                    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                        continue
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 5001
                port_process = None
                for conn in psutil.net_connections(kind='inet'):
                    if conn.laddr.port == 5001 and conn.status == 'LISTEN':
                        port_process = conn.pid
                        if port_process != current_pid and port_process not in python_processes:
                            python_processes.append(port_process)
                            print(f"üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É 5001: PID {port_process}")
                        break
                
                if python_processes:
                    process_to_stop = python_processes[0]  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
                else:
                    process_to_stop = None
                
                if process_to_stop and process_to_stop != current_pid:
                    try:
                        proc = psutil.Process(process_to_stop)
                        proc_info = proc.as_dict(attrs=['pid', 'name', 'cmdline', 'create_time'])
                        
                        print(f"üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É 5001:")
                        print(f"   PID: {proc_info['pid']}")
                        print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(proc_info['cmdline'][:3]) if proc_info['cmdline'] else 'N/A'}...")
                        print()
                        
                        print(f"üîß –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {process_to_stop}...")
                        proc.terminate()
                        
                        try:
                            proc.wait(timeout=5)
                            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {process_to_stop} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        except psutil.TimeoutExpired:
                            proc.kill()
                            proc.wait()
                            print(f"üî¥ –ü—Ä–æ—Ü–µ—Å—Å {process_to_stop} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        
                        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ 5001...")
                        for i in range(10):
                            time.sleep(1)
                            try:
                                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                                sock.settimeout(1)
                                result = sock.connect_ex(('127.0.0.1', 5001))
                                sock.close()
                                
                                if result != 0:
                                    print("‚úÖ –ü–æ—Ä—Ç 5001 –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
                                    break
                            except:
                                pass
                            
                            if i == 9:
                                print("‚ùå –ü–æ—Ä—Ç 5001 –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç!")
                                print("‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
                                print("=" * 80)
                                return False
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_to_stop}: {e}")
                        print("=" * 80)
                        return False
                
                elif not process_to_stop:
                    print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É 5001")
                    print("=" * 80)
                    return False
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É: {e}")
                print("=" * 80)
                return False
            
            print("=" * 80)
            print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê - –ü–†–û–î–û–õ–ñ–ê–ï–ú –ó–ê–ü–£–°–ö")
            print("=" * 80)
            print()
            return True
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò: {e}")
        import traceback
        traceback.print_exc()
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        print("=" * 80)
        print()
        return True

# –ò–º–ø–æ—Ä—Ç —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from utils.color_logger import setup_color_logging

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –∏—Å—Ç–æ—Ä–∏–∏ –±–æ—Ç–æ–≤ - –ü–ï–†–ï–ù–ï–°–ï–ù –í –ì–õ–ê–í–ù–´–ô bots.py
# –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–∫ None, –æ–Ω–∏ –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ main —Ñ–∞–π–ª–µ
bot_history_manager = None
BOT_HISTORY_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–æ—Ç-–¥–≤–∏–∂–∫–∞
from exchanges.exchange_factory import ExchangeFactory
from app.config import EXCHANGES, APP_DEBUG
from bot_engine.bot_config import (
    SystemConfig, RiskConfig, FilterConfig, ExchangeConfig,
    RSI_EXTREME_ZONE_TIMEOUT, RSI_EXTREME_OVERSOLD, RSI_EXTREME_OVERBOUGHT,
    RSI_VOLUME_CONFIRMATION_MULTIPLIER, RSI_DIVERGENCE_LOOKBACK,
    DEFAULT_AUTO_BOT_CONFIG as BOT_ENGINE_DEFAULT_CONFIG
)
from bot_engine.smart_rsi_manager import SmartRSIManager
from bot_engine.trading_bot import TradingBot as RealTradingBot

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
BOTS_STATE_FILE = 'data/bots_state.json'
AUTO_BOT_CONFIG_FILE = 'data/auto_bot_config.json'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
BOT_STATUS_UPDATE_INTERVAL = 30  # 30 —Å–µ–∫—É–Ω–¥ - –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–æ–≤
STOP_LOSS_SETUP_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç - –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
POSITION_SYNC_INTERVAL = 30  # 10 –º–∏–Ω—É—Ç - –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π
INACTIVE_BOT_CLEANUP_INTERVAL = 600  # 10 –º–∏–Ω—É—Ç - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
INACTIVE_BOT_TIMEOUT = 600  # 10 –º–∏–Ω—É—Ç - –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ app.py)
bots_cache_data = {
    'bots': [],
    'account_info': {},
    'last_update': None
}
bots_cache_lock = threading.Lock()

# –ö—ç—à –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ª–æ–≥–æ–≤
log_suppression_cache = {
    'auto_bot_signals': {'count': 0, 'last_log': 0, 'message': ''},
    'position_sync': {'count': 0, 'last_log': 0, 'message': ''},
    'cache_update': {'count': 0, 'last_log': 0, 'message': ''},
    'exchange_positions': {'count': 0, 'last_log': 0, 'message': ''}
}
RSI_CACHE_FILE = 'data/rsi_cache.json'
DEFAULT_CONFIG_FILE = 'data/default_auto_bot_config.json'
PROCESS_STATE_FILE = 'data/process_state.json'
SYSTEM_CONFIG_FILE = 'data/system_config.json'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç
MIN_CANDLES_FOR_MATURITY = 200  # –ú–∏–Ω–∏–º—É–º —Å–≤–µ—á–µ–π –¥–ª—è –∑—Ä–µ–ª–æ–π –º–æ–Ω–µ—Ç—ã (50 –¥–Ω–µ–π –Ω–∞ 6H)
MIN_RSI_LOW = 35   # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π RSI
MAX_RSI_HIGH = 65  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π RSI
MIN_VOLATILITY_THRESHOLD = 0.05  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (5%)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('data', exist_ok=True)

# –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Auto Bot (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
# ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–§–ò–ì –ò–ó bot_engine/bot_config.py
# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ BOT_ENGINE_DEFAULT_CONFIG
DEFAULT_AUTO_BOT_CONFIG = BOT_ENGINE_DEFAULT_CONFIG

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
process_state = {
    'smart_rsi_manager': {
        'active': False,
        'last_update': None,
        'update_count': 0,
        'last_error': None
    },
    'auto_bot_worker': {
        'active': False,
        'last_check': None,
        'check_count': 0,
        'last_error': None
    },
    'auto_save_worker': {
        'active': False,
        'last_save': None,
        'save_count': 0,
        'last_error': None
    },
    'exchange_connection': {
        'initialized': False,
        'last_sync': None,
        'connection_count': 0,
        'last_error': None
    },
    'auto_bot_signals': {
        'last_check': None,
        'signals_processed': 0,
        'bots_created': 0,
        'last_error': None
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_color_logging()

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler('logs/bots.log', encoding='utf-8')
file_handler.setLevel(logging.INFO)
file_formatter = logging.Formatter('[BOTS] %(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_formatter)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
root_logger = logging.getLogger()
root_logger.addHandler(file_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è stdout
if hasattr(sys.stdout, 'reconfigure'):
    sys.stdout.reconfigure(encoding='utf-8')

def should_log_message(category, message, interval_seconds=60):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–¥–∞–≤–∏—Ç—å –µ–≥–æ –∏–∑-–∑–∞ —á–∞—Å—Ç–æ—Ç—ã
    
    Args:
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (auto_bot_signals, position_sync, etc.)
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        interval_seconds: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    Returns:
        tuple: (should_log: bool, summary_message: str or None)
    """
    import time
    
    current_time = time.time()
    
    if category not in log_suppression_cache:
        log_suppression_cache[category] = {'count': 0, 'last_log': 0, 'message': ''}
    
    cache_entry = log_suppression_cache[category]
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if cache_entry['message'] == message:
        cache_entry['count'] += 1
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, –ª–æ–≥–∏—Ä—É–µ–º —Å —Å—á–µ—Ç—á–∏–∫–æ–º
        if current_time - cache_entry['last_log'] >= interval_seconds:
            cache_entry['last_log'] = current_time
            
            if cache_entry['count'] > 1:
                summary_message = f"{message} (–ø–æ–≤—Ç–æ—Ä–∏–ª–æ—Å—å {cache_entry['count']} —Ä–∞–∑ –∑–∞ {int(current_time - cache_entry['last_log'] + interval_seconds)}—Å)"
                cache_entry['count'] = 0
                return True, summary_message
            else:
                cache_entry['count'] = 0
                return True, message
        else:
            # –ü–æ–¥–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return False, None
    else:
        # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if cache_entry['count'] > 0:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            summary = f"[SUMMARY] –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–æ—Å—å {cache_entry['count']} —Ä–∞–∑"
            logger.info(f"[{category.upper()}] {summary}")
        
        cache_entry['message'] = message
        cache_entry['count'] = 1
        cache_entry['last_log'] = current_time
        return True, message

logger = logging.getLogger('BotsService')

# –û—Ç–∫–ª—é—á–∞–µ–º HTTP –ª–æ–≥–∏ Werkzeug –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
werkzeug_logger = logging.getLogger('werkzeug')
werkzeug_logger.setLevel(logging.WARNING)  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ warnings –∏ errors

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è API –±–æ—Ç–æ–≤
# –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ api_endpoints
bots_app = Flask(__name__)
CORS(bots_app)

# API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤
@bots_app.route('/api/status', methods=['GET'])
def api_status():
    """API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤"""
    return jsonify({
        'status': 'online',
        'service': 'bots',
        'timestamp': datetime.now().isoformat(),
        'test': 'simple_endpoint'
    })

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
@bots_app.errorhandler(TypeError)
def handle_json_error(e):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    if "not JSON serializable" in str(e):
        logger.error(f"[JSON_ERROR] –û—à–∏–±–∫–∞ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return jsonify({'success': False, 'error': 'JSON serialization error'}), 500
    return jsonify({'success': False, 'error': str(e)}), 500

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—ã–ª–∏ –≤–∏–¥–Ω—ã –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö)
class GlobalState:
    exchange = None
    smart_rsi_manager = None
    async_processor = None
    async_processor_task = None
    system_initialized = False

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_state = GlobalState()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
def get_exchange():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–∏—Ä–∂—É"""
    return _state.exchange

def set_exchange(exch):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏—Ä–∂—É –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö"""
    _state.exchange = exch
    return exch

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
exchange = _state.exchange
shutdown_flag = threading.Event()
graceful_shutdown = False  # –§–ª–∞–≥ –¥–ª—è graceful shutdown
system_initialized = _state.system_initialized
smart_rsi_manager = _state.smart_rsi_manager
async_processor = _state.async_processor
async_processor_task = _state.async_processor_task

# –ë–õ–û–ö–ò–†–û–í–ö–ò –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
coin_processing_locks = {}  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
coin_processing_lock = threading.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è coin_processing_locks

def get_coin_processing_lock(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    with coin_processing_lock:
        if symbol not in coin_processing_locks:
            coin_processing_locks[symbol] = threading.Lock()
        return coin_processing_locks[symbol]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
def init_exchange():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏"""
    global exchange
    try:
        logger.info("[INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏...")
        exchange = ExchangeFactory.create_exchange(
            'BYBIT', 
            EXCHANGES['BYBIT']['api_key'], 
            EXCHANGES['BYBIT']['api_secret']
        )
        logger.info("[INIT] ‚úÖ –ë–∏—Ä–∂–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"[INIT] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏: {e}")
        exchange = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ init_bot_service()

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã RSI —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–∑–∞–¥–∞–Ω–∏—é (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ)
RSI_OVERSOLD = 29  # –ó–æ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (LONG –ø—Ä–∏ RSI <= 29)
RSI_OVERBOUGHT = 71  # –ó–æ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (SHORT –ø—Ä–∏ RSI >= 71)
RSI_EXIT_LONG = 65  # –í—ã—Ö–æ–¥ –∏–∑ –ª–æ–Ω–≥–∞ (–ø—Ä–∏ RSI >= 65)
RSI_EXIT_SHORT = 35  # –í—ã—Ö–æ–¥ –∏–∑ —à–æ—Ä—Ç–∞ (–ø—Ä–∏ RSI <= 35)

# EMA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞ 6H
EMA_FAST = 50
EMA_SLOW = 200
TREND_CONFIRMATION_BARS = 3

# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –±–æ—Ç–æ–≤
BOT_STATUS = {
    'IDLE': 'idle',
    'RUNNING': 'running',
    'IN_POSITION_LONG': 'in_position_long',
    'IN_POSITION_SHORT': 'in_position_short',
    'PAUSED': 'paused'
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç —Å RSI 6H
coins_rsi_data = {
    'coins': {},  # –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –º–æ–Ω–µ—Ç —Å RSI –¥–∞–Ω–Ω—ã–º–∏
    'last_update': None,
    'update_in_progress': False,
    'total_coins': 0,
    'successful_coins': 0,
    'failed_coins': 0
}

# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–æ–≤
bots_data = {
    'bots': {},  # {symbol: bot_config}
    'auto_bot_config': DEFAULT_AUTO_BOT_CONFIG.copy(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    'global_stats': {
        'active_bots': 0,
        'bots_in_position': 0,
        'total_pnl': 0.0
    }
}

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
rsi_data_lock = threading.Lock()
bots_data_lock = threading.Lock()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Auto Bot
def load_auto_bot_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Auto Bot –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        config_file = 'data/auto_bot_config.json'
        if os.path.exists(config_file):
            with open(config_file, 'r', encoding='utf-8') as f:
                saved_config = json.load(f)
                with bots_data_lock:
                    bots_data['auto_bot_config'].update(saved_config)
                    # –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–±–æ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ!
                    bots_data['auto_bot_config']['enabled'] = False
                logger.info(f"[CONFIG] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Auto Bot –∏–∑ {config_file}")
                logger.info(f"[CONFIG] üîí Auto Bot –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        else:
            logger.info(f"[CONFIG] üìÅ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            # Auto Bot —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    except Exception as e:
        logger.error(f"[CONFIG] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –í–ê–ñ–ù–û: load_auto_bot_config() —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ if __name__ == '__main__'
# —á—Ç–æ–±—ã check_and_stop_existing_bots_processes() –º–æ–≥ –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º

