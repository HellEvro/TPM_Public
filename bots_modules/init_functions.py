"""–§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã

–í–∫–ª—é—á–∞–µ—Ç:
- init_bot_service - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤
- start_async_processor - –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
- stop_async_processor - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
- create_bot - —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
- process_trading_signals_on_candle_close - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
- init_exchange_sync - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
- ensure_exchange_initialized - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏
"""

import os
import time
import logging
import threading
import asyncio
from datetime import datetime

logger = logging.getLogger('BotsService')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ imports_and_globals
try:
    from bots_modules.imports_and_globals import (
        exchange, smart_rsi_manager, async_processor, async_processor_task,
        system_initialized, shutdown_flag, bots_data_lock, bots_data,
        process_state, mature_coins_storage, ASYNC_AVAILABLE, BOT_STATUS,
        RealTradingBot
    )
    # –ò–º–ø–æ—Ä—Ç optimal_ema_data –∏–∑ –º–æ–¥—É–ª—è
    try:
        from bots_modules.optimal_ema import optimal_ema_data
    except:
        optimal_ema_data = {}
except ImportError as e:
    print(f"Warning: Could not import globals in init_functions: {e}")
    exchange = None
    smart_rsi_manager = None
    async_processor = None
    async_processor_task = None
    system_initialized = False
    shutdown_flag = threading.Event()
    bots_data_lock = threading.Lock()
    bots_data = {}
    process_state = {}
    mature_coins_storage = {}
    ASYNC_AVAILABLE = False
    BOT_STATUS = {}

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
try:
    from exchanges.exchange_factory import ExchangeFactory
    from app.config import EXCHANGES
except:
    pass

try:
    from bot_engine.smart_rsi_manager import SmartRSIManager
except:
    SmartRSIManager = None

try:
    from bot_engine.async_processor import AsyncMainProcessor
except:
    AsyncMainProcessor = None

try:
    from bot_engine.bot_config import SystemConfig
except:
    class SystemConfig:
        ASYNC_PROCESSOR_ENABLED = False

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from bots_modules.maturity import load_mature_coins_storage
    from bots_modules.optimal_ema import load_optimal_ema_data
    from bots_modules.imports_and_globals import load_auto_bot_config
    from bots_modules.filters import load_all_coins_rsi, process_trading_signals_for_all_bots
    from bots_modules.sync_and_cache import (
        save_default_config, load_system_config,
        load_bots_state, load_process_state, check_startup_position_conflicts,
        sync_bots_with_exchange, update_process_state
    )
except ImportError as e:
    print(f"Warning: Could not import functions in init_functions: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏ –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è
    def load_mature_coins_storage():
        pass
    def load_optimal_ema_data():
        pass
    def save_default_config():
        pass
    def load_system_config():
        pass
    def load_auto_bot_config():
        pass
    def load_bots_state():
        pass
    def load_process_state():
        pass
    def check_startup_position_conflicts():
        pass
    def sync_bots_with_exchange():
        pass
    def load_all_coins_rsi(exchange_obj=None):
        pass
    def update_process_state(name, data):
        pass

def init_bot_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    try:
        # ‚úÖ –ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –∑–∞–ø—É—Å–∫–∞
        logger.info("=" * 80)
        logger.info("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ INFOBOT")
        logger.info("=" * 80)
        logger.info(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        logger.info(f"üîß –í–µ—Ä—Å–∏—è: 1.0")
        logger.info("=" * 80)
        
        # 0. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç
        load_mature_coins_storage()
        
        # 0.1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA
        load_optimal_ema_data()
        
        # 1. –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        save_default_config()
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        load_system_config()
        
        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        load_process_state()
        
        # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–æ–≤
        load_bots_state()
        
        # 5. –°–ù–ê–ß–ê–õ–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂—É (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
        if init_exchange_sync():
            pass  # –£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            update_process_state('exchange_connection', {
                'initialized': True,
                'last_sync': datetime.now().isoformat(),
                'connection_count': process_state['exchange_connection']['connection_count'] + 1
            })
            
            # 5.1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ (–ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏)
            with bots_data_lock:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                bots_to_init = list(bots_data['bots'].items())
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –≤–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è deadlock
            bots_to_remove = []
            for symbol, bot_data in bots_to_init:
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è fallback
                    with bots_data_lock:
                        auto_bot_config = bots_data['auto_bot_config']
                    
                    bot_config = {
                        'volume_mode': bot_data.get('volume_mode', 'usdt'),
                        'volume_value': bot_data.get('volume_value', auto_bot_config['default_position_size']),  # Fallback –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±–æ—Ç–æ–≤
                        'status': bot_data.get('status', 'paused')
                    }
                    
                    trading_bot = RealTradingBot(
                        symbol=bot_data['symbol'],
                        exchange=exchange,
                        config=bot_config
                    )
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
                    trading_bot.status = bot_data.get('status', 'paused')
                    trading_bot.created_at = bot_data.get('created_at', datetime.now().isoformat())
                    trading_bot.entry_price = bot_data.get('entry_price', '')
                    trading_bot.last_price = bot_data.get('last_price', '')
                    trading_bot.last_rsi = bot_data.get('last_rsi', '')
                    trading_bot.last_signal_time = bot_data.get('last_signal_time', '')
                    trading_bot.last_trend = bot_data.get('last_trend', '')
                    trading_bot.position_side = bot_data.get('position_side', '')
                    trading_bot.position_start_time = bot_data.get('position_start_time', '')
                    trading_bot.unrealized_pnl = bot_data.get('unrealized_pnl', 0)
                    trading_bot.max_profit_achieved = bot_data.get('max_profit_achieved', 0)
                    trading_bot.trailing_stop_price = bot_data.get('trailing_stop_price', '')
                    trading_bot.break_even_activated = bot_data.get('break_even_activated', False)
                    trading_bot.rsi_data = bot_data.get('rsi_data', {})
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ bots_data
                    with bots_data_lock:
                        bots_data['bots'][symbol] = trading_bot.to_dict()
                    
                except Exception as e:
                    logger.error(f"[INIT] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ {symbol}: {e}")
                    # –ü–æ–º–µ—á–∞–µ–º –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    bots_to_remove.append(symbol)
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏
            if bots_to_remove:
                with bots_data_lock:
                    for symbol in bots_to_remove:
                        if symbol in bots_data['bots']:
                            bot_data = bots_data['bots'][symbol]
                            
                            # ‚úÖ –£–î–ê–õ–Ø–ï–ú –ü–û–ó–ò–¶–ò–Æ –ò–ó –†–ï–ï–°–¢–†–ê –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò –ù–ï–ö–û–†–†–ï–ö–¢–ù–û–ì–û –ë–û–¢–ê
                            try:
                                from bots_modules.imports_and_globals import unregister_bot_position
                                position = bot_data.get('position')
                                if position and position.get('order_id'):
                                    order_id = position['order_id']
                                    unregister_bot_position(order_id)
                                    logger.info(f"[INIT] ‚úÖ –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ {symbol}: order_id={order_id}")
                                else:
                                    logger.info(f"[INIT] ‚ÑπÔ∏è –£ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ {symbol} –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ")
                            except Exception as registry_error:
                                logger.error(f"[INIT] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –±–æ—Ç–∞ {symbol}: {registry_error}")
                                # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞
                            
                            del bots_data['bots'][symbol]
                logger.info(f"[INIT] üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(bots_to_remove)} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±–æ—Ç–æ–≤")
            
            # 6. –ó–∞–ø—É—Å–∫–∞–µ–º Smart RSI Manager (–ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏)
            global smart_rsi_manager
            smart_rsi_manager = SmartRSIManager(
                rsi_update_callback=load_all_coins_rsi,
                trading_signal_callback=process_trading_signals_on_candle_close,
                exchange_obj=exchange
            )
            smart_rsi_manager.start()
            
            update_process_state('smart_rsi_manager', {
                'active': True,
                'last_update': datetime.now().isoformat()
            })
            
            # 7. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –±–∏—Ä–∂–µ–π (–ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏)
            sync_bots_with_exchange()
            
            # 7.1. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            check_startup_position_conflicts()
        else:
            logger.error("[INIT] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ä–∂—É")
            update_process_state('exchange_connection', {
                'initialized': False,
                'last_error': 'Initialization failed'
            })
        
        # 8. –í–æ—Ä–∫–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤ main –±–ª–æ–∫–µ bots.py (–ø–æ—Å–ª–µ init_bot_service)
        logger.info("[INIT] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ—Ä–∫–µ—Ä—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –∏–∑ main –±–ª–æ–∫–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if start_async_processor():
            pass  # –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
        else:
            logger.warning("[INIT] ‚ö†Ô∏è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ü–û–°–õ–ï –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        global system_initialized
        system_initialized = True
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º Auto Bot –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ - –æ–Ω –î–û–õ–ñ–ï–ù –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω!
        with bots_data_lock:
            auto_bot_enabled = bots_data['auto_bot_config']['enabled']
        auto_bot_config = bots_data['auto_bot_config']
        bots_count = len(bots_data['bots'])
            
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –≤—ã–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–±–æ—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
        if auto_bot_enabled:
            logger.warning("[INIT] ‚ö†Ô∏è –ê–≤—Ç–æ–±–æ—Ç –≤–∫–ª—é—á–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
            bots_data['auto_bot_config']['enabled'] = False
            auto_bot_enabled = False
            save_auto_bot_config()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        
        # ‚úÖ –ò–¢–û–ì–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ü–£–°–ö–ï
        logger.info("=" * 80)
        logger.info("‚úÖ –°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–ê!")
        logger.info("=" * 80)
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
        logger.info(f"  üîó Exchange: {'‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' if exchange else '‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}")
        logger.info(f"  üìä Smart RSI Manager: {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if smart_rsi_manager else '‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω'}")
        logger.info(f"  ü§ñ Auto Bot: {'‚ùå –í–ö–õ–Æ–ß–ï–ù!' if auto_bot_enabled else '‚úÖ –í—ã–∫–ª—é—á–µ–Ω (–±–µ–∑–æ–ø–∞—Å–Ω–æ)'}")
        logger.info(f"  üíæ Auto Save: ‚úÖ –ó–∞–ø—É—â–µ–Ω")
        logger.info(f"  üîÑ Async Processor: ‚úÖ –ó–∞–ø—É—â–µ–Ω")
        logger.info("")
        logger.info(f"üìà –î–∞–Ω–Ω—ã–µ:")
        logger.info(f"  ü§ñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–æ—Ç–æ–≤: {bots_count}")
        logger.info(f"  ‚úÖ –ó—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç: {len(mature_coins_storage)}")
        logger.info(f"  üìä Optimal EMA: {len(optimal_ema_data)}")
        logger.info("")
        logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Auto Bot:")
        logger.info(f"  üìä RSI: LONG‚â§{auto_bot_config.get('rsi_long_threshold')}, SHORT‚â•{auto_bot_config.get('rsi_short_threshold')}")
        logger.info(f"  ‚è∞ RSI Time Filter: {'‚úÖ ON' if auto_bot_config.get('rsi_time_filter_enabled') else '‚ùå OFF'} ({auto_bot_config.get('rsi_time_filter_candles')} —Å–≤–µ—á–µ–π)")
        logger.info(f"  ‚úÖ Maturity Check: {'‚úÖ ON' if auto_bot_config.get('enable_maturity_check') else '‚ùå OFF'}")
        logger.info(f"  üõ°Ô∏è Stop-Loss: {auto_bot_config.get('max_loss_percent')}%, Trailing: {auto_bot_config.get('trailing_stop_activation')}%")
        logger.info(f"  üë• Max Concurrent: {auto_bot_config.get('max_concurrent')}")
        logger.info("=" * 80)
        logger.info("üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        logger.info("üí° –õ–æ–≥–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")
        logger.info("=" * 80)
        
        # ‚úÖ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–û–¢–ï–†–Ø–ù–ù–´–• –ë–û–¢–û–í –ò–ó –†–ï–ï–°–¢–†–ê
        try:
            from bots_modules.imports_and_globals import restore_lost_bots
            restored_bots = restore_lost_bots()
            if restored_bots:
                logger.info(f"[INIT] üéØ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(restored_bots)} –±–æ—Ç–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π")
            else:
                logger.info("[INIT] ‚ÑπÔ∏è –ë–æ—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as restore_error:
            logger.error(f"[INIT] ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–≤: {restore_error}")
            # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        
        return True
        
    except Exception as e:
        logger.error(f"[INIT] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def start_async_processor():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
    global async_processor, async_processor_task
    
    if not ASYNC_AVAILABLE:
        logger.warning("[ASYNC] ‚ö†Ô∏è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    try:
        logger.info("[ASYNC] üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        async_config = {
            'max_rsi_requests': 15,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            'max_concurrent_bots': 8,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤
            'max_concurrent_signals': 20,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
            'max_concurrent_saves': 5,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
            'rsi_update_interval': SystemConfig.RSI_UPDATE_INTERVAL,
            'position_sync_interval': 60,  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            'bot_processing_interval': 10,  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            'signal_processing_interval': 5,  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            'data_saving_interval': 30  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        }
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é exchange
        global exchange
        logger.info(f"[ASYNC] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é exchange: {type(exchange)}")
        logger.info(f"[ASYNC] üîç exchange is None: {exchange is None}")
        logger.info(f"[ASYNC] üîç exchange == None: {exchange == None}")
        
        if exchange is None:
            logger.error("[ASYNC] ‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä")
            return False
        
        logger.info(f"[ASYNC] ‚úÖ –ë–∏—Ä–∂–∞ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º AsyncMainProcessor —Å —Ç–∏–ø–æ–º: {type(exchange)}")
        async_processor = AsyncMainProcessor(exchange, async_config)
        logger.info(f"[ASYNC] ‚úÖ AsyncMainProcessor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_async_processor():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(async_processor.start())
            except Exception as e:
                logger.error(f"[ASYNC] ‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {e}")
            finally:
                loop.close()
        
        async_processor_task = threading.Thread(target=run_async_processor, daemon=True)
        async_processor_task.start()
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê
        # logger.info("[ASYNC] üîÑ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
        # try:
        #     result = sync_positions_with_exchange()
        #     logger.info(f"[ASYNC] ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
        # except Exception as e:
        #     logger.error(f"[ASYNC] ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        
        logger.info("[ASYNC] ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—â–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"[ASYNC] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        return False

def stop_async_processor():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
    global async_processor, async_processor_task
    
    if async_processor:
        try:
            logger.info("[ASYNC] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
            async_processor.stop()
            async_processor = None
            async_processor_task = None
            logger.info("[ASYNC] ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"[ASYNC] ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")

def create_bot(symbol, config=None, exchange_obj=None):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    if config is None:
        # –ü–æ–ª—É—á–∞–µ–º default_position_size –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Auto Bot
        with bots_data_lock:
            auto_bot_config = bots_data['auto_bot_config']
            default_volume = auto_bot_config['default_position_size']
        
        config = {
            'volume_mode': 'usdt',
            'volume_value': default_volume,
            'status': BOT_STATUS['RUNNING'],
            'entry_price': None,
            'position_side': None,
            'unrealized_pnl': 0.0,
            'created_at': datetime.now().isoformat(),
            'last_signal_time': None
        }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Auto Bot –∫–∞–∫ –±–∞–∑–æ–≤—ã–µ
    with bots_data_lock:
        auto_bot_config = bots_data['auto_bot_config']
        base_config = {
            'volume_mode': 'usdt',
            'volume_value': auto_bot_config['default_position_size'],
            'status': BOT_STATUS['RUNNING'],
            'entry_price': None,
            'position_side': None,
            'unrealized_pnl': 0.0,
            'created_at': datetime.now().isoformat(),
            'last_signal_time': None,
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RSI –∏ –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
            'rsi_long_threshold': auto_bot_config.get('rsi_long_threshold', 29),
            'rsi_short_threshold': auto_bot_config.get('rsi_short_threshold', 71),
            'rsi_exit_long': auto_bot_config.get('rsi_exit_long', 65),
            'rsi_exit_short': auto_bot_config.get('rsi_exit_short', 35),
            'max_loss_percent': auto_bot_config.get('max_loss_percent', 15.0),
            'trailing_stop_activation': auto_bot_config.get('trailing_stop_activation', 300.0),
            'trailing_stop_distance': auto_bot_config.get('trailing_stop_distance', 150.0),
            'max_position_hours': auto_bot_config.get('max_position_hours', 48),
            'break_even_protection': auto_bot_config.get('break_even_protection', True),
            'break_even_trigger': auto_bot_config.get('break_even_trigger', 100.0),
            'avoid_down_trend': auto_bot_config.get('avoid_down_trend', True),
            'avoid_up_trend': auto_bot_config.get('avoid_up_trend', True),
            'enable_maturity_check': auto_bot_config.get('enable_maturity_check', True)
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π (–ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        full_config = {**base_config, **config}
        config = full_config
    
    logger.info(f"[BOT_INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è {symbol}")
    logger.info(f"[BOT_INIT] üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞:")
    logger.info(f"[BOT_INIT] üîç {symbol}: config = {config}")
    logger.info(f"[BOT_INIT] üîç {symbol}: volume_mode = {config.get('volume_mode')}")
    logger.info(f"[BOT_INIT] üîç {symbol}: volume_value = {config.get('volume_value')}")
    logger.info(f"[BOT_INIT] –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {config.get('volume_mode')} = {config.get('volume_value')}")
    logger.info(f"[BOT_INIT] RSI –ø–æ—Ä–æ–≥–∏: Long<={config.get('rsi_long_threshold')}, Short>={config.get('rsi_short_threshold')}")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    logger.info(f"[BOT_INIT] –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TradingBot –¥–ª—è {symbol}...")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –±–∏—Ä–∂—É –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    exchange_to_use = exchange_obj if exchange_obj else exchange
    trading_bot = RealTradingBot(symbol, exchange_to_use, config)
    
    with bots_data_lock:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        if symbol in bots_data['bots']:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Å —Å—Ç–∞—Ç—É—Å–æ–º 'creating', –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            if bots_data['bots'][symbol].get('status') == 'creating':
                logger.info(f"[BOT_ACTIVE] üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –±–æ—Ç–∞ {symbol}")
            else:
                logger.info(f"[BOT_ACTIVE] ‚ö†Ô∏è –ë–æ—Ç {symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º")
        
        bots_data['bots'][symbol] = trading_bot.to_dict()
        total_bots = len(bots_data['bots'])
        logger.info(f"[BOT_ACTIVE] ‚úÖ –ë–æ—Ç {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        logger.info(f"[BOT_ACTIVE] –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {total_bots}")
        logger.info(f"[BOT_ACTIVE] –°—Ç–∞—Ç—É—Å {symbol}: {trading_bot.status}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    # log_bot_start(symbol, config)  # TODO: –§—É–Ω–∫—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
    save_bots_state()
    
    return trading_bot.to_dict()

# –°—Ç–∞—Ä—ã–π rsi_update_worker —É–¥–∞–ª–µ–Ω - –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ SmartRSIManager

def process_trading_signals_on_candle_close(candle_timestamp: int, exchange_obj=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–≤–µ—á–∏ 6H
    
    Args:
        candle_timestamp: Timestamp –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏
        exchange_obj: –û–±—ä–µ–∫—Ç –±–∏—Ä–∂–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
    """
    try:
        logger.info(f"[TRADING] üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–≤–µ—á–∏ {candle_timestamp}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        logger.info("[TRADING] üîÑ –í—ã–∑—ã–≤–∞–µ–º process_trading_signals_for_all_bots...")
        process_trading_signals_for_all_bots(exchange_obj=exchange_obj)
        logger.info("[TRADING] ‚úÖ process_trading_signals_for_all_bots –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        with bots_data_lock:
            active_bots = {symbol: bot for symbol, bot in bots_data['bots'].items() 
                          if bot['status'] not in [BOT_STATUS['IDLE'], BOT_STATUS['PAUSED']]}
        
        if not active_bots:
            logger.info("[TRADING] üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
            # –ù–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º Auto Bot —Å–∏–≥–Ω–∞–ª—ã!
            logger.info("[TRADING] ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º Auto Bot —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤)...")
            # process_auto_bot_signals(exchange_obj=exchange_obj)  # –û–¢–ö–õ–Æ–ß–ï–ù–û!
            return
        
        logger.info(f"[TRADING] ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {len(active_bots)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        for symbol, bot_data in active_bots.items():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ RSI –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã
                with rsi_data_lock:
                    coin_rsi_data = coins_rsi_data['coins'].get(symbol)
                
                if not coin_rsi_data:
                    logger.warning(f"[TRADING] ‚ö†Ô∏è –ù–µ—Ç RSI –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue
                
                rsi = coin_rsi_data.get('rsi6h')
                trend = coin_rsi_data.get('trend6h', 'NEUTRAL')
                price = coin_rsi_data.get('price', 0)
                
                if not rsi or not price:
                    logger.warning(f"[TRADING] ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: RSI={rsi}, Price={price}")
                    continue
                
                logger.info(f"[TRADING] üìä {symbol}: RSI={rsi}, Trend={trend}, Price={price}")
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –±–∏—Ä–∂—É –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                exchange_to_use = exchange_obj if exchange_obj else exchange
                trading_bot = RealTradingBot(symbol, exchange_to_use, bot_data)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–≤–µ—á–∏
                result = trading_bot.process_trading_signals(trend, rsi, price, on_candle_close=True)
                
                if result:
                    logger.info(f"[TRADING] ‚úÖ {symbol}: –û–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–≤–µ—á–∏")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
                    with bots_data_lock:
                        bots_data['bots'][symbol] = trading_bot.to_dict()
                else:
                    logger.debug(f"[TRADING] üí§ {symbol}: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                    
            except Exception as bot_error:
                logger.error(f"[TRADING] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞ {symbol}: {bot_error}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Auto Bot —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–≤–µ—á–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Auto Bot –≤–∫–ª—é—á–µ–Ω
        with bots_data_lock:
            auto_bot_enabled = bots_data['auto_bot_config']['enabled']
        if auto_bot_enabled:
            logger.info("[TRADING]  –ü—Ä–æ–≤–µ—Ä—è–µ–º Auto Bot —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Ç–æ–≤...")
            # process_auto_bot_signals(exchange_obj=exchange_obj)  # –û–¢–ö–õ–Æ–ß–ï–ù–û!
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        save_bots_state()
        logger.info(f"[TRADING] üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
    except Exception as e:
        logger.error(f"[TRADING] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è init_bot_service() –≤—ã—à–µ

def delayed_exchange_init():
    """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏"""
    global exchange
    
    try:
        logger.info("[INIT] –ù–∞—á–∞–ª–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏...")
        
        # –î–∞–µ–º –≤—Ä–µ–º—è Flask —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        time.sleep(2)
        
        logger.info("[INIT] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ...")
        logger.info(f"[INIT] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏: api_key={EXCHANGES['BYBIT']['api_key'][:10]}...")
        
        exchange = ExchangeFactory.create_exchange(
            'BYBIT', 
            EXCHANGES['BYBIT']['api_key'], 
            EXCHANGES['BYBIT']['api_secret']
        )
        
        if not exchange:
            raise Exception("ExchangeFactory –≤–µ—Ä–Ω—É–ª None")
        
        logger.info("[INIT] ‚úÖ –ë–∏—Ä–∂–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            account_info = exchange.get_unified_account_info()
            logger.info(f"[INIT] ‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω, –±–∞–ª–∞–Ω—Å: {account_info.get('totalWalletBalance', 'N/A')}")
        except Exception as test_e:
            logger.warning(f"[INIT] ‚ö†Ô∏è –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è: {str(test_e)}")
        
        # RSI Worker —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ SmartRSIManager –≤ init_bot_service()
        logger.info("[INIT] ‚úÖ –ë–∏—Ä–∂–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"[INIT] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏: {str(e)}")
        import traceback
        logger.error(f"[INIT] Traceback: {traceback.format_exc()}")

def init_exchange_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏"""
    global exchange
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º set_exchange –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö
        from bots_modules.imports_and_globals import set_exchange
        
        logger.info("[SYNC] üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ...")
        
        new_exchange = ExchangeFactory.create_exchange(
            'BYBIT', 
            EXCHANGES['BYBIT']['api_key'], 
            EXCHANGES['BYBIT']['api_secret']
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏—Ä–∂—É –í–û –í–°–ï–• –º–æ–¥—É–ª—è—Ö —á–µ—Ä–µ–∑ GlobalState
        exchange = set_exchange(new_exchange)
        
        logger.info(f"[SYNC] üîç ExchangeFactory —Å–æ–∑–¥–∞–ª –±–∏—Ä–∂—É: {type(new_exchange)}")
        logger.info(f"[SYNC] üîç exchange is None: {new_exchange is None}")
        
        if not new_exchange:
            logger.error("[SYNC] ‚ùå ExchangeFactory –≤–µ—Ä–Ω—É–ª None")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            account_info = new_exchange.get_unified_account_info()
            logger.info(f"[SYNC] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –±–∞–ª–∞–Ω—Å: {account_info.get('totalWalletBalance', 'N/A')}")
        except Exception as test_e:
            logger.warning(f"[SYNC] ‚ö†Ô∏è –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è: {str(test_e)}")
        
        logger.info(f"[SYNC] üîç –í –∫–æ–Ω—Ü–µ init_exchange_sync exchange: {type(new_exchange)}")
        logger.info(f"[SYNC] üîç –í –∫–æ–Ω—Ü–µ init_exchange_sync exchange is None: {new_exchange is None}")
        
        return True
        
    except Exception as e:
        logger.error(f"[SYNC] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏: {str(e)}")
        import traceback
        logger.error(f"[SYNC] Traceback: {traceback.format_exc()}")
        return False
        
def ensure_exchange_initialized():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –±–∏—Ä–∂–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"""
    global exchange
    if exchange is None:
        logger.warning("[WARNING] –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        try:
            logger.info(f"[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ exchange —Å –∫–ª—é—á–∞–º–∏: api_key={EXCHANGES['BYBIT']['api_key'][:10]}...")
            exchange = ExchangeFactory.create_exchange(
                'BYBIT', 
                EXCHANGES['BYBIT']['api_key'], 
                EXCHANGES['BYBIT']['api_secret']
            )
            if exchange:
                logger.info("[OK] –ë–∏—Ä–∂–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error("[ERROR] ExchangeFactory –≤–µ—Ä–Ω—É–ª None")
                return False
        except Exception as e:
            logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ: {str(e)}")
            return False
    logger.debug("[DEBUG] Exchange —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return True

# API endpoints
