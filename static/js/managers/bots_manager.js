/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –±–æ—Ç–∞–º–∏
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º bots.py –Ω–∞ –ø–æ—Ä—Ç—É 5001
 */
class BotsManager {
    constructor() {
        this.selectedCoin = null;
        this.coinsRsiData = [];
        this.activeBots = [];
        this.serviceOnline = false;
        this.updateInterval = null;
        this.accountUpdateInterval = null;
        this.currentRsiFilter = 'all'; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        
        // RSI –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        this.rsiLongThreshold = 29;
        this.rsiShortThreshold = 71;
        
        // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–µ–π
        this.trendLabelsUpdated = false;
        
        // –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–æ–≤
        this.refreshInterval = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.monitoringTimer = null;
        
        // Debounce –¥–ª—è –ø–æ–∏—Å–∫–∞
        this.searchDebounceTimer = null;
        
        // URL —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ö–æ—Å—Ç —á—Ç–æ –∏ —É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.BOTS_SERVICE_URL = `${window.location.protocol}//${window.location.hostname}:5001`;
        this.apiUrl = `${window.location.protocol}//${window.location.hostname}:5001/api/bots`; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        // –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: 'error' - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏, 'info' - –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, 'debug' - –≤—Å–µ
        this.logLevel = 'error'; // ‚úÖ –û–¢–ö–õ–Æ–ß–ï–ù–´ –°–ü–ê–ú-–õ–û–ì–ò - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        this.init();
    }
    
    // –ú–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Ä–æ–≤–Ω—è–º–∏
    logDebug(...args) {
        if (this.logLevel === 'debug') {
            console.log(...args);
        }
    }
    
    logInfo(...args) {
        if (this.logLevel === 'info' || this.logLevel === 'debug') {
            console.log(...args);
        }
    }
    
    logError(...args) {
        console.error(...args);
    }

    async init() {
        console.log('[BotsManager] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–æ–≤...');
        console.log('[BotsManager] üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è debug –ª–æ–≥–æ–≤: window.botsManager.logLevel = "debug"');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.initializeInterface();
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Auto Bot –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
            console.log('[BotsManager] ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Auto Bot –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è...');
            this.initializeGlobalAutoBotToggle();
            this.initializeMobileAutoBotToggle();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤
            await this.checkBotsService();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (this.serviceOnline) {
                console.log('[BotsManager] üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
                try {
                    const syncResponse = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/sync-positions`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const syncData = await syncResponse.json();
                    if (syncData.success) {
                        this.logDebug('[BotsManager] ‚úÖ –ü–æ–∑–∏—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
                    } else {
                        console.warn('[BotsManager] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', syncData.message);
                    }
                } catch (syncError) {
                    console.warn('[BotsManager] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', syncError);
                }
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this.startPeriodicUpdate();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            setTimeout(() => {
                console.log('[BotsManager] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
                this.loadConfigurationData();
            }, 2000);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–±–æ—Ç–∞ –∏ –±–æ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ)
            setTimeout(() => {
                this.logDebug('[BotsManager] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–±–æ—Ç–∞...');
                this.loadActiveBotsData();
            }, 1000);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤
            setTimeout(() => {
                this.logDebug('[BotsManager] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤...');
                this.trendLabelsUpdated = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                this.updateTrendFilterLabels();
            }, 3000);
            
            console.log('[BotsManager] ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showServiceUnavailable();
        }
    }

    initializeInterface() {
        console.log('[BotsManager] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±—ã
        this.initializeTabs();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        this.initializeSearch();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
        this.loadAccountInfo();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã RSI
        this.initializeRsiFilters();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
        this.initializeBotControls();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±–ª–∞—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
        this.initializeScopeButtons();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.initializeManagementButtons();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞!)
        this.initializeConfigurationButtons();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç
        this.loadMatureCoinsCount();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        this.applyReadabilityStyles();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        this.initializeManualPositionsControls();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ RSI
        this.initializeRSILoadingButtons();
        
        console.log('[BotsManager] ‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    applyReadabilityStyles() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è select'–æ–≤ –∏ input'–æ–≤
        const applyStyles = () => {
            const selectors = [
                '.bots-page select',
                '.config-select',
                '#autoBotScope',
                '#checkInterval', 
                '#volumeModeSelect',
                '#rsiLongThreshold',
                '#rsiShortThreshold',
                '#rsiExitLong',
                '#rsiExitShort',
                '#defaultPositionSize',
                '#autoBotMaxConcurrent',
                '#autoBotRiskCap'
            ];
            
            selectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    el.style.background = '#2a2a2a';
                    el.style.color = '#ffffff';
                    el.style.border = '1px solid #404040';
                    
                    // –¢–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ option'–∞–º
                    const options = el.querySelectorAll('option');
                    options.forEach(option => {
                        option.style.background = '#2a2a2a';
                        option.style.color = '#ffffff';
                    });
            });
        });

            console.log('[BotsManager] üé® –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Å—Ç–∏–ª–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏');
        };
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ä–∞–∑—É –∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        applyStyles();
        setTimeout(applyStyles, 500);
        setTimeout(applyStyles, 1000);
    }

    initializeTabs() {
        console.log('[BotsManager] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–∞–±–æ–≤...');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —Ç–∞–±–∞–º
        document.querySelectorAll('.bots-tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                // –ü–æ–ª—É—á–∞–µ–º data-tab —Å –∫–Ω–æ–ø–∫–∏, –∞ –Ω–µ —Å target (–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å span)
                const tabName = btn.dataset.tab;
                console.log('[BotsManager] üìë –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±:', tabName);
                this.switchTab(tabName);
            });
        });

        console.log('[BotsManager] ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–∞–±–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    switchTab(tabName) {
        console.log('[BotsManager] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±:', tabName);
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.bots-tab-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tabName);
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç  
        document.querySelectorAll('.bots-tab-content').forEach(content => {
            // –ú–∞–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞–±–æ–≤ –∫ –∏—Ö ID
            const tabIdMap = {
                'management': 'managementTab',
                'filters': 'filtersTab', 
                'config': 'configTab',
                'active-bots': 'activeBotsTab'
            };
            
            const targetId = tabIdMap[tabName] || `${tabName}Tab`;
            const isActive = content.id === targetId;
            content.classList.toggle('active', isActive);
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞–±–∞
        switch(tabName) {
                    case 'management':
            this.loadCoinsRsiData();
            this.loadFiltersData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.loadDuplicateSettings(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            break;
            case 'filters':
                this.loadFiltersData();
                break;
            case 'config':
                console.log('[BotsManager] üéõÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø');
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                setTimeout(() => this.applyReadabilityStyles(), 100);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                this.showConfigurationLoading(true);
                console.log('[BotsManager] ‚è≥ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª—é—á–µ–Ω');
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è DOM
                setTimeout(() => {
                    console.log('[BotsManager] üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ config...');
                    this.loadConfigurationData().finally(() => {
                        console.log('[BotsManager] ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä');
                        this.showConfigurationLoading(false);
                    });
                }, 200);
                break;
            case 'active-bots':
            case 'activeBotsTab':
                this.loadActiveBotsData();
                break;
        }
        
        console.log('[BotsManager] ‚úÖ –¢–∞–± –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    }

    initializeSearch() {
        const searchInput = document.getElementById('coinSearchInput');
        const clearSearchBtn = document.getElementById('clearSearchBtn');
        
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value;
                
                // ‚úÖ DEBOUNCE: –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
                if (this.searchDebounceTimer) {
                    clearTimeout(this.searchDebounceTimer);
                }
                
                // ‚úÖ –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
                this.updateClearButtonVisibility(searchTerm);
                
                // ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–µ–ª–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 150ms
                this.searchDebounceTimer = setTimeout(() => {
                    this.filterCoins(searchTerm);
                    this.updateSmartFilterControls(searchTerm);
                }, 150);
            });
        }
        
        if (clearSearchBtn) {
            clearSearchBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                // ‚úÖ –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ pending —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                if (this.searchDebounceTimer) {
                    clearTimeout(this.searchDebounceTimer);
                }
                
                this.clearSearch();
            });
        }
    }
    
    updateClearButtonVisibility(searchTerm) {
        const clearSearchBtn = document.getElementById('clearSearchBtn');
        if (clearSearchBtn) {
            clearSearchBtn.style.display = searchTerm && searchTerm.length > 0 ? 'flex' : 'none';
        }
    }
    
    clearSearch() {
        console.log('[BotsManager] üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞...');
        const searchInput = document.getElementById('coinSearchInput');
        if (searchInput) {
            // ‚úÖ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            searchInput.value = '';
            
            // ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä
            this.filterCoins('');
            this.updateSmartFilterControls('');
            this.updateClearButtonVisibility('');
            
            // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å
            searchInput.focus();
            
            console.log('[BotsManager] ‚úÖ –ü–æ–∏—Å–∫ –æ—á–∏—â–µ–Ω');
        }
    }

    initializeManagementButtons() {
        // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –±–ª–æ–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const addToWhitelistBtnMgmt = document.getElementById('addToWhitelistBtnManagement');
        const addToBlacklistBtnMgmt = document.getElementById('addToBlacklistBtnManagement');
        const removeFromFiltersBtnMgmt = document.getElementById('removeFromFiltersBtnManagement');
        
        if (addToWhitelistBtnMgmt) {
            addToWhitelistBtnMgmt.onclick = () => this.addSelectedCoinToWhitelist();
        }
        if (addToBlacklistBtnMgmt) {
            addToBlacklistBtnMgmt.onclick = () => this.addSelectedCoinToBlacklist();
        }
        if (removeFromFiltersBtnMgmt) {
            removeFromFiltersBtnMgmt.onclick = () => this.removeSelectedCoinFromFilters();
        }
        
        // –£–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
        const addFoundToWhitelist = document.getElementById('addFoundToWhitelist');
        const addFoundToBlacklist = document.getElementById('addFoundToBlacklist');
        
        if (addFoundToWhitelist) {
            addFoundToWhitelist.onclick = () => this.addFoundCoinsToWhitelist();
        }
        if (addFoundToBlacklist) {
            addFoundToBlacklist.onclick = () => this.addFoundCoinsToBlacklist();
        }
    }

    initializeRsiFilters() {
        document.querySelectorAll('.rsi-filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º currentTarget –≤–º–µ—Å—Ç–æ target
                // currentTarget = —Å–∞–º–∞ –∫–Ω–æ–ø–∫–∞, target = –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (—ç–º–æ–¥–∑–∏, —Ç–µ–∫—Å—Ç)
                const clickedBtn = e.currentTarget;
                const filter = clickedBtn.dataset.filter;
                
                console.log(`[BotsManager] üîç –ö–ª–∏–∫ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä: ${filter}`);
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
                document.querySelectorAll('.rsi-filter-btn').forEach(b => b.classList.remove('active'));
                clickedBtn.classList.add('active');
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                this.applyRsiFilter(filter);
            });
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        this.updateRsiFilterButtons();
    }
    
    updateRsiFilterButtons() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ RSI
        const buyFilterBtn = document.querySelector('.rsi-filter-btn[data-filter="buy-zone"]');
        const sellFilterBtn = document.querySelector('.rsi-filter-btn[data-filter="sell-zone"]');
        
        if (buyFilterBtn) {
            buyFilterBtn.innerHTML = `üü¢ ‚â§${this.rsiLongThreshold}`;
        }
        
        if (sellFilterBtn) {
            sellFilterBtn.innerHTML = `üî¥ ‚â•${this.rsiShortThreshold}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å RSI –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        this.updateTrendFilterLabels();
        
        console.log(`[BotsManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ RSI: ‚â§${this.rsiLongThreshold}, ‚â•${this.rsiShortThreshold}`);
    }
    
    updateTrendFilterLabels() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∏
        if (this.trendLabelsUpdated) {
            console.log('[BotsManager] ‚è≠Ô∏è –ü–æ–¥–ø–∏—Å–∏ —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ RSI –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const avoidDownTrendLabels = document.querySelectorAll('[data-translate="avoid_down_trend_label"]');
        const avoidUpTrendLabels = document.querySelectorAll('[data-translate="avoid_up_trend_label"]');
        
        console.log(`[BotsManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤: RSI LONG=${this.rsiLongThreshold}, RSI SHORT=${this.rsiShortThreshold}`);
        
        avoidDownTrendLabels.forEach(label => {
            // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 29 –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            const updatedText = `–ò–∑–±–µ–≥–∞—Ç—å –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –∫–æ–≥–¥–∞ RSI < ${this.rsiLongThreshold}`;
            label.textContent = updatedText;
            console.log(`[BotsManager] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è DOWN —Ç—Ä–µ–Ω–¥–∞: "${updatedText}"`);
        });
        
        avoidUpTrendLabels.forEach(label => {
            // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 71 –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            const updatedText = `–ò–∑–±–µ–≥–∞—Ç—å –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –∫–æ–≥–¥–∞ RSI > ${this.rsiShortThreshold}`;
            label.textContent = updatedText;
            console.log(`[BotsManager] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è UP —Ç—Ä–µ–Ω–¥–∞: "${updatedText}"`);
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        this.trendLabelsUpdated = true;
        console.log('[BotsManager] ‚úÖ –ü–æ–¥–ø–∏—Å–∏ —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    updateRsiThresholds(config) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI
        const oldLongThreshold = this.rsiLongThreshold;
        const oldShortThreshold = this.rsiShortThreshold;
        
        this.rsiLongThreshold = config.rsi_long_threshold || 29;
        this.rsiShortThreshold = config.rsi_short_threshold || 71;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
        this.trendLabelsUpdated = false;
        
        console.log(`[BotsManager] üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Ä–æ–≥–∏ RSI: ${oldLongThreshold}‚Üí${this.rsiLongThreshold}, ${oldShortThreshold}‚Üí${this.rsiShortThreshold}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.updateRsiFilterButtons();
        
        // –ü–µ—Ä–µ–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–Ω–µ—Ç
        this.refreshCoinsRsiClasses();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.updateCoinsCounter();
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä buy-zone –∏–ª–∏ sell-zone, –ø–µ—Ä–µ–ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        if (this.currentRsiFilter === 'buy-zone' || this.currentRsiFilter === 'sell-zone') {
            this.applyRsiFilter(this.currentRsiFilter);
        }
    }
    
    refreshCoinsRsiClasses() {
        // –ü–µ—Ä–µ–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –∫–ª–∞—Å—Å—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        const coinItems = document.querySelectorAll('.coin-item');
        
        coinItems.forEach(item => {
            const symbol = item.dataset.symbol;
            const coinData = this.coinsRsiData.find(c => c.symbol === symbol);
            
            if (coinData) {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
                item.classList.remove('buy-zone', 'sell-zone', 'enter-long', 'enter-short');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
                const rsiClass = this.getRsiZoneClass(coinData.rsi6h);
                if (rsiClass) {
                    item.classList.add(rsiClass);
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                const effectiveSignal = this.getEffectiveSignal(coinData);
                
                if (effectiveSignal === 'ENTER_LONG') {
                    item.classList.add('enter-long');
                } else if (effectiveSignal === 'ENTER_SHORT') {
                    item.classList.add('enter-short');
                }
            }
        });
        
        console.log('[BotsManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã RSI –∏ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç');
    }

    initializeBotControls() {
        console.log('[BotsManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º...');
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
        const createBotBtn = document.getElementById('createBotBtn');
        console.log('[BotsManager] createBotBtn –Ω–∞–π–¥–µ–Ω–∞:', !!createBotBtn);
        const startBotBtn = document.getElementById('startBotBtn');
        const stopBotBtn = document.getElementById('stopBotBtn');
        const pauseBotBtn = document.getElementById('pauseBotBtn');
        const resumeBotBtn = document.getElementById('resumeBotBtn');

        if (createBotBtn) {
            createBotBtn.addEventListener('click', () => this.createBot());
        }
        if (startBotBtn) {
            startBotBtn.addEventListener('click', () => this.startBot());
        }
        if (stopBotBtn) {
            stopBotBtn.addEventListener('click', () => this.stopBot());
        }
        if (pauseBotBtn) {
            pauseBotBtn.addEventListener('click', () => this.pauseBot());
        }
        if (resumeBotBtn) {
            resumeBotBtn.addEventListener('click', () => this.resumeBot());
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        this.initializeIndividualSettingsButtons();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        this.initializeQuickLaunchButtons();
    }

    async checkBotsService() {
        console.log('[BotsManager] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤...');
        
        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/status`, {
                method: 'GET',
                timeout: 5000
            });
            
            if (response.ok) {
                const data = await response.json();
                this.serviceOnline = data.status === 'online';
                
                if (this.serviceOnline) {
                    console.log('[BotsManager] ‚úÖ –°–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω');
                    this.updateServiceStatus('online', '–°–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω');
                    await this.loadCoinsRsiData();
                } else {
                    console.warn('[BotsManager] ‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                    this.updateServiceStatus('offline', '–°–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –°–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            this.serviceOnline = false;
            this.updateServiceStatus('offline', '–°–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            this.showServiceUnavailable();
        }
    }

    updateServiceStatus(status, message) {
        const statusElement = document.getElementById('botsServiceStatus');
        const statusDot = document.getElementById('rsiStatusDot');
        
        if (statusElement) {
            const indicator = statusElement.querySelector('.status-indicator');
            const text = statusElement.querySelector('.status-text');
            
            if (indicator) {
                indicator.className = `status-indicator ${status}`;
                indicator.textContent = status === 'online' ? 'üü¢' : 'üî¥';
            }
            
            if (text) {
                text.textContent = message;
            }
        }
        
        if (statusDot) {
            statusDot.style.color = status === 'online' ? '#4caf50' : '#f44336';
        }
    }

    showServiceUnavailable() {
        const coinsListElement = document.getElementById('coinsRsiList');
        if (coinsListElement) {
            coinsListElement.innerHTML = `
                <div class="service-unavailable">
                    <h3>üö´ –°–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
                    <p>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–∞–º–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:</p>
                    <code>python bots.py</code>
                    <p>–°–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5001</p>
                </div>
            `;
        }
    }

    async loadCoinsRsiData() {
        if (!this.serviceOnline) {
            console.warn('[BotsManager] ‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –æ–Ω–ª–∞–π–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
            return;
        }

        this.logDebug('[BotsManager] üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö RSI 6H...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        const searchInput = document.getElementById('coinSearchInput');
        const currentSearchTerm = searchInput ? searchInput.value : '';
        
        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/coins-with-rsi`);
            
            if (response.ok) {
            const data = await response.json();
            
            if (data.success) {
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI
                    this.logDebug('[BotsManager] üîç –î–∞–Ω–Ω—ã–µ –æ—Ç API:', data);
                    this.logDebug('[BotsManager] üîç –ö–ª—é—á–∏ coins:', Object.keys(data.coins));
                    this.coinsRsiData = Object.values(data.coins);
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    const manualPositions = data.manual_positions || [];
                    this.logDebug(`[BotsManager] ‚úã –†—É—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:`, manualPositions);
                    this.logDebug(`[BotsManager] ‚úã –í—Å–µ–≥–æ —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${manualPositions.length}`);
                    
                    // –ü–æ–º–µ—á–∞–µ–º –º–æ–Ω–µ—Ç—ã —Å —Ä—É—á–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
                    let markedCount = 0;
                    this.coinsRsiData.forEach(coin => {
                        coin.manual_position = manualPositions.includes(coin.symbol);
                        if (coin.manual_position) {
                            markedCount++;
                            this.logDebug(`[BotsManager] ‚úã –ú–æ–Ω–µ—Ç–∞ ${coin.symbol} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä—É—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è`);
                        }
                    });
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç –∏ –ø–æ–º–µ—á–∞–µ–º –∏—Ö
                    await this.loadMatureCoinsAndMark();
                    
                    this.logDebug(`[BotsManager] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.coinsRsiData.length} –º–æ–Ω–µ—Ç —Å RSI`);
                    this.logDebug(`[BotsManager] ‚úÖ –ü–æ–º–µ—á–µ–Ω–æ ${markedCount} –º–æ–Ω–µ—Ç —Å —Ä—É—á–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏`);
                    this.logDebug('[BotsManager] üîç –ü–µ—Ä–≤—ã–µ 3 –º–æ–Ω–µ—Ç—ã:', this.coinsRsiData.slice(0, 3));
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    this.renderCoinsList();
                    this.updateCoinsCounter();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–µ
                    if (this.selectedCoin) {
                        const updatedCoin = this.coinsRsiData.find(coin => coin.symbol === this.selectedCoin.symbol);
                        if (updatedCoin) {
                            this.selectedCoin = updatedCoin;
                            this.updateCoinInfo();
                            this.renderTradesInfo(this.selectedCoin.symbol);
                        }
                    }
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
                    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å!)
                    // –ë–µ—Ä–µ–º –ê–ö–¢–£–ê–õ–¨–ù–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è, –∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ
                    const actualSearchTerm = searchInput ? searchInput.value : '';
                    if (actualSearchTerm) {
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –Ω–æ–≤–æ–º—É —Å–ø–∏—Å–∫—É –º–æ–Ω–µ—Ç
                        this.filterCoins(actualSearchTerm);
                        this.updateSmartFilterControls(actualSearchTerm);
                        this.updateClearButtonVisibility(actualSearchTerm);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    this.updateServiceStatus('online', `${window.languageUtils.translate('updated')}: ${data.last_update ? new Date(data.last_update).toLocaleTimeString() : window.languageUtils.translate('unknown')}`);
                } else {
                    throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
                }
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSI –¥–∞–Ω–Ω—ã—Ö:', error);
            this.updateServiceStatus('offline', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    renderCoinsList() {
        const coinsListElement = document.getElementById('coinsRsiList');
        if (!coinsListElement) {
            console.warn('[BotsManager] ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç coinsRsiList –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        this.logDebug(`[BotsManager] üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç: ${this.coinsRsiData.length} –º–æ–Ω–µ—Ç`);
        
        if (this.coinsRsiData.length === 0) {
            console.warn('[BotsManager] ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö RSI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            coinsListElement.innerHTML = `
                <div class="loading-state">
                    <p>‚è≥ ${window.languageUtils.translate('loading_rsi_data')}</p>
                    <small>${window.languageUtils.translate('first_load_warning')}</small>
                </div>
            `;
            return;
        }
        
        const coinsHtml = this.coinsRsiData.map(coin => {
            const rsiClass = this.getRsiZoneClass(coin.rsi6h);
            const trendClass = coin.trend6h ? `trend-${coin.trend6h.toLowerCase()}` : 'trend-none';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
            const effectiveSignal = this.getEffectiveSignal(coin);
            const signalClass = effectiveSignal === 'ENTER_LONG' ? 'enter-long' : 
                               effectiveSignal === 'ENTER_SHORT' ? 'enter-short' : '';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—É—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            const isManualPosition = coin.manual_position || false;
            const manualClass = isManualPosition ? 'manual-position' : '';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑—Ä–µ–ª–∞—è –ª–∏ –º–æ–Ω–µ—Ç–∞
            const isMature = coin.is_mature || false;
            const matureClass = isMature ? 'mature-coin' : '';
            
            // –£–±—Ä–∞–Ω—ã —Å–ø–∞–º –ª–æ–≥–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
            
            return `
                <li class="coin-item ${rsiClass} ${trendClass} ${signalClass} ${manualClass} ${matureClass}" data-symbol="${coin.symbol}">
                    <div class="coin-item-content">
                        <div class="coin-header">
                            <span class="coin-symbol">${coin.symbol}</span>
                            <div class="coin-header-right">
                                ${isManualPosition ? '<span class="manual-position-indicator" title="–†—É—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è">‚úã</span>' : ''}
                                ${isMature ? '<span class="mature-coin-indicator" title="–ó—Ä–µ–ª–∞—è –º–æ–Ω–µ—Ç–∞">üíé</span>' : ''}
                                ${this.generateWarningIndicator(coin)}
                                <span class="coin-rsi ${this.getRsiZoneClass(coin.rsi6h)}">${coin.rsi6h}</span>
                                <a href="${this.createTickerLink(coin.symbol)}" 
                               target="_blank" 
                               class="external-link" 
                               title="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –±–∏—Ä–∂–µ"
                               onclick="event.stopPropagation()">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                                    <polyline points="15 3 21 3 21 9"></polyline>
                                    <line x1="10" y1="14" x2="21" y2="3"></line>
                                </svg>
                            </a>
                        </div>
                        </div>
                        <div class="coin-details">
                            <span class="coin-trend ${coin.trend6h}">${coin.trend6h || 'NEUTRAL'}</span>
                            <span class="coin-price">$${coin.price?.toFixed(6) || '0'}</span>
                        </div>
                        <div class="coin-signal">
                            <small class="signal-text">${effectiveSignal || 'WAIT'}</small>
                            ${this.generateEnhancedSignalInfo(coin)}
                            ${this.generateTimeFilterInfo(coin)}
                            ${this.generateAntiPumpFilterInfo(coin)}
                        </div>
                    </div>
                </li>
            `;
        }).join('');

        coinsListElement.innerHTML = coinsHtml;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        coinsListElement.querySelectorAll('.coin-item').forEach(item => {
            item.addEventListener('click', () => {
                const symbol = item.dataset.symbol;
                this.selectCoin(symbol);
            });
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.restoreFilterState();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–∞—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
        if (this.selectedCoin && this.selectedCoin.symbol) {
            this.renderTradesInfo(this.selectedCoin.symbol);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
        this.updateCoinsListWithBotStatus();
    }

    generateWarningIndicator(coin) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç WARNING –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ RSI
        const enhancedRsi = coin.enhanced_rsi;
        
        if (!enhancedRsi || !enhancedRsi.enabled) {
            return '';
        }
        
        const warningType = enhancedRsi.warning_type;
        const warningMessage = enhancedRsi.warning_message;
        
        if (!warningType || warningType === 'ERROR') {
            return '';
        }
        
        let warningIcon = '';
        let warningClass = '';
        let warningTitle = warningMessage || '';
        
        switch (warningType) {
            case 'EXTREME_OVERSOLD_LONG':
                warningIcon = '‚ö†Ô∏è';
                warningClass = 'warning-extreme-oversold';
                warningTitle = `–í–ù–ò–ú–ê–ù–ò–ï: ${warningMessage}. –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è LONG`;
                break;
            case 'EXTREME_OVERBOUGHT_LONG':
                warningIcon = '‚ö†Ô∏è';
                warningClass = 'warning-extreme-overbought';
                warningTitle = `–í–ù–ò–ú–ê–ù–ò–ï: ${warningMessage}. –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è SHORT`;
                break;
            case 'OVERSOLD':
                warningIcon = 'üü¢';
                warningClass = 'warning-oversold';
                warningTitle = warningMessage;
                break;
            case 'OVERBOUGHT':
                warningIcon = 'üî¥';
                warningClass = 'warning-overbought';
                warningTitle = warningMessage;
                break;
            default:
                return '';
        }
        
        return `<span class="enhanced-warning ${warningClass}" title="${warningTitle}">${warningIcon}</span>`;
    }
    
    generateEnhancedSignalInfo(coin) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–≥–Ω–∞–ª–µ
        const enhancedRsi = coin.enhanced_rsi;
        let infoElements = [];
        
        // console.log(`[DEBUG] ${coin.symbol}: enhanced_rsi =`, enhancedRsi);
        
        // –°–¢–û–•–ê–°–¢–ò–ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï–ì–î–ê –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ!
        let stochK = null;
        let stochD = null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞
        if (coin.stoch_rsi_k !== undefined && coin.stoch_rsi_k !== null) {
            stochK = coin.stoch_rsi_k;
            stochD = coin.stoch_rsi_d || 0;
        } else if (enhancedRsi && enhancedRsi.confirmations) {
            stochK = enhancedRsi.confirmations.stoch_rsi_k;
            stochD = enhancedRsi.confirmations.stoch_rsi_d || 0;
        }
        
        if (stochK !== null && stochK !== undefined) {
            let stochIcon, stochStatus, stochDescription;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞
            if (stochK < 20) {
                stochIcon = '‚¨áÔ∏è';
                stochStatus = 'OVERSOLD';
                stochDescription = '–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å: %K –Ω–∏–∂–µ 20 - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö';
            } else if (stochK > 80) {
                stochIcon = '‚¨ÜÔ∏è';
                stochStatus = 'OVERBOUGHT';
                stochDescription = '–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å: %K –≤—ã—à–µ 80 - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑';
            } else {
                stochIcon = '‚û°Ô∏è';
                stochStatus = 'NEUTRAL';
                stochDescription = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞: %K –º–µ–∂–¥—É 20-80 - —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ %K –∏ %D
            let crossoverInfo = '';
            if (stochK > stochD) {
                crossoverInfo = ' (%K –≤—ã—à–µ %D - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)';
            } else if (stochK < stochD) {
                crossoverInfo = ' (%K –Ω–∏–∂–µ %D - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)';
            } else {
                crossoverInfo = ' (%K = %D - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ)';
            }
            
            const fullDescription = `${stochDescription}${crossoverInfo}`;
            
            // console.log(`[DEBUG] ${coin.symbol}: –ì–ï–ù–ï–†–ò–†–£–Æ –°–¢–û–•–ê–°–¢–ò–ö %K=${stochK}, %D=${stochD}, —Å—Ç–∞—Ç—É—Å=${stochStatus}, icon=${stochIcon}`);
            infoElements.push(`<span class="confirmation-stoch" title="${fullDescription}">${stochIcon}</span>`);
        } else {
            // console.log(`[DEBUG] ${coin.symbol}: –ù–ï–¢ –°–¢–û–•–ê–°–¢–ò–ö–ê - stoch_rsi_k=${coin.stoch_rsi_k}, enhanced_rsi=${!!enhancedRsi}`);
        }
        
        // Enhanced RSI –¥–∞–Ω–Ω—ã–µ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (enhancedRsi && enhancedRsi.enabled) {
        const extremeDuration = enhancedRsi.extreme_duration;
        const confirmations = enhancedRsi.confirmations || {};
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
        if (extremeDuration > 0) {
            infoElements.push(`<span class="extreme-duration" title="–í—Ä–µ–º—è –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ">${extremeDuration}üïê</span>`);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if (confirmations.volume) {
            infoElements.push(`<span class="confirmation-volume" title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º">üìä</span>`);
        }
        
        if (confirmations.divergence) {
            const divIcon = confirmations.divergence === 'BULLISH_DIVERGENCE' ? 'üìà' : 'üìâ';
            infoElements.push(`<span class="confirmation-divergence" title="–î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: ${confirmations.divergence}">${divIcon}</span>`);
        }
        }
        
        if (infoElements.length > 0) {
            return `<div class="enhanced-info">${infoElements.join('')}</div>`;
        }
        
        return '';
    }
    
    generateTimeFilterInfo(coin) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∏–ª—å—Ç—Ä–µ RSI
        const timeFilterInfo = coin.time_filter_info;
        
        if (!timeFilterInfo) {
            // console.log(`[DEBUG] ${coin.symbol}: –ù–ï–¢ time_filter_info`);
            return '';
        }
        
        // console.log(`[DEBUG] ${coin.symbol}: time_filter_info =`, timeFilterInfo);
        
        const isBlocked = timeFilterInfo.blocked;
        const reason = timeFilterInfo.reason;
        const lastExtremeCandlesAgo = timeFilterInfo.last_extreme_candles_ago;
        const calmCandles = timeFilterInfo.calm_candles;
        
        let icon = '';
        let className = '';
        let title = '';
        
        if (isBlocked) {
            // –§–∏–ª—å—Ç—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥
            icon = '‚è∞';
            className = 'time-filter-blocked';
            title = `–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç: ${reason}`;
        } else {
            // –§–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            icon = '‚è±Ô∏è';
            className = 'time-filter-active';
            title = `–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä: ${reason}`;
            if (lastExtremeCandlesAgo !== null) {
                title += ` (${lastExtremeCandlesAgo} —Å–≤–µ—á–µ–π –Ω–∞–∑–∞–¥)`;
            }
            if (calmCandles !== null) {
                title += ` (${calmCandles} —Å–ø–æ–∫–æ–π–Ω—ã—Ö —Å–≤–µ—á–µ–π)`;
            }
        }
        
        console.log(`[DEBUG] ${coin.symbol}: isBlocked=${isBlocked}, reason="${reason}", icon="${icon}", title="${title}"`);
        
        if (icon && title) {
            console.log(`[DEBUG] ${coin.symbol}: –ì–ï–ù–ï–†–ò–†–£–Æ –ò–ö–û–ù–ö–£ RSI Time Filter`);
            return `<div class="time-filter-info ${className}" title="${title}">${icon}</div>`;
        }
        
        console.log(`[DEBUG] ${coin.symbol}: –ù–ï –ì–ï–ù–ï–†–ò–†–£–Æ –ò–ö–û–ù–ö–£ - icon="${icon}", title="${title}"`);
        return '';
    }
    
    generateExitScamFilterInfo(coin) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ExitScam —Ñ–∏–ª—å—Ç—Ä–µ
        const exitScamInfo = coin.exit_scam_info;
        
        if (!exitScamInfo) {
            return '';
        }
        
        const isBlocked = exitScamInfo.blocked;
        const reason = exitScamInfo.reason;
        
        let icon = '';
        let className = '';
        let title = '';
        
        if (isBlocked) {
            // –§–∏–ª—å—Ç—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥
            icon = 'üõ°Ô∏è';
            className = 'exit-scam-blocked';
            title = `ExitScam —Ñ–∏–ª—å—Ç—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç: ${reason}`;
        } else {
            // –§–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω
            icon = '‚úÖ';
            className = 'exit-scam-passed';
            title = `ExitScam —Ñ–∏–ª—å—Ç—Ä: ${reason}`;
        }
        
        if (icon && title) {
            return `<div class="exit-scam-info ${className}" title="${title}">${icon}</div>`;
        }
        
        return '';
    }
    
    // –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    generateAntiPumpFilterInfo(coin) {
        return this.generateExitScamFilterInfo(coin);
    }

    getRsiZoneClass(rsi) {
        if (rsi <= this.rsiLongThreshold) return 'buy-zone';
        if (rsi >= this.rsiShortThreshold) return 'sell-zone';
        return '';
    }

    createTickerLink(symbol) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –±–∏—Ä–∂—É –∏–∑ exchangeManager
            let currentExchange = 'bybit'; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ exchangeManager –∏ –µ–≥–æ –º–µ—Ç–æ–¥–∞
            const exchangeManager = window.app?.exchangeManager;
            if (exchangeManager && typeof exchangeManager.getSelectedExchange === 'function') {
                currentExchange = exchangeManager.getSelectedExchange();
            }
            
            return this.getExchangeLink(symbol, currentExchange);
        } catch (error) {
            console.warn('Error in createTickerLink:', error);
            return this.getExchangeLink(symbol, 'bybit');
        }
    }

    getExchangeLink(symbol, exchange = 'bybit') {
        // –£–¥–∞–ª—è–µ–º USDT –∏–∑ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏
        const cleanSymbol = symbol.replace('USDT', '');
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏—Ä–∂–∏
        switch (exchange.toLowerCase()) {
            case 'binance':
                return `https://www.binance.com/ru/futures/${cleanSymbol}USDT`;
            case 'bybit':
                return `https://www.bybit.com/trade/usdt/${cleanSymbol}USDT`;
            case 'okx':
                return `https://www.okx.com/ru/trade-swap/${cleanSymbol.toLowerCase()}-usdt-swap`;
            default:
                return `https://www.bybit.com/trade/usdt/${cleanSymbol}USDT`; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Bybit
        }
    }

        updateCoinsCounter() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        this.updateSignalCounters();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        this.updateManualPositionCounter();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    updateManualPositionCounter() {
        const manualCountElement = document.getElementById('manualCount');
        if (manualCountElement) {
            const manualCount = this.coinsRsiData.filter(coin => coin.manual_position).length;
            manualCountElement.textContent = `(${manualCount})`;
        }
    }
    
    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –º–æ–Ω–µ—Ç—ã
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –∞–≤—Ç–æ–±–æ—Ç–æ–º, –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
     * @param {Object} coin - –î–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
     * @returns {string} - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª (ENTER_LONG, ENTER_SHORT, WAIT)
     */
    getEffectiveSignal(coin) {
        // –ï—Å–ª–∏ API —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (coin.effective_signal) {
            return coin.effective_signal;
        }
        
        // –ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ (fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (coin.enhanced_rsi && coin.enhanced_rsi.enabled && coin.enhanced_rsi.enhanced_signal) {
            return coin.enhanced_rsi.enhanced_signal;
        }
        
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        return coin.signal || 'WAIT';
    }

    updateSignalCounters() {
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const allCount = this.coinsRsiData.length;
        const longCount = this.coinsRsiData.filter(coin => this.getEffectiveSignal(coin) === 'ENTER_LONG').length;
        const shortCount = this.coinsRsiData.filter(coin => this.getEffectiveSignal(coin) === 'ENTER_SHORT').length;
        const buyZoneCount = this.coinsRsiData.filter(coin => coin.rsi6h && coin.rsi6h <= 29).length;
        const sellZoneCount = this.coinsRsiData.filter(coin => coin.rsi6h && coin.rsi6h >= 71).length;
        const trendUpCount = this.coinsRsiData.filter(coin => coin.trend6h === 'UP').length;
        const trendDownCount = this.coinsRsiData.filter(coin => coin.trend6h === 'DOWN').length;
        const manualPositionCount = this.coinsRsiData.filter(coin => coin.manual_position === true).length;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ HTML (—Ñ–∏–ª—å—Ç—Ä—ã)
        const allCountEl = document.getElementById('filterAllCount');
        const buyZoneCountEl = document.getElementById('filterBuyZoneCount');
        const sellZoneCountEl = document.getElementById('filterSellZoneCount');
        
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        if (!buyZoneCountEl || !sellZoneCountEl) {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            const buyFilterBtn = document.querySelector('button[data-filter="buy-zone"]');
            const sellFilterBtn = document.querySelector('button[data-filter="sell-zone"]');
            
            if (buyFilterBtn && !buyFilterBtn.querySelector('#filterBuyZoneCount')) {
                const buySpan = document.createElement('span');
                buySpan.id = 'filterBuyZoneCount';
                buySpan.textContent = ` (${buyZoneCount})`;
                buyFilterBtn.appendChild(buySpan);
            }
            
            if (sellFilterBtn && !sellFilterBtn.querySelector('#filterSellZoneCount')) {
                const sellSpan = document.createElement('span');
                sellSpan.id = 'filterSellZoneCount';
                sellSpan.textContent = ` (${sellZoneCount})`;
                sellFilterBtn.appendChild(sellSpan);
            }
        }
        
        const trendUpCountEl = document.getElementById('filterTrendUpCount');
        const trendDownCountEl = document.getElementById('filterTrendDownCount');
        const longCountEl = document.getElementById('filterLongCount');
        const shortCountEl = document.getElementById('filterShortCount');
        const manualCountEl = document.getElementById('manualCount');
        
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (allCountEl) allCountEl.textContent = allCount;
        
        if (buyZoneCountEl) buyZoneCountEl.textContent = ` (${buyZoneCount})`;
        if (sellZoneCountEl) sellZoneCountEl.textContent = ` (${sellZoneCount})`;
        if (trendUpCountEl) trendUpCountEl.textContent = trendUpCount;
        if (trendDownCountEl) trendDownCountEl.textContent = trendDownCount;
        if (longCountEl) longCountEl.textContent = longCount;
        if (shortCountEl) shortCountEl.textContent = shortCount;
        if (manualCountEl) manualCountEl.textContent = `(${manualPositionCount})`;
        
        this.logDebug(`[BotsManager] üìä –°—á–µ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ALL=${allCount}, BUY=${buyZoneCount}, SELL=${sellZoneCount}, UP=${trendUpCount}, DOWN=${trendDownCount}, LONG=${longCount}, SHORT=${shortCount}, MANUAL=${manualPositionCount}`);
    }

    selectCoin(symbol) {
        this.logDebug('[BotsManager] üéØ –í—ã–±—Ä–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞:', symbol);
        this.logDebug('[BotsManager] üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –≤ RSI –¥–∞–Ω–Ω—ã—Ö:', this.coinsRsiData.length);
        this.logDebug('[BotsManager] üîç –ü–µ—Ä–≤—ã–µ 5 –º–æ–Ω–µ—Ç:', this.coinsRsiData.slice(0, 5).map(c => c.symbol));
        
        // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        const coinData = this.coinsRsiData.find(coin => coin.symbol === symbol);
        this.logDebug('[BotsManager] üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã:', coinData);
        
        if (!coinData) {
            console.warn('[BotsManager] ‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ RSI –¥–∞–Ω–Ω—ã—Ö:', symbol);
            return;
        }

        this.selectedCoin = coinData;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
        document.querySelectorAll('.coin-item').forEach(item => {
            item.classList.toggle('selected', item.dataset.symbol === symbol);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
        this.showBotControlInterface();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–µ—Ç–µ
        this.updateCoinInfo();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
        this.updateBotStatus();
        this.updateBotControlButtons();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
        this.loadAndApplyIndividualSettings(symbol);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        this.showFilterControls(symbol);
        this.updateFilterStatus(symbol);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–∞—Ö
        this.renderTradesInfo(symbol);
    }

    showBotControlInterface() {
        console.log('[BotsManager] üé® –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º...');
        
        const promptElement = document.getElementById('selectCoinPrompt');
        const controlElement = document.getElementById('botControlInterface');
        const tradesSection = document.getElementById('tradesInfoSection');
        
        console.log('[BotsManager] üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', {
            promptElement: !!promptElement,
            controlElement: !!controlElement,
            tradesSection: !!tradesSection
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
        const parentPanel = document.querySelector('.bot-control-panel');
        console.log('[BotsManager] üîç –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:', {
            exists: !!parentPanel,
            display: parentPanel ? window.getComputedStyle(parentPanel).display : 'N/A',
            visibility: parentPanel ? window.getComputedStyle(parentPanel).visibility : 'N/A',
            height: parentPanel ? window.getComputedStyle(parentPanel).height : 'N/A',
            clientHeight: parentPanel ? parentPanel.clientHeight : 'N/A',
            offsetHeight: parentPanel ? parentPanel.offsetHeight : 'N/A'
        });
        
        if (promptElement) {
            promptElement.style.display = 'none';
            console.log('[BotsManager] ‚úÖ –°–∫—Ä—ã—Ç prompt —ç–ª–µ–º–µ–Ω—Ç');
        } else {
            console.warn('[BotsManager] ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç selectCoinPrompt –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (controlElement) {
            controlElement.style.display = 'block';
            console.log('[BotsManager] ‚úÖ –ü–æ–∫–∞–∑–∞–Ω control —ç–ª–µ–º–µ–Ω—Ç');
            console.log('[BotsManager] üîç –°—Ç–∏–ª–∏ control —ç–ª–µ–º–µ–Ω—Ç–∞:', {
                display: controlElement.style.display,
                visibility: window.getComputedStyle(controlElement).visibility,
                opacity: window.getComputedStyle(controlElement).opacity,
                position: window.getComputedStyle(controlElement).position,
                zIndex: window.getComputedStyle(controlElement).zIndex,
                height: window.getComputedStyle(controlElement).height,
                minHeight: window.getComputedStyle(controlElement).minHeight,
                width: window.getComputedStyle(controlElement).width,
                clientHeight: controlElement.clientHeight,
                offsetHeight: controlElement.offsetHeight
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            console.log('[BotsManager] üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ control —ç–ª–µ–º–µ–Ω—Ç–∞:', {
                innerHTML: controlElement.innerHTML.substring(0, 200) + '...',
                childrenCount: controlElement.children.length,
                firstChild: controlElement.firstChild ? controlElement.firstChild.tagName : 'null'
            });
        } else {
            console.warn('[BotsManager] ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç botControlInterface –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (tradesSection) {
            tradesSection.style.display = 'block';
            console.log('[BotsManager] ‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ trades —Å–µ–∫—Ü–∏—è');
        } else {
            console.warn('[BotsManager] ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç tradesInfoSection –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    updateCoinInfo() {
        if (!this.selectedCoin) return;

        const coin = this.selectedCoin;
        console.log('[BotsManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–µ—Ç–µ:', coin);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const symbolElement = document.getElementById('selectedCoinSymbol');
        const priceElement = document.getElementById('selectedCoinPrice');
        const rsiElement = document.getElementById('selectedCoinRSI');
        const trendElement = document.getElementById('selectedCoinTrend');
        const emaElement = document.getElementById('selectedCoinEMA');
        const zoneElement = document.getElementById('selectedCoinZone');
        const signalElement = document.getElementById('selectedCoinSignal');
        const changeElement = document.getElementById('selectedCoinChange');

        console.log('[BotsManager] üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', {
            symbolElement: !!symbolElement,
            priceElement: !!priceElement,
            rsiElement: !!rsiElement,
            trendElement: !!trendElement,
            emaElement: !!emaElement,
            zoneElement: !!zoneElement,
            signalElement: !!signalElement,
            changeElement: !!changeElement
        });

        if (symbolElement) {
            const exchangeUrl = this.getExchangeLink(coin.symbol, 'bybit');
            symbolElement.innerHTML = `
                ü™ô ${coin.symbol} 
                <a href="${exchangeUrl}" target="_blank" class="exchange-link" title="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Bybit">
                    üîó
                </a>
            `;
            console.log('[BotsManager] ‚úÖ –°–∏–º–≤–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω:', coin.symbol);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ RSI –¥–∞–Ω–Ω—ã—Ö
        if (priceElement) {
            const price = coin.current_price || coin.mark_price || coin.last_price || coin.price || 0;
            priceElement.textContent = `$${price.toFixed(6)}`;
            console.log('[BotsManager] ‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', price);
        }
        
        if (rsiElement) {
            const rsi = coin.enhanced_rsi?.rsi_6h || coin.rsi6h || '-';
            rsiElement.textContent = rsi;
            rsiElement.className = `value rsi-indicator ${this.getRsiZoneClass(rsi)}`;
            console.log('[BotsManager] ‚úÖ RSI –æ–±–Ω–æ–≤–ª–µ–Ω:', rsi);
        }
        
        if (trendElement) {
            const trend = coin.trend6h || 'NEUTRAL';
            trendElement.textContent = trend;
            trendElement.className = `value trend-indicator ${trend}`;
            console.log('[BotsManager] ‚úÖ –¢—Ä–µ–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω:', trend);
        }
        
        if (emaElement) {
            const emaText = coin.ema_periods ? `EMA(${coin.ema_periods.ema_short},${coin.ema_periods.ema_long})` : '-';
            emaElement.textContent = emaText;
            emaElement.className = 'value ema-indicator';
            console.log('[BotsManager] ‚úÖ EMA –æ–±–Ω–æ–≤–ª–µ–Ω:', emaText);
        }
        
        if (zoneElement) {
            const zone = coin.rsi_zone || 'NEUTRAL';
            zoneElement.textContent = zone;
            console.log('[BotsManager] ‚úÖ –ó–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', zone);
        }
        
        if (signalElement) {
            const signal = coin.effective_signal || coin.signal || 'WAIT';
            signalElement.textContent = signal;
            signalElement.className = `value signal-indicator ${signal}`;
            console.log('[BotsManager] ‚úÖ –°–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω:', signal);
        }
        
        if (changeElement) {
            const change = coin.change24h || 0;
            changeElement.textContent = `${change > 0 ? '+' : ''}${change}%`;
            changeElement.style.color = change >= 0 ? 'var(--green-color)' : 'var(--red-color)';
            console.log('[BotsManager] ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', change);
        }
        
        console.log('[BotsManager] ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–µ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –º–æ–Ω–µ—Ç—ã
        this.updateActiveCoinIcons();
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–¢–ê–¢–£–° –ë–û–¢–ê
        setTimeout(() => {
            const botStatusItem = document.getElementById('botStatusItem');
            if (botStatusItem) {
                botStatusItem.style.display = 'flex';
                console.log('[BotsManager] üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–û–ö–ê–ó–ê–ù –°–¢–ê–¢–£–° –ë–û–¢–ê');
            }
        }, 100);
    }
    
    updateActiveCoinIcons() {
        if (!this.selectedCoin) return;
        
        const coin = this.selectedCoin;
        const activeStatusData = {};
        
        // –¢—Ä–µ–Ω–¥ —É–±–∏—Ä–∞–µ–º - –æ–Ω —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –≤—ã—à–µ –≤ –¢–†–ï–ù–î 6–ù
        
        // –ó–æ–Ω—É RSI —É–±–∏—Ä–∞–µ–º - –æ–Ω–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –≤—ã—à–µ –≤ –ó–û–ù–ê RSI
        
        // 2. –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
        let botStatus = '–ù–µ—Ç –±–æ—Ç–∞';
        if (this.activeBots && this.activeBots.length > 0) {
            const bot = this.activeBots.find(bot => bot.symbol === coin.symbol);
            if (bot) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º bot_status –∏–∑ API, –µ—Å–ª–∏ –µ—Å—Ç—å
                if (bot.bot_status) {
                    botStatus = bot.bot_status;
                } else if (bot.status === 'running') {
                    botStatus = '–ê–∫—Ç–∏–≤–µ–Ω';
                } else if (bot.status === 'waiting') {
                    botStatus = '–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞';
                } else if (bot.status === 'in_position_long') {
                    botStatus = '–ê–∫—Ç–∏–≤–µ–Ω';
                } else if (bot.status === 'in_position_short') {
                    botStatus = '–ê–∫—Ç–∏–≤–µ–Ω';
                } else {
                    botStatus = bot.status || '–ù–µ—Ç –±–æ—Ç–∞';
                }
            }
        }
        activeStatusData.bot = botStatus;
        
        // 3. –§–ò–õ–¨–¢–†–´ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º (Volume Confirmation) - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
        if (coin.volume_confirmation && coin.volume_confirmation !== 'NONE' && coin.volume_confirmation !== null) {
            activeStatusData.volume_confirmation = coin.volume_confirmation;
        } else if (coin.volume_confirmation_status && coin.volume_confirmation_status !== 'NONE') {
            activeStatusData.volume_confirmation = coin.volume_confirmation_status;
        } else if (coin.volume_status && coin.volume_status !== 'NONE') {
            activeStatusData.volume_confirmation = coin.volume_status;
        }
        
        // –°—Ç–æ—Ö–∞—Å—Ç–∏–∫ (Stochastic) - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
        let stochValue = null;
        if (coin.stochastic_rsi && coin.stochastic_rsi !== 'NONE' && coin.stochastic_rsi !== null) {
            stochValue = coin.stochastic_rsi;
        } else if (coin.stochastic_status && coin.stochastic_status !== 'NONE') {
            stochValue = coin.stochastic_status;
        } else if (coin.stochastic && coin.stochastic !== 'NONE') {
            stochValue = coin.stochastic;
        } else if (coin.stoch_rsi_k !== undefined && coin.stoch_rsi_k !== null) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
            const stochK = coin.stoch_rsi_k;
            const stochD = coin.stoch_rsi_d || 0;
            let stochStatus = '';
            let crossoverInfo = '';
            
            if (stochK < 20) {
                stochStatus = 'OVERSOLD';
                crossoverInfo = stochK > stochD ? ' (%K –≤—ã—à–µ %D - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)' : ' (%K –Ω–∏–∂–µ %D - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)';
                stochValue = `<span style="color: #44ff44;">–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å: %K=${stochK.toFixed(1)} (–Ω–∏–∂–µ 20) - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ü–µ–Ω—ã –≤–≤–µ—Ä—Ö.</span><br><span style="color: ${stochK > stochD ? '#44ff44' : '#ff4444'};">${stochK > stochD ? '–ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª' : '–ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª'}: %D=${stochD.toFixed(1)} (${stochK > stochD ? '%K –≤—ã—à–µ %D' : '%K –Ω–∏–∂–µ %D'})</span>`;
            } else if (stochK > 80) {
                stochStatus = 'OVERBOUGHT';
                crossoverInfo = stochK > stochD ? ' (%K –≤—ã—à–µ %D - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)' : ' (%K –Ω–∏–∂–µ %D - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)';
                stochValue = `<span style="color: #ff4444;">–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å: %K=${stochK.toFixed(1)} (–≤—ã—à–µ 80) - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ü–µ–Ω—ã –≤–Ω–∏–∑.</span><br><span style="color: ${stochK > stochD ? '#44ff44' : '#ff4444'};">${stochK > stochD ? '–ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª' : '–ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª'}: %D=${stochD.toFixed(1)} (${stochK > stochD ? '%K –≤—ã—à–µ %D' : '%K –Ω–∏–∂–µ %D'})</span>`;
            } else {
                stochStatus = 'NEUTRAL';
                crossoverInfo = stochK > stochD ? ' (%K –≤—ã—à–µ %D - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)' : ' (%K –Ω–∏–∂–µ %D - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)';
                stochValue = `<span style="color: #ffff44;">–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞: %K=${stochK.toFixed(1)} (–º–µ–∂–¥—É 20-80) - —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.</span><br><span style="color: ${stochK > stochD ? '#44ff44' : '#ff4444'};">${stochK > stochD ? '–ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª' : '–ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª'}: %D=${stochD.toFixed(1)} (${stochK > stochD ? '%K –≤—ã—à–µ %D' : '%K –Ω–∏–∂–µ %D'})</span>`;
            }
        } else if (coin.enhanced_rsi && coin.enhanced_rsi.confirmations) {
            const stochK = coin.enhanced_rsi.confirmations.stoch_rsi_k;
            const stochD = coin.enhanced_rsi.confirmations.stoch_rsi_d || 0;
            if (stochK !== undefined && stochK !== null) {
                let stochStatus = '';
                let crossoverInfo = '';
                
                if (stochK < 20) {
                    stochStatus = 'OVERSOLD';
                    crossoverInfo = stochK > stochD ? ' (%K –≤—ã—à–µ %D - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)' : ' (%K –Ω–∏–∂–µ %D - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)';
                    stochValue = `<span style="color: #44ff44;">–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å: %K=${stochK.toFixed(1)} (–Ω–∏–∂–µ 20) - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ü–µ–Ω—ã –≤–≤–µ—Ä—Ö.</span><br><span style="color: ${stochK > stochD ? '#44ff44' : '#ff4444'};">${stochK > stochD ? '–ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª' : '–ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª'}: %D=${stochD.toFixed(1)} (${stochK > stochD ? '%K –≤—ã—à–µ %D' : '%K –Ω–∏–∂–µ %D'})</span>`;
                } else if (stochK > 80) {
                    stochStatus = 'OVERBOUGHT';
                    crossoverInfo = stochK > stochD ? ' (%K –≤—ã—à–µ %D - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)' : ' (%K –Ω–∏–∂–µ %D - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)';
                    stochValue = `<span style="color: #ff4444;">–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å: %K=${stochK.toFixed(1)} (–≤—ã—à–µ 80) - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ü–µ–Ω—ã –≤–Ω–∏–∑.</span><br><span style="color: ${stochK > stochD ? '#44ff44' : '#ff4444'};">${stochK > stochD ? '–ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª' : '–ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª'}: %D=${stochD.toFixed(1)} (${stochK > stochD ? '%K –≤—ã—à–µ %D' : '%K –Ω–∏–∂–µ %D'})</span>`;
                } else {
                    stochStatus = 'NEUTRAL';
                    crossoverInfo = stochK > stochD ? ' (%K –≤—ã—à–µ %D - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)' : ' (%K –Ω–∏–∂–µ %D - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)';
                    stochValue = `<span style="color: #ffff44;">–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞: %K=${stochK.toFixed(1)} (–º–µ–∂–¥—É 20-80) - —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.</span><br><span style="color: ${stochK > stochD ? '#44ff44' : '#ff4444'};">${stochK > stochD ? '–ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª' : '–ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª'}: %D=${stochD.toFixed(1)} (${stochK > stochD ? '%K –≤—ã—à–µ %D' : '%K –Ω–∏–∂–µ %D'})</span>`;
                }
            }
        }
        
        if (stochValue) {
            activeStatusData.stochastic_rsi = stochValue;
        }
        
        // ExitScam –∑–∞—â–∏—Ç–∞ (ExitScam Protection) - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
        if (coin.exit_scam_status && coin.exit_scam_status !== 'NONE' && coin.exit_scam_status !== null) {
            activeStatusData.exit_scam = coin.exit_scam_status;
        } else if (coin.exit_scam && coin.exit_scam !== 'NONE') {
            activeStatusData.exit_scam = coin.exit_scam;
        } else if (coin.scam_status && coin.scam_status !== 'NONE') {
            activeStatusData.exit_scam = coin.scam_status;
        }
        
        // RSI Time Filter - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
        if (coin.rsi_time_filter && coin.rsi_time_filter !== 'NONE' && coin.rsi_time_filter !== null) {
            activeStatusData.rsi_time_filter = coin.rsi_time_filter;
        } else if (coin.time_filter && coin.time_filter !== 'NONE') {
            activeStatusData.rsi_time_filter = coin.time_filter;
        } else if (coin.rsi_time_status && coin.rsi_time_status !== 'NONE') {
            activeStatusData.rsi_time_filter = coin.rsi_time_status;
        }
        
        // Enhanced RSI Warning (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (coin.enhanced_rsi?.warning_type && coin.enhanced_rsi.warning_type !== 'ERROR') {
            activeStatusData.enhanced_warning = coin.enhanced_rsi.warning_type;
        }
        
        // Manual Position (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (coin.is_manual_position) {
            activeStatusData.manual_position = 'MANUAL';
        }
        
        // Maturity (–∑—Ä–µ–ª–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã)
        if (coin.is_mature === true) {
            const actualCandles = coin.candles_count || 'N/A';
            const minCandles = this.autoBotConfig?.min_candles_for_maturity || 400;
            activeStatusData.maturity = `–ó—Ä–µ–ª–∞—è –º–æ–Ω–µ—Ç–∞: ${actualCandles} > ${minCandles} —Å–≤–µ—á–µ–π - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏`;
        } else if (coin.is_mature === false) {
            const minCandles = this.autoBotConfig?.min_candles_for_maturity || 400;
            activeStatusData.maturity = `–ù–µ–∑—Ä–µ–ª–∞—è –º–æ–Ω–µ—Ç–∞, –º–µ–Ω–µ–µ ${minCandles} —Å–≤–µ—á–µ–π - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏`;
        }
        
        console.log('[BotsManager] üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫:', activeStatusData);
        console.log('[BotsManager] üîç –í–°–ï –î–ê–ù–ù–´–ï –ú–û–ù–ï–¢–´:', coin);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º –±–ª–æ–∫–µ
        this.updateCoinStatusIcons(activeStatusData);
        
        // –û–¢–õ–ê–î–ö–ê: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.forceShowAllFilters();
    }
    
    getRsiZone(rsi) {
        if (rsi === '-' || rsi === null || rsi === undefined) return 'NEUTRAL';
        if (rsi <= 30) return 'OVERSOLD';
        if (rsi >= 70) return 'OVERBOUGHT';
        return 'NEUTRAL';
    }
    
    updateCoinStatusIcons(activeStatusData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
        this.updateStatusIcon('rsiIcon', activeStatusData.zone);
        this.updateStatusIcon('trendIcon', activeStatusData.trend);
        this.updateStatusIcon('zoneIcon', activeStatusData.zone);
        this.updateStatusIcon('signalIcon', activeStatusData.signal);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        this.updateFilterItem('volumeConfirmationItem', 'selectedCoinVolumeConfirmation', 'volumeConfirmationIcon', 
                             activeStatusData.volume_confirmation, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º');
        
        this.updateFilterItem('stochasticItem', 'selectedCoinStochastic', 'stochasticIcon', 
                             activeStatusData.stochastic_rsi, '–°—Ç–æ—Ö–∞—Å—Ç–∏–∫');
        
        this.updateFilterItem('exitScamItem', 'selectedCoinExitScam', 'exitScamIcon', 
                             activeStatusData.exit_scam, 'ExitScam –∑–∞—â–∏—Ç–∞');
        
        this.updateFilterItem('rsiTimeFilterItem', 'selectedCoinRsiTimeFilter', 'rsiTimeFilterIcon', 
                             activeStatusData.rsi_time_filter, 'RSI Time Filter');
        
        this.updateFilterItem('maturityDiamondItem', 'selectedCoinMaturityDiamond', 'maturityDiamondIcon', 
                             activeStatusData.maturity, '–ó—Ä–µ–ª–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã');
        
        this.updateFilterItem('botStatusItem', 'selectedCoinBotStatus', 'botStatusIcon', 
                             activeStatusData.bot, '–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞');
    }
    
    updateStatusIcon(iconId, statusValue) {
        const iconElement = document.getElementById(iconId);
        if (iconElement && statusValue) {
            const icon = this.getStatusIcon('zone', statusValue); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–æ–Ω—É –∫–∞–∫ –±–∞–∑–æ–≤—É—é
            iconElement.textContent = icon;
            iconElement.style.display = 'inline';
        } else if (iconElement) {
            iconElement.style.display = 'none';
        }
    }
    
    updateFilterItem(itemId, valueId, iconId, statusValue, label) {
        const itemElement = document.getElementById(itemId);
        const valueElement = document.getElementById(valueId);
        const iconElement = document.getElementById(iconId);
        
        if (itemElement && valueElement && iconElement) {
            if (statusValue && statusValue !== 'NONE' && statusValue !== null && statusValue !== undefined) {
                itemElement.style.display = 'flex';
                valueElement.textContent = statusValue;
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å—Ç–∞—Ç—É—Å–∞
                let icon = '‚ùì';
                let description = '';
                
                if (label === '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º') {
                    if (statusValue.includes('CONFIRMED')) { icon = 'üìä'; description = '–û–±—ä–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'; }
                    else if (statusValue.includes('NOT_CONFIRMED')) { icon = '‚ùå'; description = '–û–±—ä–µ–º –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'; }
                    else if (statusValue.includes('LOW_VOLUME')) { icon = '‚ö†Ô∏è'; description = '–ù–∏–∑–∫–∏–π –æ–±—ä–µ–º'; }
                    else if (statusValue.includes('HIGH_VOLUME')) { icon = 'üìà'; description = '–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º'; }
                }
                else if (label === '–°—Ç–æ—Ö–∞—Å—Ç–∏–∫') {
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞ —Å HTML –∏ —Ü–≤–µ—Ç–∞–º–∏
                    if (statusValue.includes('<br>') || statusValue.includes('<span')) {
                        // –≠—Ç–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                        valueElement.innerHTML = statusValue;
                        return; // –í—ã—Ö–æ–¥–∏–º —Ä–∞–Ω–æ –¥–ª—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    }
                    
                    if (statusValue.includes('OVERSOLD')) { icon = 'üî¥'; description = 'Stochastic –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω'; }
                    else if (statusValue.includes('OVERBOUGHT')) { icon = 'üü¢'; description = 'Stochastic –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω'; }
                    else if (statusValue.includes('NEUTRAL')) { icon = 'üü°'; description = 'Stochastic –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'; }
                    else if (statusValue.includes('BULLISH')) { icon = 'üìà'; description = 'Stochastic –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª'; }
                    else if (statusValue.includes('BEARISH')) { icon = 'üìâ'; description = 'Stochastic –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª'; }
                }
                else if (label === 'ExitScam –∑–∞—â–∏—Ç–∞') {
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è ExitScam —Å —Ü–≤–µ—Ç–∞–º–∏
                    if (statusValue.includes('–ë–ª–æ–∫–∏—Ä—É–µ—Ç:')) {
                        valueElement.innerHTML = `<span style="color: #ff4444;">${statusValue}</span>`;
                        return; // –í—ã—Ö–æ–¥–∏–º —Ä–∞–Ω–æ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    } else if (statusValue.includes('–ë–µ–∑–æ–ø–∞—Å–Ω–æ:')) {
                        valueElement.innerHTML = `<span style="color: #44ff44;">${statusValue}</span>`;
                        return; // –í—ã—Ö–æ–¥–∏–º —Ä–∞–Ω–æ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    }
                    
                    if (statusValue.includes('SAFE')) { icon = 'üõ°Ô∏è'; description = 'ExitScam: –ë–µ–∑–æ–ø–∞—Å–Ω–æ'; }
                    else if (statusValue.includes('RISK')) { icon = '‚ö†Ô∏è'; description = 'ExitScam: –†–∏—Å–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'; }
                    else if (statusValue.includes('SCAM')) { icon = 'üö®'; description = 'ExitScam: –í–æ–∑–º–æ–∂–Ω—ã–π —Å–∫–∞–º'; }
                    else if (statusValue.includes('CHECKING')) { icon = 'üîç'; description = 'ExitScam: –ü—Ä–æ–≤–µ—Ä–∫–∞'; }
                }
                else if (label === 'RSI Time Filter') {
                    if (statusValue.includes('ALLOWED')) { icon = '‚úÖ'; description = 'RSI Time Filter —Ä–∞–∑—Ä–µ—à–µ–Ω'; }
                    else if (statusValue.includes('BLOCKED')) { icon = '‚ùå'; description = 'RSI Time Filter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'; }
                    else if (statusValue.includes('WAITING')) { icon = '‚è≥'; description = 'RSI Time Filter –æ–∂–∏–¥–∞–Ω–∏–µ'; }
                    else if (statusValue.includes('TIMEOUT')) { icon = '‚è∞'; description = 'RSI Time Filter —Ç–∞–π–º–∞—É—Ç'; }
                }
                else if (label === '–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞') {
                    if (statusValue === '–ù–µ—Ç –±–æ—Ç–∞') { 
                        icon = '‚ùì'; 
                        description = '–ë–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω';
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–∫–ª—é—á–∏—Ç—å" —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–Ω–µ—Ç —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ LONG/SHORT
                        const enableBotBtn = document.getElementById('enableBotBtn');
                        if (enableBotBtn && this.selectedCoin) {
                            const signal = this.selectedCoin.signal;
                            if (signal === 'ENTER_LONG' || signal === 'ENTER_SHORT') {
                                enableBotBtn.style.display = 'inline-block';
                            } else {
                                enableBotBtn.style.display = 'none';
                            }
                        }
                    }
                    else if (statusValue.includes('running')) { 
                        icon = 'üü¢'; 
                        description = '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç';
                        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
                        const enableBotBtn = document.getElementById('enableBotBtn');
                        if (enableBotBtn) enableBotBtn.style.display = 'none';
                    }
                    else if (statusValue.includes('waiting')) { icon = 'üîµ'; description = '–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞'; }
                    else if (statusValue.includes('error')) { icon = 'üî¥'; description = '–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ'; }
                    else if (statusValue.includes('stopped')) { icon = 'üî¥'; description = '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'; }
                    else if (statusValue.includes('in_position')) { icon = 'üü£'; description = '–í –ø–æ–∑–∏—Ü–∏–∏'; }
                    else if (statusValue.includes('paused')) { icon = '‚ö™'; description = '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'; }
                }
                
                iconElement.textContent = icon;
                iconElement.title = `${label}: ${description || statusValue}`;
                valueElement.title = `${label}: ${description || statusValue}`;
            } else {
                itemElement.style.display = 'none';
            }
        }
    }
    
    getStatusIcon(statusType, statusValue) {
        const iconMap = {
            'OVERSOLD': 'üî¥',
            'OVERBOUGHT': 'üü¢',
            'NEUTRAL': 'üü°',
            'UP': 'üìà',
            'DOWN': 'üìâ'
        };
        
        return iconMap[statusValue] || '';
    }
    
    forceShowAllFilters() {
        console.log('[BotsManager] üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–û–ö–ê–ó–´–í–ê–ï–ú –í–°–ï –§–ò–õ–¨–¢–†–´');
        
        if (!this.selectedCoin) return;
        const coin = this.selectedCoin;
        
        // –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ coin –∏ –∫–æ–Ω—Ñ–∏–≥–∞
        const realFilters = [];
        
        // 1. –†—É—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        if (coin.is_manual_position) {
            realFilters.push({
                itemId: 'manualPositionItem',
                valueId: 'selectedCoinManualPosition',
                iconId: 'manualPositionIcon',
                value: '–†—É—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è',
                icon: '',
                description: '–ú–æ–Ω–µ—Ç–∞ –≤ —Ä—É—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏'
            });
        }
        
        // 2. –ó—Ä–µ–ª–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã
        if (coin.is_mature) {
            const actualCandles = coin.candles_count || 'N/A';
            const minCandles = this.autoBotConfig?.min_candles_for_maturity || 400;
            realFilters.push({
                itemId: 'maturityDiamondItem',
                valueId: 'selectedCoinMaturityDiamond',
                iconId: 'maturityDiamondIcon',
                value: `–ó—Ä–µ–ª–∞—è –º–æ–Ω–µ—Ç–∞: ${actualCandles} > ${minCandles} —Å–≤–µ—á–µ–π - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏`,
                icon: '',
                description: '–ú–æ–Ω–µ—Ç–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
            });
        } else if (coin.is_mature === false) {
            const minCandles = this.autoBotConfig?.min_candles_for_maturity || 400;
            realFilters.push({
                itemId: 'maturityDiamondItem',
                valueId: 'selectedCoinMaturityDiamond',
                iconId: 'maturityDiamondIcon',
                value: `–ù–µ–∑—Ä–µ–ª–∞—è –º–æ–Ω–µ—Ç–∞, –º–µ–Ω–µ–µ ${minCandles} —Å–≤–µ—á–µ–π - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏`,
                icon: '',
                description: '–ú–æ–Ω–µ—Ç–∞ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
            });
        }
        
        // 3. Enhanced RSI –¥–∞–Ω–Ω—ã–µ
        if (coin.enhanced_rsi && coin.enhanced_rsi.enabled) {
            const enhancedRsi = coin.enhanced_rsi;
            
            // –í—Ä–µ–º—è –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
            if (enhancedRsi.extreme_duration > 0) {
                realFilters.push({
                    itemId: 'extremeDurationItem',
                    valueId: 'selectedCoinExtremeDuration',
                    iconId: 'extremeDurationIcon',
                    value: `${enhancedRsi.extreme_duration}üïê`,
                    icon: '',
                    description: '–í—Ä–µ–º—è –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ RSI'
                });
            }
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if (enhancedRsi.confirmations) {
                const conf = enhancedRsi.confirmations;
                
                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º
                if (conf.volume) {
                    realFilters.push({
                        itemId: 'volumeConfirmationItem',
                        valueId: 'selectedCoinVolumeConfirmation',
                        iconId: 'volumeConfirmationIcon',
                        value: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –æ–±—ä–µ–º–æ–º',
                        icon: 'üìä',
                        description: '–û–±—ä–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª'
                    });
                }
                
                // –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
                if (conf.divergence) {
                    const divIcon = conf.divergence === 'BULLISH_DIVERGENCE' ? 'üìà' : 'üìâ';
                    realFilters.push({
                        itemId: 'divergenceItem',
                        valueId: 'selectedCoinDivergence',
                        iconId: 'divergenceIcon',
                        value: conf.divergence,
                        icon: divIcon,
                        description: `–î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: ${conf.divergence}`
                    });
                }
                
                // Stochastic RSI
                if (conf.stoch_rsi_k !== undefined && conf.stoch_rsi_k !== null) {
                    const stochK = conf.stoch_rsi_k;
                    const stochD = conf.stoch_rsi_d || 0;
                    
                    let stochIcon, stochStatus, stochDescription;
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                    if (stochK < 20) {
                        stochIcon = '‚¨áÔ∏è';
                        stochStatus = 'OVERSOLD';
                        stochDescription = '–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å: %K –Ω–∏–∂–µ 20 - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö';
                    } else if (stochK > 80) {
                        stochIcon = '‚¨ÜÔ∏è';
                        stochStatus = 'OVERBOUGHT';
                        stochDescription = '–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å: %K –≤—ã—à–µ 80 - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑';
                    } else {
                        stochIcon = '‚û°Ô∏è';
                        stochStatus = 'NEUTRAL';
                        stochDescription = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞: %K –º–µ–∂–¥—É 20-80 - —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è';
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏
                    let crossoverInfo = '';
                    if (stochK > stochD) {
                        crossoverInfo = ' (%K –≤—ã—à–µ %D - –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)';
                    } else if (stochK < stochD) {
                        crossoverInfo = ' (%K –Ω–∏–∂–µ %D - –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)';
                    } else {
                        crossoverInfo = ' (%K = %D - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ)';
                    }
                    
                    const fullDescription = `Stochastic RSI: ${stochDescription}${crossoverInfo}`;
                    
                    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    let detailedValue = '';
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏
                    let signalInfo = '';
                    if (stochK > stochD) {
                        signalInfo = `<span style="color: #44ff44;">–ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª: %D=${stochD.toFixed(1)} (%K –≤—ã—à–µ %D)</span>`;
                    } else if (stochK < stochD) {
                        signalInfo = `<span style="color: #ff4444;">–ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª: %D=${stochD.toFixed(1)} (%K –Ω–∏–∂–µ %D)</span>`;
                    } else {
                        signalInfo = `<span style="color: #ffff44;">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: %D=${stochD.toFixed(1)} (%K = %D)</span>`;
                    }
                    
                    if (stochStatus === 'OVERSOLD') {
                        detailedValue = `<span style="color: #44ff44;">–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å: %K=${stochK.toFixed(1)} (–Ω–∏–∂–µ 20) - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ü–µ–Ω—ã –≤–≤–µ—Ä—Ö.</span><br>${signalInfo}`;
                    } else if (stochStatus === 'OVERBOUGHT') {
                        detailedValue = `<span style="color: #ff4444;">–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å: %K=${stochK.toFixed(1)} (–≤—ã—à–µ 80) - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ü–µ–Ω—ã –≤–Ω–∏–∑.</span><br>${signalInfo}`;
                    } else {
                        detailedValue = `<span style="color: #ffff44;">–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞: %K=${stochK.toFixed(1)} (–º–µ–∂–¥—É 20-80) - —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.</span><br>${signalInfo}`;
                    }
                    
                    realFilters.push({
                        itemId: 'stochasticRsiItem',
                        valueId: 'selectedCoinStochasticRsi',
                        iconId: 'stochasticRsiIcon',
                        value: detailedValue,
                        icon: '',
                        description: fullDescription
                    });
                }
            }
            
            // Warning —Ç–∏–ø—ã
            if (enhancedRsi.warning_type && enhancedRsi.warning_type !== 'ERROR') {
                const warningType = enhancedRsi.warning_type;
                const warningMessage = enhancedRsi.warning_message || '';
                
                if (warningType === 'EXTREME_OVERSOLD_LONG') {
                    realFilters.push({
                        itemId: 'extremeOversoldItem',
                        valueId: 'selectedCoinExtremeOversold',
                        iconId: 'extremeOversoldIcon',
                        value: 'EXTREME_OVERSOLD_LONG',
                        icon: '‚ö†Ô∏è',
                        description: `–í–ù–ò–ú–ê–ù–ò–ï: ${warningMessage}. –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è LONG`
                    });
                } else if (warningType === 'EXTREME_OVERBOUGHT_LONG') {
                    realFilters.push({
                        itemId: 'extremeOverboughtItem',
                        valueId: 'selectedCoinExtremeOverbought',
                        iconId: 'extremeOverboughtIcon',
                        value: 'EXTREME_OVERBOUGHT_LONG',
                        icon: '‚ö†Ô∏è',
                        description: `–í–ù–ò–ú–ê–ù–ò–ï: ${warningMessage}. –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è SHORT`
                    });
                } else if (warningType === 'OVERSOLD') {
                    realFilters.push({
                        itemId: 'oversoldWarningItem',
                        valueId: 'selectedCoinOversoldWarning',
                        iconId: 'oversoldWarningIcon',
                        value: 'OVERSOLD',
                        icon: 'üü¢',
                        description: warningMessage
                    });
                } else if (warningType === 'OVERBOUGHT') {
                    realFilters.push({
                        itemId: 'overboughtWarningItem',
                        valueId: 'selectedCoinOverboughtWarning',
                        iconId: 'overboughtWarningIcon',
                        value: 'OVERBOUGHT',
                        icon: 'üî¥',
                        description: warningMessage
                    });
                }
            }
        }
        
        // 4. RSI Time Filter
        if (coin.time_filter_info) {
            const timeFilter = coin.time_filter_info;
            const isBlocked = timeFilter.blocked;
            const reason = timeFilter.reason || '';
            const calmCandles = timeFilter.calm_candles || 0;
            
            realFilters.push({
                itemId: 'rsiTimeFilterItem',
                valueId: 'selectedCoinRsiTimeFilter',
                iconId: 'rsiTimeFilterIcon',
                value: isBlocked ? `–ë–ª–æ–∫–∏—Ä—É–µ—Ç: ${reason}` : `–†–∞–∑—Ä–µ—à–µ–Ω–æ: ${reason}`,
                icon: isBlocked ? '‚è∞' : '‚è±Ô∏è',
                description: `RSI Time Filter: ${reason}${calmCandles > 0 ? ` (${calmCandles} —Å–ø–æ–∫–æ–π–Ω—ã—Ö —Å–≤–µ—á–µ–π)` : ''}`
            });
        }
        
        // 5. ExitScam —Ñ–∏–ª—å—Ç—Ä
        if (coin.exit_scam_info) {
            const exitScam = coin.exit_scam_info;
            const isBlocked = exitScam.blocked;
            const reason = exitScam.reason || '';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            let coloredValue = '';
            if (isBlocked) {
                coloredValue = `<span style="color: #ff4444;">–ë–ª–æ–∫–∏—Ä—É–µ—Ç: ${reason}</span>`;
            } else {
                coloredValue = `<span style="color: #44ff44;">–ë–µ–∑–æ–ø–∞—Å–Ω–æ: ${reason}</span>`;
            }
            
            realFilters.push({
                itemId: 'exitScamItem',
                valueId: 'selectedCoinExitScam',
                iconId: 'exitScamIcon',
                value: coloredValue,
                icon: '',
                description: `ExitScam —Ñ–∏–ª—å—Ç—Ä: ${reason}`
            });
        }
        
        realFilters.forEach(filter => {
            const itemElement = document.getElementById(filter.itemId);
            const valueElement = document.getElementById(filter.valueId);
            const iconElement = document.getElementById(filter.iconId);
            
            if (itemElement && valueElement && iconElement) {
                itemElement.style.display = 'flex';
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º innerHTML –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–≤–µ—Ç–Ω–æ–≥–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                valueElement.innerHTML = filter.value;
                iconElement.textContent = '';
                iconElement.title = filter.description;
                valueElement.title = filter.description;
                console.log(`[BotsManager] ‚úÖ –ü–æ–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä: ${filter.itemId}`);
            }
        });
    }

    filterCoins(searchTerm) {
        const items = document.querySelectorAll('.coin-item');
        const term = searchTerm.toLowerCase();
        
        items.forEach(item => {
            const symbol = item.dataset.symbol.toLowerCase();
            const visible = symbol.includes(term);
            item.style.display = visible ? 'block' : 'none';
        });
    }

    applyRsiFilter(filter) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
        this.currentRsiFilter = filter;
        
        const items = document.querySelectorAll('.coin-item');
        
        items.forEach(item => {
            let visible = true;
            
            switch(filter) {
                case 'buy-zone':
                    visible = item.classList.contains('buy-zone');
                    break;
                case 'sell-zone':
                    visible = item.classList.contains('sell-zone');
                    break;
                case 'trend-up':
                    visible = item.classList.contains('trend-up');
                    break;
                case 'trend-down':
                    visible = item.classList.contains('trend-down');
                    break;
                case 'enter-long':
                    visible = item.classList.contains('enter-long');
                    break;
                case 'enter-short':
                    visible = item.classList.contains('enter-short');
                    break;
                case 'manual-position':
                    visible = item.classList.contains('manual-position');
                    break;
                case 'mature-coins':
                    visible = item.classList.contains('mature-coin');
                    break;
                case 'all':
                default:
                    visible = true;
                    break;
            }
            
            item.style.display = visible ? 'block' : 'none';
        });
        
        this.logDebug(`[BotsManager] üîç –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä: ${filter}`);
    }

    restoreFilterState() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞
        document.querySelectorAll('.rsi-filter-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.filter === this.currentRsiFilter) {
                btn.classList.add('active');
            }
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        this.applyRsiFilter(this.currentRsiFilter);
        
        this.logDebug(`[BotsManager] üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä: ${this.currentRsiFilter}`);
    }

    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
    async createBot() {
        console.log('[BotsManager] üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞...');
        
        if (!this.selectedCoin) {
            console.log('[BotsManager] ‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã!');
            this.showNotification('‚ö†Ô∏è ' + this.translate('select_coin_to_create_bot'), 'warning');
            return;
        }
        
        console.log(`[BotsManager] ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è ${this.selectedCoin.symbol}`);
        console.log(`[BotsManager] üìä RSI —Ç–µ–∫—É—â–∏–π: ${this.selectedCoin.rsi6h || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        this.showNotification(`üîÑ ${this.translate('creating_bot_for')} ${this.selectedCoin.symbol}...`, 'info');
        
        try {
            // –°–æ–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const duplicateSettings = this.collectDuplicateSettings();
            
            const config = {
                volume_mode: document.getElementById('volumeModeSelect')?.value || 'usdt',
                volume_value: parseFloat(document.getElementById('volumeValueInput')?.value || '10'),
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
                ...duplicateSettings
            };
            
            console.log('[BotsManager] üìä –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞:', config);
            console.log('[BotsManager] üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞...');
            
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/create`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    symbol: this.selectedCoin.symbol,
                    config: config
                })
            });
            
            console.log(`[BotsManager] üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å ${response.status}`);
            const data = await response.json();
            console.log('[BotsManager] üì• –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
            
            if (data.success) {
                console.log('[BotsManager] ‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', data);
                console.log(`[BotsManager] üéØ ID –±–æ—Ç–∞: ${data.bot?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                console.log(`[BotsManager] üìà –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${data.bot?.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                
                this.showNotification(`‚úÖ –ë–æ—Ç –¥–ª—è ${this.selectedCoin.symbol} –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!`, 'success');
                
                // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                console.log('[BotsManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                const newBot = {
                    symbol: this.selectedCoin.symbol,
                    status: data.bot?.status || 'running',
                    volume_mode: data.bot?.volume_mode || 'usdt',
                    volume_value: data.bot?.volume_value || 10,
                    created_at: data.bot?.created_at || new Date().toISOString(),
                    unrealized_pnl: data.bot?.unrealized_pnl || 0,
                    entry_price: data.bot?.entry_price || null,
                    position_side: data.bot?.position_side || null,
                    rsi_data: this.selectedCoin
                };
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
                if (!this.activeBots) this.activeBots = [];
                const existingIndex = this.activeBots.findIndex(bot => bot.symbol === this.selectedCoin.symbol);
                if (existingIndex >= 0) {
                    this.activeBots[existingIndex] = newBot;
                } else {
                    this.activeBots.push(newBot);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
                console.log('[BotsManager] üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞...');
                this.updateBotStatus();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                console.log('[BotsManager] üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
                this.updateBotControlButtons();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
                console.log('[BotsManager] üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...');
                await this.loadActiveBotsData();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —Å –ø–æ–º–µ—Ç–∫–∞–º–∏ –æ –±–æ—Ç–∞—Ö
                this.logDebug('[BotsManager] üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç —Å –ø–æ–º–µ—Ç–∫–∞–º–∏...');
                this.updateCoinsListWithBotStatus();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–ë–æ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ"
                console.log('[BotsManager] üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ "–ë–æ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ"...');
                this.updateActiveBotsTab();
                
                console.log('[BotsManager] ‚úÖ –í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
                
            } else {
                console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', data.error);
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: ${data.error}`, 'error');
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', error);
            this.showNotification('‚ùå ' + this.translate('connection_error_bot_service'), 'error');
        }
    }
    
    collectDuplicateSettings() {
        console.log('[BotsManager] üìã –°–±–æ—Ä –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        const settings = {};
        
        // RSI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const rsiLongEl = document.getElementById('rsiLongThresholdDup');
        if (rsiLongEl && rsiLongEl.value) settings.rsi_long_threshold = parseInt(rsiLongEl.value);
        
        const rsiShortEl = document.getElementById('rsiShortThresholdDup');
        if (rsiShortEl && rsiShortEl.value) settings.rsi_short_threshold = parseInt(rsiShortEl.value);
        
        const rsiExitLongEl = document.getElementById('rsiExitLongDup');
        if (rsiExitLongEl && rsiExitLongEl.value) settings.rsi_exit_long = parseInt(rsiExitLongEl.value);
        
        const rsiExitShortEl = document.getElementById('rsiExitShortDup');
        if (rsiExitShortEl && rsiExitShortEl.value) settings.rsi_exit_short = parseInt(rsiExitShortEl.value);
        
        // –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
        const maxLossEl = document.getElementById('maxLossPercentDup');
        if (maxLossEl && maxLossEl.value) settings.max_loss_percent = parseFloat(maxLossEl.value);
        
        const trailingActivationEl = document.getElementById('trailingStopActivationDup');
        if (trailingActivationEl && trailingActivationEl.value) settings.trailing_stop_activation = parseFloat(trailingActivationEl.value);
        
        const trailingDistanceEl = document.getElementById('trailingStopDistanceDup');
        if (trailingDistanceEl && trailingDistanceEl.value) settings.trailing_stop_distance = parseFloat(trailingDistanceEl.value);
        
        const maxHoursEl = document.getElementById('maxPositionHoursDup');
        if (maxHoursEl) {
            const minutes = parseInt(maxHoursEl.value) || 0;
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
            settings.max_position_hours = minutes * 60;
        }
        
        const breakEvenEl = document.getElementById('breakEvenProtectionDup');
        if (breakEvenEl) settings.break_even_protection = breakEvenEl.checked;
        
        const breakEvenTriggerEl = document.getElementById('breakEvenTriggerDup');
        if (breakEvenTriggerEl && breakEvenTriggerEl.value) settings.break_even_trigger = parseFloat(breakEvenTriggerEl.value);
        
        console.log('[BotsManager] üìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);
        return settings;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–æ–Ω–µ—Ç
    async loadIndividualSettings(symbol) {
        if (!symbol) return null;
        
        try {
            console.log(`[BotsManager] üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${symbol}`);
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/individual-settings/${encodeURIComponent(symbol)}`);
            
            // 404 - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç
            if (response.status === 404) {
                console.log(`[BotsManager] ‚ÑπÔ∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (404)`);
                return null;
            }
            
            const data = await response.json();
            
            if (data.success) {
                console.log(`[BotsManager] ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${symbol} –∑–∞–≥—Ä—É–∂–µ–Ω—ã:`, data.settings);
                return data.settings;
            } else {
                console.log(`[BotsManager] ‚ÑπÔ∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                return null;
            }
        } catch (error) {
            console.error(`[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${symbol}:`, error);
            return null;
        }
    }

    async saveIndividualSettings(symbol, settings) {
        if (!symbol || !settings) return false;
        
        try {
            console.log(`[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${symbol}:`, settings);
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/individual-settings/${encodeURIComponent(symbol)}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(settings)
            });
            
            const data = await response.json();
            if (data.success) {
                console.log(`[BotsManager] ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
                this.showNotification(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`, 'success');
                return true;
            } else {
                console.error(`[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${data.error}`);
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${data.error}`, 'error');
                return false;
            }
        } catch (error) {
            console.error(`[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${symbol}:`, error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', 'error');
            return false;
        }
    }

    async deleteIndividualSettings(symbol) {
        if (!symbol) return false;
        
        try {
            console.log(`[BotsManager] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${symbol}`);
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/individual-settings/${encodeURIComponent(symbol)}`, {
                method: 'DELETE'
            });
            
            const data = await response.json();
            if (data.success) {
                console.log(`[BotsManager] ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${symbol} —É–¥–∞–ª–µ–Ω—ã`);
                this.showNotification(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${symbol} —Å–±—Ä–æ—à–µ–Ω—ã –∫ –æ–±—â–∏–º`, 'success');
                return true;
            } else {
                console.error(`[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${data.error}`);
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${data.error}`, 'error');
                return false;
            }
        } catch (error) {
            console.error(`[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${symbol}:`, error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', 'error');
            return false;
        }
    }

    async copySettingsToAllCoins(symbol) {
        if (!symbol) return false;
        
        try {
            console.log(`[BotsManager] üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ${symbol} –∫–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º`);
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/individual-settings/${encodeURIComponent(symbol)}/copy-to-all`, {
                method: 'POST'
            });
            
            const data = await response.json();
            if (data.success) {
                console.log(`[BotsManager] ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ${symbol} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∫ ${data.copied_count} –º–æ–Ω–µ—Ç–∞–º`);
                this.showNotification(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ ${data.copied_count} –º–æ–Ω–µ—Ç–∞–º`, 'success');
                return true;
            } else {
                console.error(`[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${data.error}`);
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${data.error}`, 'error');
                return false;
            }
        } catch (error) {
            console.error(`[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ${symbol}:`, error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏', 'error');
            return false;
        }
    }

    applyIndividualSettingsToUI(settings) {
        if (!settings) return;
        
        console.log('[BotsManager] üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ UI:', settings);
        
        // RSI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const rsiLongEl = document.getElementById('rsiLongThresholdDup');
        if (rsiLongEl && settings.rsi_long_threshold !== undefined) {
            rsiLongEl.value = settings.rsi_long_threshold;
        }
        
        const rsiShortEl = document.getElementById('rsiShortThresholdDup');
        if (rsiShortEl && settings.rsi_short_threshold !== undefined) {
            rsiShortEl.value = settings.rsi_short_threshold;
        }
        
        const rsiExitLongEl = document.getElementById('rsiExitLongDup');
        if (rsiExitLongEl && settings.rsi_exit_long !== undefined) {
            rsiExitLongEl.value = settings.rsi_exit_long;
        }
        
        const rsiExitShortEl = document.getElementById('rsiExitShortDup');
        if (rsiExitShortEl && settings.rsi_exit_short !== undefined) {
            rsiExitShortEl.value = settings.rsi_exit_short;
        }
        
        // –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
        const maxLossEl = document.getElementById('maxLossPercentDup');
        if (maxLossEl && settings.max_loss_percent !== undefined) {
            maxLossEl.value = settings.max_loss_percent;
        }
        
        const trailingActivationEl = document.getElementById('trailingStopActivationDup');
        if (trailingActivationEl && settings.trailing_stop_activation !== undefined) {
            trailingActivationEl.value = settings.trailing_stop_activation;
        }
        
        const trailingDistanceEl = document.getElementById('trailingStopDistanceDup');
        if (trailingDistanceEl && settings.trailing_stop_distance !== undefined) {
            trailingDistanceEl.value = settings.trailing_stop_distance;
        }
        
        const maxHoursEl = document.getElementById('maxPositionHoursDup');
        if (maxHoursEl && settings.max_position_hours !== undefined) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
            maxHoursEl.value = Math.round(settings.max_position_hours / 60);
        }
        
        const breakEvenEl = document.getElementById('breakEvenProtectionDup');
        if (breakEvenEl && settings.break_even_protection !== undefined) {
            breakEvenEl.checked = settings.break_even_protection;
        }
        
        const breakEvenTriggerEl = document.getElementById('breakEvenTriggerDup');
        if (breakEvenTriggerEl && settings.break_even_trigger !== undefined) {
            breakEvenTriggerEl.value = settings.break_even_trigger;
        }
        
        // –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const avoidDownTrendEl = document.getElementById('avoidDownTrendDup');
        if (avoidDownTrendEl && settings.avoid_down_trend !== undefined) {
            avoidDownTrendEl.checked = settings.avoid_down_trend;
        }
        
        const avoidUpTrendEl = document.getElementById('avoidUpTrendDup');
        if (avoidUpTrendEl && settings.avoid_up_trend !== undefined) {
            avoidUpTrendEl.checked = settings.avoid_up_trend;
        }
        
        const enableMaturityEl = document.getElementById('enableMaturityCheckDup');
        if (enableMaturityEl && settings.enable_maturity_check !== undefined) {
            enableMaturityEl.checked = settings.enable_maturity_check;
        }
        
        // –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏
        const volumeModeEl = document.getElementById('volumeModeSelect');
        if (volumeModeEl && settings.volume_mode !== undefined) {
            volumeModeEl.value = settings.volume_mode;
        }
        
        const volumeValueEl = document.getElementById('volumeValueInput');
        if (volumeValueEl && settings.volume_value !== undefined) {
            volumeValueEl.value = settings.volume_value;
        }
        
        console.log('[BotsManager] ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ UI');
    }

    updateIndividualSettingsStatus(hasSettings) {
        const statusEl = document.getElementById('individualSettingsStatus');
        if (statusEl) {
            if (hasSettings) {
                statusEl.innerHTML = '<span style="color: #4CAF50;">‚úÖ –ï—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</span>';
            } else {
                statusEl.innerHTML = '<span style="color: #888;">–ù–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã</span>';
            }
        }
    }

    async loadAndApplyIndividualSettings(symbol) {
        if (!symbol) return;
        
        try {
            console.log(`[BotsManager] üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${symbol}`);
            const settings = await this.loadIndividualSettings(symbol);
            
            if (settings) {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ UI
                this.applyIndividualSettingsToUI(settings);
                this.updateIndividualSettingsStatus(true);
                console.log(`[BotsManager] ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${symbol} –ø—Ä–∏–º–µ–Ω–µ–Ω—ã`);
            } else {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º UI –∫ –æ–±—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                this.resetToGeneralSettings();
                this.updateIndividualSettingsStatus(false);
                console.log(`[BotsManager] ‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${symbol}`);
            }
        } catch (error) {
            console.error(`[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${symbol}:`, error);
            this.updateIndividualSettingsStatus(false);
        }
    }

    resetToGeneralSettings() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –æ–±—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        // –≠—Ç–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –∑–∞–≥—Ä—É–∑–∏–≤ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω–∏–≤ –∏—Ö –∫ UI
        console.log('[BotsManager] üîÑ –°–±—Ä–æ—Å –∫ –æ–±—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–±—Ä–æ—Å–∞ –∫ –æ–±—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    }

    initializeIndividualSettingsButtons() {
        console.log('[BotsManager] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const saveIndividualBtn = document.getElementById('saveIndividualSettingsBtn');
        if (saveIndividualBtn) {
            saveIndividualBtn.addEventListener('click', async () => {
                if (!this.selectedCoin) {
                    this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'warning');
                    return;
                }
                
                const settings = this.collectDuplicateSettings();
                await this.saveIndividualSettings(this.selectedCoin.symbol, settings);
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const loadIndividualBtn = document.getElementById('loadIndividualSettingsBtn');
        if (loadIndividualBtn) {
            loadIndividualBtn.addEventListener('click', async () => {
                if (!this.selectedCoin) {
                    this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'warning');
                    return;
                }
                
                await this.loadAndApplyIndividualSettings(this.selectedCoin.symbol);
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∫ –æ–±—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        const resetIndividualBtn = document.getElementById('resetIndividualSettingsBtn');
        if (resetIndividualBtn) {
            resetIndividualBtn.addEventListener('click', async () => {
                if (!this.selectedCoin) {
                    this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'warning');
                    return;
                }
                
                await this.deleteIndividualSettings(this.selectedCoin.symbol);
                this.resetToGeneralSettings();
                this.updateIndividualSettingsStatus(false);
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º
        const copyToAllBtn = document.getElementById('copyToAllCoinsBtn');
        if (copyToAllBtn) {
            copyToAllBtn.addEventListener('click', async () => {
                if (!this.selectedCoin) {
                    this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'warning');
                    return;
                }
                
                const confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${this.selectedCoin.symbol} –∫–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º?`);
                if (confirmed) {
                    await this.copySettingsToAllCoins(this.selectedCoin.symbol);
                }
            });
        }
        
        console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    initializeQuickLaunchButtons() {
        console.log('[BotsManager] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...');
        
        // –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ LONG
        const quickStartLongBtn = document.getElementById('quickStartLongBtn');
        if (quickStartLongBtn) {
            quickStartLongBtn.addEventListener('click', async () => {
                if (!this.selectedCoin) {
                    this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞', 'warning');
                    return;
                }
                
                await this.quickLaunchBot('LONG');
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ SHORT
        const quickStartShortBtn = document.getElementById('quickStartShortBtn');
        if (quickStartShortBtn) {
            quickStartShortBtn.addEventListener('click', async () => {
                if (!this.selectedCoin) {
                    this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞', 'warning');
                    return;
                }
                
                await this.quickLaunchBot('SHORT');
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        const quickStopBtn = document.getElementById('quickStopBtn');
        if (quickStopBtn) {
            quickStopBtn.addEventListener('click', async () => {
                if (!this.selectedCoin) {
                    this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏', 'warning');
                    return;
                }
                
                await this.stopBot();
            });
        }
        
        console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    async quickLaunchBot(direction) {
        if (!this.selectedCoin) return;
        
        try {
            console.log(`[BotsManager] üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ ${direction} –±–æ—Ç–∞ –¥–ª—è ${this.selectedCoin.symbol}`);
            
            // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settings = this.collectDuplicateSettings();
            settings.volume_mode = document.getElementById('volumeModeSelect')?.value || 'usdt';
            settings.volume_value = parseFloat(document.getElementById('volumeValueInput')?.value || '10');
            
            // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/create`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    symbol: this.selectedCoin.symbol,
                    config: settings
                })
            });
            
            const data = await response.json();
            if (data.success) {
                this.showNotification(`‚úÖ ${direction} –±–æ—Ç –¥–ª—è ${this.selectedCoin.symbol} —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω`, 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                await this.loadActiveBotsData();
                this.updateBotControlButtons();
                this.updateBotStatus();
                this.updateCoinsListWithBotStatus();
                this.renderActiveBotsDetails();
            } else {
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${direction} –±–æ—Ç–∞: ${data.error}`, 'error');
            }
        } catch (error) {
            console.error(`[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ${direction} –±–æ—Ç–∞:`, error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞', 'error');
        }
    }

    async startBot(symbol) {
        const targetSymbol = symbol || this.selectedCoin?.symbol;
        if (!targetSymbol) {
            this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞', 'warning');
            return;
        }
        
        console.log(`[BotsManager] ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è ${targetSymbol}`);
        this.showNotification(`üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${targetSymbol}...`, 'info');

        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateBotStatusInUI(targetSymbol, 'starting');

        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/start`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ symbol: targetSymbol })
            });

            const data = await response.json();
            if (data.success) {
                this.showNotification(`‚úÖ –ë–æ—Ç ${targetSymbol} –∑–∞–ø—É—â–µ–Ω`, 'success');
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                this.updateBotStatusInUI(targetSymbol, 'active');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
                if (this.activeBots) {
                    const botIndex = this.activeBots.findIndex(bot => bot.symbol === targetSymbol);
                    if (botIndex >= 0) {
                        this.activeBots[botIndex].status = 'running';
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                await this.loadActiveBotsData();
                this.updateBotControlButtons();
                this.updateBotStatus();
                this.updateCoinsListWithBotStatus();
                this.renderActiveBotsDetails();
            } else {
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${data.error}`, 'error');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
            this.showNotification('‚ùå ' + this.translate('connection_error_bot_service'), 'error');
        }
    }

    async stopBot(symbol) {
        const targetSymbol = symbol || this.selectedCoin?.symbol;
        if (!targetSymbol) {
            this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞', 'warning');
            return;
        }
        
        console.log(`[BotsManager] ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –¥–ª—è ${targetSymbol}`);
        this.showNotification(`üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ${targetSymbol}...`, 'info');

        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateBotStatusInUI(targetSymbol, 'stopping');

        try {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/stop`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ symbol: targetSymbol }),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            const data = await response.json();
            if (data.success) {
                this.showNotification(`‚úÖ –ë–æ—Ç ${targetSymbol} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'success');
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                this.updateBotStatusInUI(targetSymbol, 'stopped');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
                if (this.activeBots) {
                    const botIndex = this.activeBots.findIndex(bot => bot.symbol === targetSymbol);
                    if (botIndex >= 0) {
                        this.activeBots[botIndex].status = 'paused'; // –∏–ª–∏ 'stopped'
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                await this.loadActiveBotsData();
                this.updateBotControlButtons();
                this.updateBotStatus();
                this.updateCoinsListWithBotStatus();
                this.renderActiveBotsDetails();
            } else {
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ${data.error}`, 'error');
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º UI –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                this.updateBotStatusInUI(targetSymbol, 'active');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', error);
            
            if (error.name === 'AbortError') {
                this.showNotification('‚è∞ –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞', 'error');
            } else {
                this.showNotification('‚ùå ' + this.translate('connection_error_bot_service'), 'error');
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º UI –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.updateBotStatusInUI(targetSymbol, 'active');
        }
    }

    async pauseBot(symbol) {
        const targetSymbol = symbol || this.selectedCoin?.symbol;
        if (!targetSymbol) {
            this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –ø–∞—É–∑—ã –±–æ—Ç–∞', 'warning');
            return;
        }
        
        console.log(`[BotsManager] ‚è∏Ô∏è –ü–∞—É–∑–∞ –±–æ—Ç–∞ –¥–ª—è ${targetSymbol}`);
        this.showNotification(`üîÑ –ü–∞—É–∑–∞ –±–æ—Ç–∞ ${targetSymbol}...`, 'info');

        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/pause`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ symbol: targetSymbol })
            });

            const data = await response.json();
            if (data.success) {
                this.showNotification(`‚úÖ –ë–æ—Ç ${targetSymbol} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É`, 'success');
                await this.loadActiveBotsData();
                this.updateBotControlButtons();
            } else {
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã –±–æ—Ç–∞: ${data.error}`, 'error');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã –±–æ—Ç–∞:', error);
            this.showNotification('‚ùå ' + this.translate('connection_error_bot_service'), 'error');
        }
    }

    async resumeBot(symbol) {
        const targetSymbol = symbol || this.selectedCoin?.symbol;
        if (!targetSymbol) {
            this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞', 'warning');
            return;
        }
        
        console.log(`[BotsManager] ‚èØÔ∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è ${targetSymbol}`);
        this.showNotification(`üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ ${targetSymbol}...`, 'info');

        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/resume`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ symbol: targetSymbol })
            });

            const data = await response.json();
            if (data.success) {
                this.showNotification(`‚úÖ –ë–æ—Ç ${targetSymbol} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω`, 'success');
                await this.loadActiveBotsData();
                this.updateBotControlButtons();
            } else {
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: ${data.error}`, 'error');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
            this.showNotification('‚ùå ' + this.translate('connection_error_bot_service'), 'error');
        }
    }

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ UI
    updateBotStatusInUI(symbol, status) {
        const botCard = document.querySelector(`[data-symbol="${symbol}"]`);
        if (!botCard) return;

        const statusElement = botCard.querySelector('.bot-status');
        const startButton = botCard.querySelector('.start-bot-btn');
        const stopButton = botCard.querySelector('.stop-bot-btn');
        const deleteButton = botCard.querySelector('.delete-bot-btn');

        if (statusElement) {
            switch (status) {
                case 'starting':
                    statusElement.textContent = '–ó–∞–ø—É—Å–∫...';
                    statusElement.className = 'bot-status status-starting';
                    if (startButton) startButton.disabled = true;
                    if (stopButton) stopButton.disabled = true;
                    break;
                case 'active':
                    statusElement.textContent = '–ê–∫—Ç–∏–≤–µ–Ω';
                    statusElement.className = 'bot-status status-active';
                    if (startButton) startButton.disabled = true;
                    if (stopButton) stopButton.disabled = false;
                    break;
                case 'stopping':
                    statusElement.textContent = '–û—Å—Ç–∞–Ω–æ–≤–∫–∞...';
                    statusElement.className = 'bot-status status-stopping';
                    if (startButton) startButton.disabled = true;
                    if (stopButton) stopButton.disabled = true;
                    break;
                case 'idle':
                    statusElement.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ';
                    statusElement.className = 'bot-status status-idle';
                    if (startButton) startButton.disabled = false;
                    if (stopButton) stopButton.disabled = true;
                    break;
                case 'stopped':
                    statusElement.textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                    statusElement.className = 'bot-status status-stopped';
                    if (startButton) startButton.disabled = false;
                    if (stopButton) stopButton.disabled = true;
                    break;
                case 'deleting':
                    statusElement.textContent = '–£–¥–∞–ª–µ–Ω–∏–µ...';
                    statusElement.className = 'bot-status status-deleting';
                    if (startButton) startButton.disabled = true;
                    if (stopButton) stopButton.disabled = true;
                    if (deleteButton) deleteButton.disabled = true;
                    break;
            }
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ UI
    removeBotFromUI(symbol) {
        const botCard = document.querySelector(`[data-symbol="${symbol}"]`);
        if (botCard) {
            botCard.remove();
        }
    }

    async deleteBot(symbol) {
        const targetSymbol = symbol || this.selectedCoin?.symbol;
        if (!targetSymbol) {
            this.showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞', 'warning');
            return;
        }
        
        console.log(`[BotsManager] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è ${targetSymbol}`);
        this.showNotification(`üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ ${targetSymbol}...`, 'info');

        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateBotStatusInUI(targetSymbol, 'deleting');

        try {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/delete`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ symbol: targetSymbol }),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            const data = await response.json();
            if (data.success) {
                this.showNotification(`‚úÖ –ë–æ—Ç ${targetSymbol} —É–¥–∞–ª–µ–Ω`, 'success');
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                this.removeBotFromUI(targetSymbol);
                await this.loadActiveBotsData();
                this.updateBotControlButtons();
                this.updateCoinsListWithBotStatus();
            } else {
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: ${data.error}`, 'error');
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º UI –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                this.updateBotStatusInUI(targetSymbol, 'active');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
            
            if (error.name === 'AbortError') {
                this.showNotification('‚è∞ –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞', 'error');
            } else {
                this.showNotification('‚ùå ' + this.translate('connection_error_bot_service'), 'error');
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º UI –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.updateBotStatusInUI(targetSymbol, 'active');
        }
    }

    getBotControlButtonsHtml(bot) {
        // –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ running, idle, –∏–ª–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏
        const isRunning = bot.status === 'running' || bot.status === 'idle' || 
                         bot.status === 'in_position_long' || bot.status === 'in_position_short';
        const isStopped = bot.status === 'stopped' || bot.status === 'paused';
        
        let buttons = [];
        
        if (isRunning) {
            // –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –°–¢–û–ü
            buttons.push(`<button onclick="window.app.botsManager.stopBot('${bot.symbol}')" style="padding: 4px 8px; background: #f44336; border: none; border-radius: 3px; color: white; cursor: pointer; font-size: 10px;">‚èπÔ∏è –°—Ç–æ–ø</button>`);
        } else if (isStopped) {
            // –ï—Å–ª–∏ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢
            buttons.push(`<button onclick="window.app.botsManager.startBot('${bot.symbol}')" style="padding: 4px 8px; background: #4caf50; border: none; border-radius: 3px; color: white; cursor: pointer; font-size: 10px;">‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç</button>`);
        }
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        buttons.push(`<button onclick="window.app.botsManager.deleteBot('${bot.symbol}')" style="padding: 4px 8px; background: #9e9e9e; border: none; border-radius: 3px; color: white; cursor: pointer; font-size: 10px;">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>`);
        
        return buttons.join('');
    }

    getBotDetailButtonsHtml(bot) {
        // –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ running, idle, –∏–ª–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏
        const isRunning = bot.status === 'running' || bot.status === 'idle' || 
                         bot.status === 'in_position_long' || bot.status === 'in_position_short';
        const isStopped = bot.status === 'stopped' || bot.status === 'paused';
        
        let buttons = [];
        
        if (isRunning) {
            // –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –°–¢–û–ü
            buttons.push(`<button onclick="window.app.botsManager.stopBot('${bot.symbol}')" style="padding: 5px 10px; background: #f44336; border: none; border-radius: 4px; color: white; cursor: pointer; font-size: 12px;">‚èπÔ∏è –°—Ç–æ–ø</button>`);
        } else if (isStopped) {
            // –ï—Å–ª–∏ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢  
            buttons.push(`<button onclick="window.app.botsManager.startBot('${bot.symbol}')" style="padding: 5px 10px; background: #4caf50; border: none; border-radius: 4px; color: white; cursor: pointer; font-size: 12px;">‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç</button>`);
        }
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        buttons.push(`<button onclick="window.app.botsManager.deleteBot('${bot.symbol}')" style="padding: 5px 10px; background: #9e9e9e; border: none; border-radius: 4px; color: white; cursor: pointer; font-size: 12px;">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>`);
        
        return buttons.join('');
    }

    updateBotStatus(status) {
        const statusText = document.getElementById('botStatusText');
        const statusIndicator = document.getElementById('botStatusIndicator');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –±–æ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
        const selectedBot = this.selectedCoin && this.activeBots ? 
                           this.activeBots.find(bot => bot.symbol === this.selectedCoin.symbol) : null;
        
        if (statusText) {
            if (selectedBot) {
                switch(selectedBot.status) {
                    case 'idle':
                        statusText.textContent = '–ë–æ—Ç —Å–æ–∑–¥–∞–Ω (–æ–∂–∏–¥–∞–µ—Ç)';
                        break;
                    case 'running':
                        statusText.textContent = '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω';
                        break;
                    case 'in_position_long':
                        statusText.textContent = '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω (LONG)';
                        break;
                    case 'in_position_short':
                        statusText.textContent = '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω (SHORT)';
                        break;
                    case 'stopped':
                        statusText.textContent = '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                        break;
                    case 'paused':
                        statusText.textContent = '–ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ';
                        break;
                    default:
                        statusText.textContent = '–ë–æ—Ç —Å–æ–∑–¥–∞–Ω';
                }
            } else {
                statusText.textContent = '–ë–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω';
            }
        }
        
        if (statusIndicator) {
            if (selectedBot) {
                const color = selectedBot.status === 'running' || 
                             selectedBot.status === 'in_position_long' || 
                             selectedBot.status === 'in_position_short' ? '#4caf50' : 
                             selectedBot.status === 'idle' ? '#ffd700' : '#ff5722';
                statusIndicator.style.color = color;
            } else {
                statusIndicator.style.color = '#888';
            }
        }
    }

    updateBotControlButtons() {
        console.log(`[BotsManager] üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...`);
        
        const createBtn = document.getElementById('createBotBtn');
        const startBtn = document.getElementById('startBotBtn');
        const stopBtn = document.getElementById('stopBotBtn');
        const pauseBtn = document.getElementById('pauseBotBtn');
        const resumeBtn = document.getElementById('resumeBotBtn');
        
        // –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        const quickStartLongBtn = document.getElementById('quickStartLongBtn');
        const quickStartShortBtn = document.getElementById('quickStartShortBtn');
        const quickStopBtn = document.getElementById('quickStopBtn');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –±–æ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
        const selectedBot = this.selectedCoin && this.activeBots ? 
                           this.activeBots.find(bot => bot.symbol === this.selectedCoin.symbol) : null;
        
        console.log(`[BotsManager] üîç –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–Ω–µ—Ç–∞: ${this.selectedCoin?.symbol}`);
        console.log(`[BotsManager] ü§ñ –ù–∞–π–¥–µ–Ω –±–æ—Ç:`, selectedBot);
        
        if (selectedBot) {
            // –ï—Å—Ç—å –±–æ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            const isRunning = selectedBot.status === 'running';
            const isStopped = selectedBot.status === 'idle' || selectedBot.status === 'stopped' || selectedBot.status === 'paused';
            
            if (createBtn) createBtn.style.display = 'none';
            
            if (isRunning) {
                // –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –°—Ç–æ–ø
                if (startBtn) startBtn.style.display = 'none';
                if (stopBtn) stopBtn.style.display = 'inline-block';
                if (pauseBtn) pauseBtn.style.display = 'none';
                if (resumeBtn) resumeBtn.style.display = 'none';
                
                // –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä—ã—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                if (quickStartLongBtn) quickStartLongBtn.style.display = 'none';
                if (quickStartShortBtn) quickStartShortBtn.style.display = 'none';
                if (quickStopBtn) quickStopBtn.style.display = 'inline-block';
            } else if (isStopped) {
                // –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –°—Ç–∞—Ä—Ç
                if (startBtn) startBtn.style.display = 'inline-block';
                if (stopBtn) stopBtn.style.display = 'none';
                if (pauseBtn) pauseBtn.style.display = 'none';
                if (resumeBtn) resumeBtn.style.display = 'none';
                
                // –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä—ã—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                if (quickStartLongBtn) quickStartLongBtn.style.display = 'none';
                if (quickStartShortBtn) quickStartShortBtn.style.display = 'none';
                if (quickStopBtn) quickStopBtn.style.display = 'none';
            }
            
            console.log(`[BotsManager] üéÆ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${selectedBot.status}, –ø–æ–∫–∞–∑–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);
        } else {
            // –ù–µ—Ç –±–æ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –°–æ–∑–¥–∞—Ç—å –∏ –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
            if (createBtn) createBtn.style.display = 'inline-block';
            if (startBtn) startBtn.style.display = 'none';
            if (stopBtn) stopBtn.style.display = 'none';
            if (pauseBtn) pauseBtn.style.display = 'none';
            if (resumeBtn) resumeBtn.style.display = 'none';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            if (quickStartLongBtn) quickStartLongBtn.style.display = 'inline-block';
            if (quickStartShortBtn) quickStartShortBtn.style.display = 'inline-block';
            if (quickStopBtn) quickStopBtn.style.display = 'none';
            
            console.log(`[BotsManager] üÜï –ù–µ—Ç –±–æ—Ç–∞, –ø–æ–∫–∞–∑–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞`);
        }
    }

    updateCoinsListWithBotStatus() {
        this.logDebug('[BotsManager] üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç —Å –ø–æ–º–µ—Ç–∫–∞–º–∏ –æ –±–æ—Ç–∞—Ö...');
        
        if (!this.activeBots) return;
        
        // –°–æ–∑–¥–∞–µ–º set —Å —Å–∏–º–≤–æ–ª–∞–º–∏ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ (–Ω–µ idle/paused) –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const activeBotsSymbols = new Set(
            this.activeBots
                .filter(bot => bot.status !== 'idle' && bot.status !== 'paused')
                .map(bot => bot.symbol)
        );
        
        this.logDebug(`[BotsManager] ü§ñ –ù–∞–π–¥–µ–Ω–æ ${activeBotsSymbols.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏–∑ ${this.activeBots.length} –æ–±—â–∏—Ö`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        const coinItems = document.querySelectorAll('.coin-item');
        coinItems.forEach(item => {
            const symbolElement = item.querySelector('.coin-symbol');
            if (symbolElement) {
                const symbol = symbolElement.textContent.trim();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞
                let botIndicator = item.querySelector('.bot-indicator');
                
                if (activeBotsSymbols.has(symbol)) {
                    // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
                    if (!botIndicator) {
                        botIndicator = document.createElement('span');
                        botIndicator.className = 'bot-indicator';
                        botIndicator.textContent = 'ü§ñ';
                        botIndicator.title = '–ê–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç';
                        symbolElement.appendChild(botIndicator);
                    }
                } else {
                    // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
                    if (botIndicator) {
                        botIndicator.remove();
                    }
                }
            }
        });
    }

    updateActiveBotsTab() {
        console.log('[BotsManager] üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ "–ë–æ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ"...');
        
        // –ï—Å–ª–∏ –º—ã —Å–µ–π—á–∞—Å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–ë–æ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ", –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        const activeTab = document.querySelector('.tab-btn.active');
        if (activeTab && activeTab.id === 'activeBotsTab') {
            this.renderActiveBotsDetails();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –≤–∫–ª–∞–¥–∫–∏
        const activeBotsTabBtn = document.getElementById('activeBotsTab');
        if (activeBotsTabBtn && this.activeBots) {
            const count = this.activeBots.length;
            const tabText = activeBotsTabBtn.querySelector('[data-translate]');
            if (tabText) {
                // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—á–µ—Ç—á–∏–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                const baseText = tabText.getAttribute('data-translate') === 'active_bots' ? '–ë–æ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ' : 'Active Bots';
                tabText.textContent = count > 0 ? `${baseText} (${count})` : baseText;
            }
        }
    }

    async loadFiltersData() {
        console.log('[BotsManager] üîß –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
        
        if (!this.serviceOnline) return;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Auto Bot —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            const response = await fetch(`${this.apiUrl}/auto-bot`);
            const data = await response.json();
            
            if (data.success && data.config) {
                this.filtersData = {
                    whitelist: data.config.whitelist || [],
                    blacklist: data.config.blacklist || []
                };
                
                this.renderFilters();
                this.initializeFilterControls();
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }

    renderFilters() {
        this.renderWhitelist();
        this.renderBlacklist();
    }

    renderWhitelist() {
        const container = document.getElementById('whitelistContainer');
        const countElement = document.getElementById('whitelistCount');
        
        if (!container || !countElement) return;
        
        const whitelist = this.filtersData?.whitelist || [];
        countElement.textContent = whitelist.length;
        
        if (whitelist.length === 0) {
            const currentLang = document.documentElement.lang || 'ru';
            const whiteListEmptyText = TRANSLATIONS[currentLang]['white_list_empty_text'] || '–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç';
            const addCoinsForTradingText = TRANSLATIONS[currentLang]['add_coins_for_auto_trading'] || '–î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏';
            
        container.innerHTML = `
                <div class="empty-filter-state">
                    <p>${whiteListEmptyText}</p>
                    <small>${addCoinsForTradingText}</small>
            </div>
        `;
        } else {
            container.innerHTML = whitelist.map(symbol => `
                <div class="filter-item" data-symbol="${symbol}">
                <span class="filter-item-symbol">${symbol}</span>
                    <button class="filter-item-remove" onclick="window.botsManager.removeFromWhitelist('${symbol}')">
                        ‚ùå –£–¥–∞–ª–∏—Ç—å
                    </button>
            </div>
        `).join('');
        }
    }

    renderBlacklist() {
        const container = document.getElementById('blacklistContainer');
        const countElement = document.getElementById('blacklistCount');
        
        if (!container || !countElement) return;
        
        const blacklist = this.filtersData?.blacklist || [];
        countElement.textContent = blacklist.length;
        
        if (blacklist.length === 0) {
            const currentLang = document.documentElement.lang || 'ru';
            const blackListEmptyText = TRANSLATIONS[currentLang]['black_list_empty_text'] || '–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç';
            const addCoinsForExclusionText = TRANSLATIONS[currentLang]['add_coins_for_exclusion'] || '–î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è';
            
            container.innerHTML = `
                <div class="empty-filter-state">
                    <p>${blackListEmptyText}</p>
                    <small>${addCoinsForExclusionText}</small>
            </div>
        `;
        } else {
            container.innerHTML = blacklist.map(symbol => `
                <div class="filter-item" data-symbol="${symbol}">
                    <span class="filter-item-symbol">${symbol}</span>
                    <button class="filter-item-remove" onclick="window.botsManager.removeFromBlacklist('${symbol}')">
                        ‚ùå –£–¥–∞–ª–∏—Ç—å
                    </button>
            </div>
        `).join('');
        }
    }

    initializeFilterControls() {
        // –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filtersSearchInput = document.getElementById('filtersSearchInput');
        if (filtersSearchInput) {
            filtersSearchInput.addEventListener('input', (e) => {
                this.performFiltersSearch(e.target.value);
            });
        }
    }

    async addToWhitelist() {
        const input = document.getElementById('whitelistInput');
        if (!input) return;
        
        const symbol = input.value.trim().toUpperCase();
        if (!symbol) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–Ω–µ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!this.validateCoinSymbol(symbol)) {
            this.showNotification('‚ùå –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä', 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–Ω–µ—Ç—ã –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        const whitelist = this.filtersData?.whitelist || [];
        if (whitelist.includes(symbol)) {
            this.showNotification('‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ —É–∂–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ', 'warning');
            return;
        }
        
        try {
            whitelist.push(symbol);
            await this.updateFilters({ whitelist });
            input.value = '';
            this.showNotification(`‚úÖ ${symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫`, 'success');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫', 'error');
        }
    }

    async addToBlacklist() {
        const input = document.getElementById('blacklistInput');
        if (!input) return;
        
        const symbol = input.value.trim().toUpperCase();
        if (!symbol) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–Ω–µ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!this.validateCoinSymbol(symbol)) {
            this.showNotification('‚ùå –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä', 'error');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–Ω–µ—Ç—ã –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        const blacklist = this.filtersData?.blacklist || [];
        if (blacklist.includes(symbol)) {
            this.showNotification('‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ', 'warning');
            return;
        }

        try {
            blacklist.push(symbol);
            await this.updateFilters({ blacklist });
        input.value = '';
            this.showNotification(`‚úÖ ${symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫`, 'success');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:', error);
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${error.message}`, 'error');
        }
    }

    async removeFromWhitelist(symbol) {
        try {
            const whitelist = (this.filtersData?.whitelist || []).filter(s => s !== symbol);
            await this.updateFilters({ whitelist });
            this.showNotification(`‚úÖ ${symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞`, 'success');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞', 'error');
        }
    }

    async removeFromBlacklist(symbol) {
        try {
            const blacklist = (this.filtersData?.blacklist || []).filter(s => s !== symbol);
            await this.updateFilters({ blacklist });
            this.showNotification(`‚úÖ ${symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞`, 'success');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞', 'error');
        }
    }

    async updateFilters(updates) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ filtersData –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!this.filtersData) {
            this.filtersData = { whitelist: [], blacklist: [] };
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (updates.whitelist !== undefined) {
            this.filtersData.whitelist = updates.whitelist;
        }
        if (updates.blacklist !== undefined) {
            this.filtersData.blacklist = updates.blacklist;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch(`${this.apiUrl}/auto-bot`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updates)
        });
        
        const data = await response.json();
        if (!data.success) {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤');
        }
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.renderFilters();
    }

    validateCoinSymbol(symbol) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–Ω–µ—Ç–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä
        return this.coinsRsiData && this.coinsRsiData.some(coin => coin.symbol === symbol);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    translate(key, params = {}) {
        if (window.languageUtils && typeof languageUtils.translate === 'function') {
            let text = languageUtils.translate(key);
            // –ó–∞–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
            Object.keys(params).forEach(param => {
                text = text.replace(`{${param}}`, params[param]);
            });
            return text;
        }
        // Fallback –Ω–∞ –∫–ª—é—á –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
        return key;
    }

    showNotification(message, type = 'info') {
        console.log(`[BotsManager] üì¢ ${message}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é toast —Å–∏—Å—Ç–µ–º—É
        if (window.toastManager) {
            switch(type) {
                case 'success':
                    window.toastManager.success(message);
                    break;
                case 'error':
                    window.toastManager.error(message);
                    break;
                case 'warning':
                    window.toastManager.warning(message);
                    break;
                case 'info':
                default:
                    window.toastManager.info(message);
                    break;
            }
        } else {
            // Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            console.log(`[NOTIFICATION] ${type.toUpperCase()}: ${message}`);
        }
    }

    // ============ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–´–• –§–ò–õ–¨–¢–†–û–í ============

    showFilterControls(symbol) {
        const filterSection = document.getElementById('filterControlsSection');
        if (filterSection && symbol) {
            filterSection.style.display = 'block';
        }
    }

    updateFilterStatus(symbol) {
        const statusText = document.getElementById('filterStatusText');
        if (!statusText || !symbol) return;

        const whitelist = this.filtersData?.whitelist || [];
        const blacklist = this.filtersData?.blacklist || [];

        statusText.className = 'filter-status-text';

        if (blacklist.includes(symbol)) {
            statusText.textContent = 'üî¥ –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ';
            statusText.classList.add('in-blacklist');
        } else if (whitelist.includes(symbol)) {
            statusText.textContent = 'üü¢ –í –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ';
            statusText.classList.add('in-whitelist');
        } else {
            statusText.textContent = '–ù–µ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö';
        }
    }

    async addSelectedCoinToWhitelist() {
        if (!this.selectedCoin) {
            return;
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (!this.filtersData) {
            await this.loadFiltersData();
        }

        const symbol = this.selectedCoin.symbol;
        const whitelist = this.filtersData?.whitelist || [];
        const blacklist = this.filtersData?.blacklist || [];

        // –ï—Å–ª–∏ —É–∂–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ - –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
        if (whitelist.includes(symbol)) {
            this.highlightFilterStatus(symbol, 'whitelist');
            return;
        }

        try {
            whitelist.push(symbol);
            
            // –£–ë–ò–†–ê–ï–ú –ò–ó –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê –µ—Å–ª–∏ —Ç–∞–º –±—ã–ª–∞
            const newBlacklist = blacklist.filter(s => s !== symbol);
            
            await this.updateFilters({ 
                whitelist: whitelist,
                blacklist: newBlacklist 
            });
            
            this.updateFilterStatus(symbol);
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:', error);
        }
    }

    async addSelectedCoinToBlacklist() {
        if (!this.selectedCoin) {
            return;
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (!this.filtersData) {
            await this.loadFiltersData();
        }

        const symbol = this.selectedCoin.symbol;
        const whitelist = this.filtersData?.whitelist || [];
        const blacklist = this.filtersData?.blacklist || [];

        // –ï—Å–ª–∏ —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ - –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
        if (blacklist.includes(symbol)) {
            this.highlightFilterStatus(symbol, 'blacklist');
            return;
        }

        try {
            blacklist.push(symbol);
            
            // –£–ë–ò–†–ê–ï–ú –ò–ó –ë–ï–õ–û–ì–û –°–ü–ò–°–ö–ê –µ—Å–ª–∏ —Ç–∞–º –±—ã–ª–∞
            const newWhitelist = whitelist.filter(s => s !== symbol);
            
            await this.updateFilters({ 
                whitelist: newWhitelist,
                blacklist: blacklist 
            });
            
            this.updateFilterStatus(symbol);
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:', error);
        }
    }

    async removeSelectedCoinFromFilters() {
        if (!this.selectedCoin) {
            return;
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (!this.filtersData) {
            await this.loadFiltersData();
        }

        const symbol = this.selectedCoin.symbol;
        const whitelist = this.filtersData?.whitelist || [];
        const blacklist = this.filtersData?.blacklist || [];

        try {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤
            const newWhitelist = whitelist.filter(s => s !== symbol);
            const newBlacklist = blacklist.filter(s => s !== symbol);
            
            await this.updateFilters({ 
                whitelist: newWhitelist,
                blacklist: newBlacklist 
            });
            
            this.updateFilterStatus(symbol);
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }

    updateSmartFilterControls(searchTerm) {
        const controlsDiv = document.getElementById('smartFilterControls');
        const foundCountSpan = document.getElementById('foundCount');
        
        if (!controlsDiv || !foundCountSpan) return;

        if (!searchTerm || searchTerm.length < 2) {
            controlsDiv.style.display = 'none';
            return;
        }

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        const foundCoins = this.getFoundCoins(searchTerm);
        
        if (foundCoins.length === 0) {
            controlsDiv.style.display = 'none';
            return;
        }

        foundCountSpan.textContent = `${foundCoins.length} –Ω–∞–π–¥–µ–Ω–æ`;
        controlsDiv.style.display = 'block';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        this.foundCoins = foundCoins;
    }

    getFoundCoins(searchTerm) {
        if (!this.coinsRsiData || !searchTerm) return [];

        const term = searchTerm.toLowerCase();
        return this.coinsRsiData.filter(coin => 
            coin.symbol.toLowerCase().includes(term) ||
            coin.symbol.toLowerCase().startsWith(term)
        );
    }

    async addFoundCoinsToWhitelist() {
        if (!this.foundCoins || this.foundCoins.length === 0) {
            this.showNotification('‚ö†Ô∏è –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', 'warning');
            return;
        }

        try {
            const whitelist = this.filtersData?.whitelist || [];
            const newCoins = this.foundCoins
                .map(coin => coin.symbol)
                .filter(symbol => !whitelist.includes(symbol));

            if (newCoins.length === 0) {
                this.showNotification('‚ö†Ô∏è –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã —É–∂–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ', 'warning');
                return;
            }

            whitelist.push(...newCoins);
            await this.updateFilters({ whitelist });
            
            // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫
            const searchInput = document.getElementById('coinSearchInput');
            if (searchInput) searchInput.value = '';
            this.filterCoins('');
            this.updateSmartFilterControls('');

            this.showNotification(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newCoins.length} –º–æ–Ω–µ—Ç –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫`, 'success');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫', 'error');
        }
    }

    async addFoundCoinsToBlacklist() {
        if (!this.foundCoins || this.foundCoins.length === 0) {
            this.showNotification('‚ö†Ô∏è –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', 'warning');
            return;
        }

        try {
            const blacklist = this.filtersData?.blacklist || [];
            const newCoins = this.foundCoins
                .map(coin => coin.symbol)
                .filter(symbol => !blacklist.includes(symbol));

            if (newCoins.length === 0) {
                this.showNotification('‚ö†Ô∏è –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ', 'warning');
                return;
            }

            blacklist.push(...newCoins);
            await this.updateFilters({ blacklist });
            
            // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫
            const searchInput = document.getElementById('coinSearchInput');
            if (searchInput) searchInput.value = '';
            this.filterCoins('');
            this.updateSmartFilterControls('');

            this.showNotification(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newCoins.length} –º–æ–Ω–µ—Ç –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫`, 'success');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', 'error');
        }
    }

    // ============ –ü–û–ò–°–ö –ù–ê –í–ö–õ–ê–î–ö–ï –§–ò–õ–¨–¢–†–û–í ============

    performFiltersSearch(searchTerm) {
        const resultsContainer = document.getElementById('filtersSearchResults');
        if (!resultsContainer) return;

        console.log(`[BotsManager] üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤: "${searchTerm}"`);

        if (!searchTerm || searchTerm.length < 2) {
            resultsContainer.innerHTML = `
                <div class="search-prompt">
                    <p>üí° –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</p>
                    <small>–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –º–æ–Ω–µ—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</small>
                </div>
            `;
            return;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã
        const foundCoins = this.searchCoins(searchTerm);
        
        if (foundCoins.length === 0) {
            resultsContainer.innerHTML = `
                <div class="search-prompt">
                    <p>üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}"</p>
                    <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã</small>
                </div>
            `;
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.renderSearchResults(foundCoins, resultsContainer);
    }

    searchCoins(searchTerm) {
        if (!this.coinsRsiData || !searchTerm) return [];

        const term = searchTerm.toLowerCase();
        return this.coinsRsiData.filter(coin => 
            coin.symbol.toLowerCase().includes(term)
        ).slice(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    }

    renderSearchResults(coins, container) {
        const whitelist = this.filtersData?.whitelist || [];
        const blacklist = this.filtersData?.blacklist || [];

        const resultsHtml = coins.map(coin => {
            const inWhitelist = whitelist.includes(coin.symbol);
            const inBlacklist = blacklist.includes(coin.symbol);
            const inAnyList = inWhitelist || inBlacklist;
            
            let statusHtml = '';
            
            if (inBlacklist) {
                statusHtml = '<div class="search-result-status in-blacklist">–í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ</div>';
            } else if (inWhitelist) {
                statusHtml = '<div class="search-result-status in-whitelist">–í –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ</div>';
            }

            return `
                <div class="search-result-item">
                    <div class="search-result-info">
                        <div class="search-result-symbol">${coin.symbol}</div>
                        ${statusHtml}
                    </div>
                    <div class="search-result-buttons">
                        <button class="btn-search-white" 
                                onclick="window.botsManager.addCoinToWhitelistFromSearch('${coin.symbol}')">
                            üü¢ –ë–µ–ª—ã–π
                        </button>
                        <button class="btn-search-black" 
                                onclick="window.botsManager.addCoinToBlacklistFromSearch('${coin.symbol}')">
                            üî¥ –ß–µ—Ä–Ω—ã–π
                        </button>
                        <button class="btn-search-remove" 
                                onclick="window.botsManager.removeCoinFromFiltersFromSearch('${coin.symbol}')">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = `
            <div style="padding: 12px; background: var(--bg-tertiary); border-bottom: 1px solid var(--border-color); font-size: 14px; color: var(--text-muted);">
                üìä –ù–∞–π–¥–µ–Ω–æ ${coins.length} –º–æ–Ω–µ—Ç
            </div>
            ${resultsHtml}
        `;
    }

    async addCoinToWhitelistFromSearch(symbol) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (!this.filtersData) {
            await this.loadFiltersData();
        }

        const whitelist = this.filtersData?.whitelist || [];
        const blacklist = this.filtersData?.blacklist || [];

        // –ï—Å–ª–∏ —É–∂–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ - –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
        if (whitelist.includes(symbol)) {
            this.highlightStatus(symbol, 'whitelist');
            return;
        }

        try {
            whitelist.push(symbol);
            
            // –£–ë–ò–†–ê–ï–ú –ò–ó –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê –µ—Å–ª–∏ —Ç–∞–º –±—ã–ª–∞
            const newBlacklist = blacklist.filter(s => s !== symbol);
            
            await this.updateFilters({ 
                whitelist: whitelist,
                blacklist: newBlacklist 
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            const searchInput = document.getElementById('filtersSearchInput');
            if (searchInput && searchInput.value) {
                this.performFiltersSearch(searchInput.value);
            }
            
            // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ü–ò–°–ö–ò –°–ü–†–ê–í–ê
            this.renderFilters();
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:', error);
        }
    }

    async addCoinToBlacklistFromSearch(symbol) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (!this.filtersData) {
            await this.loadFiltersData();
        }

        const whitelist = this.filtersData?.whitelist || [];
        const blacklist = this.filtersData?.blacklist || [];

        // –ï—Å–ª–∏ —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ - –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
        if (blacklist.includes(symbol)) {
            this.highlightStatus(symbol, 'blacklist');
            return;
        }

        try {
            blacklist.push(symbol);
            
            // –£–ë–ò–†–ê–ï–ú –ò–ó –ë–ï–õ–û–ì–û –°–ü–ò–°–ö–ê –µ—Å–ª–∏ —Ç–∞–º –±—ã–ª–∞
            const newWhitelist = whitelist.filter(s => s !== symbol);
            
            await this.updateFilters({ 
                whitelist: newWhitelist,
                blacklist: blacklist 
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            const searchInput = document.getElementById('filtersSearchInput');
            if (searchInput && searchInput.value) {
                this.performFiltersSearch(searchInput.value);
            }
            
            // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ü–ò–°–ö–ò –°–ü–†–ê–í–ê
            this.renderFilters();
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:', error);
        }
    }

    async removeCoinFromFiltersFromSearch(symbol) {
        console.log(`[BotsManager] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ ${symbol} –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫`);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (!this.filtersData) {
            await this.loadFiltersData();
        }

        const whitelist = this.filtersData?.whitelist || [];
        const blacklist = this.filtersData?.blacklist || [];
        
        let removed = false;
        let listType = '';

        try {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å
            if (whitelist.includes(symbol)) {
                const newWhitelist = whitelist.filter(s => s !== symbol);
                await this.updateFilters({ whitelist: newWhitelist });
                removed = true;
                listType = '–±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞';
            }
            // –£–¥–∞–ª—è–µ–º –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å  
            else if (blacklist.includes(symbol)) {
                const newBlacklist = blacklist.filter(s => s !== symbol);
                await this.updateFilters({ blacklist: newBlacklist });
                removed = true;
                listType = '—á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞';
            }

            if (removed) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                const searchInput = document.getElementById('filtersSearchInput');
                if (searchInput && searchInput.value) {
                    this.performFiltersSearch(searchInput.value);
                }
                
                // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ü–ò–°–ö–ò –°–ü–†–ê–í–ê
                this.renderFilters();
                
                // –¢–ò–•–û–ï –£–î–ê–õ–ï–ù–ò–ï - –ë–ï–ó –£–í–ï–î–û–ú–õ–ï–ù–ò–ô!
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${error.message}`, 'error');
        }
    }

    highlightStatus(symbol, listType) {
        // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —Å–∏–º–≤–æ–ª–æ–º –∏ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        const searchResults = document.getElementById('filtersSearchResults');
        if (!searchResults) return;

        const items = searchResults.querySelectorAll('.search-result-item');
        items.forEach(item => {
            const symbolElement = item.querySelector('.search-result-symbol');
            if (symbolElement && symbolElement.textContent === symbol) {
                const statusElement = item.querySelector('.search-result-status');
                if (statusElement) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                    statusElement.classList.add('highlight-flash');
                    
                    // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                    setTimeout(() => {
                        statusElement.classList.remove('highlight-flash');
                    }, 1000);
                }
            }
        });
    }

    highlightFilterStatus(symbol, listType) {
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const statusElement = document.getElementById('filterStatusText');
        if (statusElement) {
            statusElement.classList.add('highlight-flash');
            
            // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                statusElement.classList.remove('highlight-flash');
            }, 1000);
        }
    }

    async loadActiveBotsData() {
        this.logDebug('[BotsManager] ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...');
        
        if (!this.serviceOnline) return;
        
        try {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            try {
                const syncResponse = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/sync-positions`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const syncData = await syncResponse.json();
                if (syncData.success) {
                    this.logDebug('[BotsManager] ‚úÖ –ü–æ–∑–∏—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
                } else {
                    console.warn('[BotsManager] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π:', syncData.message);
                }
            } catch (syncError) {
                console.warn('[BotsManager] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π:', syncError);
            }
            
            // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –±–æ—Ç–æ–≤, –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [botsResponse, configResponse] = await Promise.all([
                fetch(`${this.BOTS_SERVICE_URL}/api/bots/list`),
                fetch(`${this.BOTS_SERVICE_URL}/api/bots/auto-bot`)
            ]);
            
            const botsData = await botsResponse.json();
            const configData = await configResponse.json();
            
            if (botsData.success) {
                console.log(`[DEBUG] loadActiveBotsData: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–æ–≤:`, botsData.bots);
                this.activeBots = botsData.bots;
                console.log(`[DEBUG] loadActiveBotsData: this.activeBots —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:`, this.activeBots);
                this.renderActiveBotsDetails();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–µ—Ç
                this.updateCoinsListWithBotStatus();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                this.updateBulkControlsVisibility(botsData.bots);
            } else {
                console.log(`[DEBUG] loadActiveBotsData: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:`, botsData);
            }
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–±–æ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if (configData.success) {
                const autoBotEnabled = configData.config.enabled;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–±–æ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                const globalAutoBotToggleEl = document.getElementById('globalAutoBotToggle');
                const hasUserChanged = globalAutoBotToggleEl?.hasAttribute('data-user-changed');
                
                this.logDebug(`[BotsManager] üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–±–æ—Ç–∞: —Å–µ—Ä–≤–µ—Ä=${autoBotEnabled ? '–í–ö–õ' : '–í–´–ö–õ'}, UI=${globalAutoBotToggleEl?.checked ? '–í–ö–õ' : '–í–´–ö–õ'}, user-changed=${hasUserChanged}`);
                
                if (globalAutoBotToggleEl && !hasUserChanged) {
                    if (globalAutoBotToggleEl.checked !== autoBotEnabled) {
                        console.log(`[BotsManager] üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: ${globalAutoBotToggleEl.checked} ‚Üí ${autoBotEnabled}`);
                        console.log(`[BotsManager] üîç data-initialized: ${globalAutoBotToggleEl.getAttribute('data-initialized')}`);
                        globalAutoBotToggleEl.checked = autoBotEnabled;
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    const toggleLabel = globalAutoBotToggleEl.closest('.auto-bot-toggle')?.querySelector('.toggle-label');
                    if (toggleLabel) {
                        toggleLabel.textContent = autoBotEnabled ? 'ü§ñ Auto Bot (–í–ö–õ)' : 'ü§ñ Auto Bot (–í–´–ö–õ)';
                    }
                } else if (hasUserChanged) {
                    console.log(`[BotsManager] üîí –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å`);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–±–æ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                const mobileAutoBotToggleEl = document.getElementById('mobileAutobotToggle');
                const hasMobileUserChanged = mobileAutoBotToggleEl?.hasAttribute('data-user-changed');
                
                if (mobileAutoBotToggleEl && !hasMobileUserChanged) {
                    if (mobileAutoBotToggleEl.checked !== autoBotEnabled) {
                        console.log(`[BotsManager] üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: ${mobileAutoBotToggleEl.checked} ‚Üí ${autoBotEnabled}`);
                        mobileAutoBotToggleEl.checked = autoBotEnabled;
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    const statusText = document.getElementById('mobileAutobotStatusText');
                    if (statusText) {
                        statusText.textContent = autoBotEnabled ? '–í–ö–õ' : '–í–´–ö–õ';
                        statusText.className = autoBotEnabled ? 'mobile-autobot-status enabled' : 'mobile-autobot-status';
                    }
                } else if (hasMobileUserChanged) {
                    console.log(`[BotsManager] üîí –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–æ–±–∏–ª—å–Ω–æ–≥–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å`);
                }
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤:', error);
        }
    }

        renderActiveBotsDetails() {
        this.logDebug('[BotsManager] üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É "–ë–æ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ"
        const detailsElement = document.getElementById('activeBotsDetailsList');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
        const scrollListElement = document.getElementById('activeBotsScrollList');
        const emptyStateElement = document.getElementById('emptyActiveBotsState');
        
        this.logDebug(`[BotsManager] üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: ${this.activeBots ? this.activeBots.length : 0}`);
        this.logDebug(`[BotsManager] üîç –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:`, {
            detailsElement: !!detailsElement,
            scrollListElement: !!scrollListElement,
            emptyStateElement: !!emptyStateElement
        });

        const hasActiveBots = this.activeBots && this.activeBots.length > 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å HTML
        const existingBots = scrollListElement ? Array.from(scrollListElement.querySelectorAll('.active-bot-item')).map(item => item.dataset.symbol) : [];
        const currentBots = hasActiveBots ? this.activeBots.map(bot => bot.symbol) : [];
        const needsFullRedraw = JSON.stringify(existingBots.sort()) !== JSON.stringify(currentBots.sort());
        
        console.log(`[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏:`, { existingBots, currentBots, needsFullRedraw });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å (–≤–∫–ª–∞–¥–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        if (emptyStateElement && scrollListElement) {
            if (hasActiveBots) {
                emptyStateElement.style.display = 'none';
                scrollListElement.style.display = 'block';
                
                // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è - –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
                if (needsFullRedraw) {
                    console.log(`[DEBUG] –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏`);
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
                    const rightPanelHtml = this.activeBots.map(bot => {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (–∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ running, idle, –∏–ª–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏)
                    const isActive = bot.status === 'running' || bot.status === 'idle' || 
                                    bot.status === 'in_position_long' || bot.status === 'in_position_short' ||
                                    bot.status === 'armed_up' || bot.status === 'armed_down';
                    
                    const statusColor = isActive ? '#4caf50' : '#ff5722';
                    const statusText = isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : (bot.status === 'paused' ? '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : (bot.status === 'idle' ? '–û–∂–∏–¥–∞–Ω–∏–µ' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
                    console.log(`[DEBUG] renderActiveBotsDetails –¥–ª—è ${bot.symbol}:`, {
                        position_side: bot.position_side,
                        entry_price: bot.entry_price,
                        current_price: bot.current_price,
                        rsi_data: bot.rsi_data
                    });
                    
                    const positionInfo = this.getBotPositionInfo(bot);
                    const timeInfo = this.getBotTimeInfo(bot);
                    
                    console.log(`[DEBUG] positionInfo –¥–ª—è ${bot.symbol}:`, positionInfo);
                    console.log(`[DEBUG] timeInfo –¥–ª—è ${bot.symbol}:`, timeInfo);
                    
                    const htmlResult = `
                        <div class="active-bot-item clickable-bot-item" data-symbol="${bot.symbol}" style="border: 1px solid #444; border-radius: 8px; padding: 12px; margin: 8px 0; background: #2a2a2a; cursor: pointer;" onmouseover="this.style.backgroundColor='#333'" onmouseout="this.style.backgroundColor='#2a2a2a'">
                            <div class="bot-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    <span style="color: #fff; font-weight: bold; font-size: 16px;">${bot.symbol}</span>
                                    <span style="background: ${statusColor}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 10px;">${statusText}</span>
                                </div>
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    <div style="text-align: right;">
                                        <div style="color: ${(bot.unrealized_pnl || bot.unrealized_pnl_usdt || 0) >= 0 ? '#4caf50' : '#f44336'}; font-weight: bold; font-size: 14px;">$${(bot.unrealized_pnl_usdt || bot.unrealized_pnl || 0).toFixed(3)}</div>
                                    </div>
                                    <button class="collapse-btn" onclick="event.stopPropagation(); const details = this.parentElement.parentElement.parentElement.querySelector('.bot-details'); const isCurrentlyCollapsed = details.style.display === 'none'; details.style.display = isCurrentlyCollapsed ? 'block' : 'none'; this.textContent = isCurrentlyCollapsed ? '‚ñ≤' : '‚ñº'; window.botsManager && window.botsManager.saveCollapseState(this.parentElement.parentElement.parentElement.dataset.symbol, !isCurrentlyCollapsed);" style="background: none; border: none; color: #888; font-size: 12px; cursor: pointer; padding: 4px;">‚ñº</button>
                                </div>
                            </div>
                                
                            <div class="bot-details" style="font-size: 12px; color: #ccc; margin-bottom: 8px; display: none;">
                                <div style="margin-bottom: 4px;">üí∞ –û–±—ä–µ–º: ${parseFloat(((bot.position_size || 0) * (bot.entry_price || 0)).toFixed(2))} USDT</div>
                                ${positionInfo}
                                ${timeInfo}
                            </div>
                            
                            <div class="bot-controls" style="display: flex; gap: 8px; justify-content: center;">
                                ${this.getBotControlButtonsHtml(bot)}
                            </div>
                        </div>
                    `;
                    
                    console.log(`[DEBUG] –§–∏–Ω–∞–ª—å–Ω—ã–π HTML –¥–ª—è ${bot.symbol}:`, htmlResult);
                    return htmlResult;
                }).join('');
                
                console.log(`[DEBUG] –í—Å—Ç–∞–≤–ª—è–µ–º HTML –≤ DOM:`, rightPanelHtml);
                console.log(`[DEBUG] –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:`, scrollListElement);
                
                scrollListElement.innerHTML = rightPanelHtml;
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML
                this.preserveCollapseState(scrollListElement);
                
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –ø–ª–∞—à–µ–∫ –±–æ—Ç–æ–≤
                    scrollListElement.querySelectorAll('.clickable-bot-item').forEach(item => {
                        item.addEventListener('click', (e) => {
                            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–∫ –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            if (e.target.closest('.bot-controls button')) {
                return;
            }

                            const symbol = item.dataset.symbol;
                            console.log(`[BotsManager] üéØ –ö–ª–∏–∫ –ø–æ –ø–ª–∞—à–∫–µ –±–æ—Ç–∞: ${symbol}`);
                            this.selectCoin(symbol);
                        });
                    });
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
                    console.log(`[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏`);
                    this.activeBots.forEach(bot => {
                        const botItem = scrollListElement.querySelector(`.active-bot-item[data-symbol="${bot.symbol}"]`);
                        if (botItem) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º PnL
                            const pnlElement = botItem.querySelector('.bot-header > div:last-child > div > div:first-child');
                            if (pnlElement) {
                                const pnlValue = (bot.unrealized_pnl_usdt || bot.unrealized_pnl || 0);
                                pnlElement.textContent = `$${pnlValue.toFixed(3)}`;
                                pnlElement.style.color = pnlValue >= 0 ? '#4caf50' : '#f44336';
                            }
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¥–µ—Ç–∞–ª—è—Ö (–µ—Å–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ)
                            const details = botItem.querySelector('.bot-details');
                            if (details && details.style.display !== 'none') {
                                const positionInfo = this.getBotPositionInfo(bot);
                                const timeInfo = this.getBotTimeInfo(bot);
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ —á–∞—Å—Ç–∏, –Ω–µ —Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                                // TODO: –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ, –æ–±–Ω–æ–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            }
                        }
                    });
                }
            } else {
                emptyStateElement.style.display = 'block';
                scrollListElement.style.display = 'none';
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É "–ë–æ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ"
        if (detailsElement) {
            if (!hasActiveBots) {
                const currentLang = document.documentElement.lang || 'ru';
                const noActiveBotsText = TRANSLATIONS[currentLang]['no_active_bots'] || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤';
                const createBotsText = TRANSLATIONS[currentLang]['create_bots_for_trading'] || '–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏';
                
                detailsElement.innerHTML = `
                    <div class="empty-bots-state" style="text-align: center; padding: 20px; color: #888;">
                        <div style="font-size: 48px; margin-bottom: 10px;">ü§ñ</div>
                        <p style="margin: 10px 0; font-size: 16px;">${noActiveBotsText}</p>
                        <small style="color: #666;">${createBotsText}</small>
                    </div>
                `;
            } else {
                // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è - –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
                if (needsFullRedraw) {
                    console.log(`[DEBUG] –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≤–∫–ª–∞–¥–∫–∏ "–ë–æ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ"`);
                    
                    const rightPanelHtml = this.activeBots.map(bot => {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (–∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ running, idle, –∏–ª–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏)
                    const isActive = bot.status === 'running' || bot.status === 'idle' || 
                                    bot.status === 'in_position_long' || bot.status === 'in_position_short' ||
                                    bot.status === 'armed_up' || bot.status === 'armed_down';
                    
                    const statusColor = isActive ? '#4caf50' : '#ff5722';
                    const statusText = isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : (bot.status === 'paused' ? '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : (bot.status === 'idle' ? '–û–∂–∏–¥–∞–Ω–∏–µ' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
                    console.log(`[DEBUG] renderActiveBotsDetails –¥–ª—è ${bot.symbol}:`, {
                        position_side: bot.position_side,
                        entry_price: bot.entry_price,
                        current_price: bot.current_price,
                        rsi_data: bot.rsi_data
                    });
                    
                    const positionInfo = this.getBotPositionInfo(bot);
                    const timeInfo = this.getBotTimeInfo(bot);
                    
                    console.log(`[DEBUG] positionInfo –¥–ª—è ${bot.symbol}:`, positionInfo);
                    console.log(`[DEBUG] timeInfo –¥–ª—è ${bot.symbol}:`, timeInfo);
                    
                    const htmlResult = `
                        <div class="active-bot-item clickable-bot-item" data-symbol="${bot.symbol}" style="border: 1px solid #333; border-radius: 12px; padding: 16px; margin: 12px 0; background: linear-gradient(135deg, #252525 0%, #2a2a2a 100%); cursor: pointer; transition: all 0.3s ease; box-shadow: 0 2px 8px rgba(0,0,0,0.3);" onmouseover="this.style.backgroundColor='#2a2a2a'; this.style.borderColor='#555'; this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.4)'" onmouseout="this.style.backgroundColor='#252525'; this.style.borderColor='#333'; this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(0,0,0,0.3)'">
                            <div class="bot-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; padding-bottom: 12px; border-bottom: 1px solid #333;">
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    <span style="color: #fff; font-weight: bold; font-size: 18px; text-shadow: 0 1px 2px rgba(0,0,0,0.5);">${bot.symbol}</span>
                                    <span style="background: ${statusColor}; color: white; padding: 4px 10px; border-radius: 16px; font-size: 11px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">${statusText}</span>
                                </div>
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    <div style="text-align: right;">
                                        <div style="color: ${(bot.unrealized_pnl || bot.unrealized_pnl_usdt || 0) >= 0 ? '#4caf50' : '#f44336'}; font-weight: bold; font-size: 16px; text-shadow: 0 1px 2px rgba(0,0,0,0.5);">$${(bot.unrealized_pnl_usdt || bot.unrealized_pnl || 0).toFixed(3)}</div>
                                        <div style="color: #888; font-size: 10px; margin-top: 2px;">PnL</div>
                                    </div>
                                    <button class="collapse-btn" onclick="event.stopPropagation(); const details = this.parentElement.parentElement.parentElement.querySelector('.bot-details'); const isCurrentlyCollapsed = details.style.display === 'none'; details.style.display = isCurrentlyCollapsed ? 'grid' : 'none'; this.textContent = isCurrentlyCollapsed ? '‚ñ≤' : '‚ñº'; window.botsManager && window.botsManager.saveCollapseState(this.parentElement.parentElement.parentElement.dataset.symbol, !isCurrentlyCollapsed);" style="background: none; border: none; color: #888; font-size: 14px; cursor: pointer; padding: 4px;">‚ñº</button>
                                </div>
                            </div>
                            
                            <div class="bot-details" style="display: none; grid-template-columns: 1fr 1fr; gap: 12px; font-size: 13px; color: #ccc; margin-bottom: 16px;">
                                <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                                    <span style="color: #888;">üí∞ –û–±—ä–µ–º</span>
                                    <span style="color: #fff; font-weight: 600;">${bot.position_size || bot.volume_value} ${(bot.volume_mode || 'USDT').toUpperCase()}</span>
                                </div>
                                
                                ${positionInfo}
                                ${timeInfo}
                            </div>
                            
                            <div class="bot-controls" style="display: flex; gap: 8px; justify-content: center; padding-top: 12px; border-top: 1px solid #333;">
                                ${this.getBotControlButtonsHtml(bot)}
                            </div>
                        </div>
                    `;
                    
                    console.log(`[DEBUG] –§–∏–Ω–∞–ª—å–Ω—ã–π HTML –¥–ª—è ${bot.symbol}:`, htmlResult);
                    return htmlResult;
                }).join('');

                    console.log(`[DEBUG] –í—Å—Ç–∞–≤–ª—è–µ–º –ü–û–õ–ù–´–ô HTML –≤ detailsElement:`, rightPanelHtml);
                    detailsElement.innerHTML = rightPanelHtml;
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML
                    this.preserveCollapseState(detailsElement);
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
                    console.log(`[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ "–ë–æ—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ" –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏`);
                    this.activeBots.forEach(bot => {
                        const botItem = detailsElement.querySelector(`.active-bot-item[data-symbol="${bot.symbol}"]`);
                        if (botItem) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º PnL
                            const pnlElement = botItem.querySelector('.bot-header > div:last-child > div > div:first-child');
                            if (pnlElement) {
                                const pnlValue = (bot.unrealized_pnl_usdt || bot.unrealized_pnl || 0);
                                pnlElement.textContent = `$${pnlValue.toFixed(3)}`;
                                pnlElement.style.color = pnlValue >= 0 ? '#4caf50' : '#f44336';
                            }
                        }
                    });
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
        this.updateBotsSummaryStats();
        
        this.logDebug('[BotsManager] ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }

    updateBotsSummaryStats() {
        this.logDebug('[BotsManager] üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤...');
        this.logDebug('[BotsManager] üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã:', this.activeBots);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π PnL
        let totalPnL = 0;
        let inPositionCount = 0;
        
        if (this.activeBots && this.activeBots.length > 0) {
            this.activeBots.forEach(bot => {
                // –î–æ–±–∞–≤–ª—è–µ–º PnL –±–æ—Ç–∞ –∫ –æ–±—â–µ–º—É
                const botPnL = parseFloat(bot.unrealized_pnl || 0);
                totalPnL += botPnL;
                
                console.log(`[BotsManager] üìä –ë–æ—Ç ${bot.symbol}: PnL=$${botPnL}, –°—Ç–∞—Ç—É—Å=${bot.status}`);
                
                // –°—á–∏—Ç–∞–µ–º –±–æ—Ç–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏
                if (bot.status === 'in_position_long' || bot.status === 'in_position_short') {
                    inPositionCount++;
                }
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const totalPnLElement = document.getElementById('totalPnLValue');
        if (totalPnLElement) {
            totalPnLElement.textContent = `$${totalPnL.toFixed(2)}`;
            totalPnLElement.style.color = totalPnL >= 0 ? '#4caf50' : '#f44336';
            this.logDebug(`[BotsManager] üìä –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç totalPnLValue: $${totalPnL.toFixed(2)}`);
        } else {
            console.warn('[BotsManager] ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç totalPnLValue –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        
        this.logDebug(`[BotsManager] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: PnL=$${totalPnL.toFixed(2)}, –í –ø–æ–∑–∏—Ü–∏–∏=${inPositionCount}`);
    }

    startPeriodicUpdate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –µ–¥–∏–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        this.updateInterval = setInterval(() => {
            if (this.serviceOnline) {
                this.logDebug('[BotsManager] üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                this.loadCoinsRsiData();
                this.loadAccountInfo();
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–±–æ—Ç–∞ –∏ –±–æ—Ç–æ–≤
                this.loadActiveBotsData();
        } else {
                this.checkBotsService();
            }
        }, this.refreshInterval);
        
        // –û—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        this.accountUpdateInterval = setInterval(() => {
            if (this.serviceOnline) {
                this.logDebug('[BotsManager] üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞...');
                this.loadAccountInfo();
            }
        }, 1000); // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
        console.log(`[BotsManager] ‚è∞ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (${this.refreshInterval/1000} —Å–µ–∫)`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å —Ç–µ–º –∂–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        this.startBotMonitoring();
    }
    
    startBotMonitoring() {
        console.log('[BotsManager] üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.monitoringTimer) {
            clearInterval(this.monitoringTimer);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –µ–¥–∏–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        this.monitoringTimer = setInterval(() => {
            this.updateActiveBotsDetailed();
        }, this.refreshInterval);
        
        console.log(`[BotsManager] ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.refreshInterval}–º—Å)`);
    }
    
    stopBotMonitoring() {
        if (this.monitoringTimer) {
            clearInterval(this.monitoringTimer);
            this.monitoringTimer = null;
            console.log('[BotsManager] ‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }
    
    async updateActiveBotsDetailed() {
        if (!this.serviceOnline) return;
        
        try {
            this.logDebug('[BotsManager] üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–∞—Ö...');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–∞—Ö
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/active-detailed`);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            if (data.success && data.bots) {
                this.updateBotsDetailedDisplay(data.bots);
                this.logDebug(`[BotsManager] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ${data.bots.length} –±–æ—Ç–æ–≤`);
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–∞—Ö:', error);
        }
    }
    
    updateBotsDetailedDisplay(bots) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        bots.forEach(bot => {
            this.updateSingleBotDisplay(bot);
        });
    }
    
    updateSingleBotDisplay(bot) {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
        const botElement = document.querySelector(`[data-bot-symbol="${bot.symbol}"]`);
        if (!botElement) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º PnL
        const pnlElement = botElement.querySelector('.bot-pnl');
        if (pnlElement) {
            const pnl = bot.pnl || 0;
            pnlElement.textContent = `PnL: $${pnl.toFixed(2)}`;
            pnlElement.style.color = pnl >= 0 ? 'var(--green-color)' : 'var(--red-color)';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        const priceElement = botElement.querySelector('.bot-price');
        if (priceElement && bot.current_price) {
            priceElement.textContent = `$${bot.current_price.toFixed(6)}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        const directionElement = botElement.querySelector('.bot-direction');
        if (directionElement) {
            if (bot.position_side === 'Long') {
                directionElement.textContent = 'üìà LONG';
                directionElement.style.color = 'var(--green-color)';
            } else if (bot.position_side === 'Short') {
                directionElement.textContent = 'üìâ SHORT';
                directionElement.style.color = 'var(--red-color)';
            } else {
                directionElement.textContent = '‚è∏Ô∏è –ù–ï–¢';
                directionElement.style.color = 'var(--gray-color)';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞
        const trailingElement = botElement.querySelector('.bot-trailing');
        if (trailingElement) {
            if (bot.trailing_stop_active) {
                trailingElement.textContent = 'üéØ –¢—Ä–µ–π–ª–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω';
                trailingElement.style.color = 'var(--orange-color)';
            } else {
                trailingElement.textContent = '‚è∏Ô∏è –¢—Ä–µ–π–ª–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
                trailingElement.style.color = 'var(--gray-color)';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É
        const stopLossElement = botElement.querySelector('.bot-stop-loss');
        if (stopLossElement && bot.stop_loss_price) {
            const stopLossPnL = bot.stop_loss_pnl || 0;
            stopLossElement.textContent = `–°—Ç–æ–ø: $${stopLossPnL.toFixed(2)}`;
            stopLossElement.style.color = 'var(--red-color)';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ–∑–∏—Ü–∏–∏
        const timeElement = botElement.querySelector('.bot-time-left');
        if (timeElement && bot.position_start_time && bot.max_position_hours > 0) {
            const timeLeft = this.calculateTimeLeft(bot.position_start_time, bot.max_position_hours);
            timeElement.textContent = `–í—Ä–µ–º—è: ${timeLeft}`;
            timeElement.style.color = timeLeft.includes('0:00') ? 'var(--red-color)' : 'var(--blue-color)';
        } else if (timeElement) {
            timeElement.textContent = '–í—Ä–µ–º—è: ‚àû';
            timeElement.style.color = 'var(--gray-color)';
        }
    }
    
    calculateTimeLeft(startTime, maxHours) {
        const start = new Date(startTime);
        const now = new Date();
        const elapsed = now - start;
        const maxMs = maxHours * 60 * 60 * 1000;
        const remaining = maxMs - elapsed;
        
        if (remaining <= 0) {
            return '0:00';
        }
        
        const hours = Math.floor(remaining / (60 * 60 * 1000));
        const minutes = Math.floor((remaining % (60 * 60 * 1000)) / (60 * 1000));
        
        return `${hours}:${minutes.toString().padStart(2, '0')}`;
    }

    destroy() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
        
        if (this.accountUpdateInterval) {
            clearInterval(this.accountUpdateInterval);
            this.accountUpdateInterval = null;
        }
        
        if (this.monitoringTimer) {
            clearInterval(this.monitoringTimer);
            this.monitoringTimer = null;
        }
        
        console.log('[BotsManager] üõë –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
    
    // ==========================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ù–û–ü–û–ö –û–ë–õ–ê–°–¢–ò –î–ï–ô–°–¢–í–ò–Ø
    // ==========================================
    
    initializeScopeButtons() {
        const scopeButtons = document.querySelectorAll('.scope-btn');
        const scopeInput = document.getElementById('autoBotScope');
        
        if (!scopeButtons.length || !scopeInput) return;
        
        scopeButtons.forEach(button => {
            button.addEventListener('click', () => {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                scopeButtons.forEach(btn => btn.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É
                button.classList.add('active');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
                const value = button.getAttribute('data-value');
                scopeInput.value = value;
                
                console.log('[BotsManager] üéØ –û–±–ª–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', value);
            });
        });
        
        console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∏ –æ–±–ª–∞—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    // ==========================================
    // –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
    // ==========================================
    
    async loadConfigurationData() {
        console.log('[BotsManager] üìã –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ù–ê–ß–ê–¢–ê...');
        console.log('[BotsManager] üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API...');
        
        try {
            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö Auto Bot –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            const [autoBotResponse, systemResponse] = await Promise.all([
                fetch(`${this.BOTS_SERVICE_URL}/api/bots/auto-bot`),
                fetch(`${this.BOTS_SERVICE_URL}/api/bots/system-config`)
            ]);
            
            console.log('[BotsManager] üì° –û—Ç–≤–µ—Ç—ã API –ø–æ–ª—É—á–µ–Ω—ã');
            console.log('   Auto Bot status:', autoBotResponse.status);
            console.log('   System config status:', systemResponse.status);
            
            if (!autoBotResponse.ok || !systemResponse.ok) {
                throw new Error(`HTTP ${autoBotResponse.status} –∏–ª–∏ ${systemResponse.status}`);
            }
            
            const autoBotData = await autoBotResponse.json();
            const systemData = await systemResponse.json();
            
            console.log('[BotsManager] üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:');
            console.log('   Auto Bot:', autoBotData);
            console.log('   System:', systemData);
            
            if (autoBotData.success && systemData.success) {
                const config = {
                    autoBot: autoBotData.config,
                    system: systemData.config
                };
                
                console.log('[BotsManager] üìã –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏...');
                console.log('[BotsManager] üöÄ –í–´–ó–û–í populateConfigurationForm —Å config:', config);
                this.populateConfigurationForm(config);
                console.log('[BotsManager] üéØ populateConfigurationForm –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Auto Bot
                console.log('[BotsManager] ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è Auto Bot...');
                this.initializeGlobalAutoBotToggle();
            this.initializeMobileAutoBotToggle();
                
                console.log('[BotsManager] ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
                return config;
            } else {
                throw new Error(`API –æ—à–∏–±–∫–∞: ${autoBotData.message || systemData.message}`);
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', 'error');
            throw error;
        }
    }
    
    populateConfigurationForm(config) {
        this.logDebug('[BotsManager] üîß –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', config);
        this.logDebug('[BotsManager] üîç DOM –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:', document.readyState);
        this.logDebug('[BotsManager] üîç –≠–ª–µ–º–µ–Ω—Ç positionSyncInterval —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!document.getElementById('positionSyncInterval'));
        this.logDebug('[BotsManager] üîç –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
        this.logDebug('   autoBot:', config.autoBot);
        this.logDebug('   system:', config.system);
        
        const autoBotConfig = config.autoBot || config;
        
        // ==========================================
        // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø AUTO BOT
        // ==========================================
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Auto Bot (–≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ)
        
        const maxConcurrentEl = document.getElementById('autoBotMaxConcurrent');
        if (maxConcurrentEl) {
            maxConcurrentEl.value = autoBotConfig.max_concurrent || 5;
            console.log('[BotsManager] üë• –ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤:', maxConcurrentEl.value);
        }
        
        const riskCapEl = document.getElementById('autoBotRiskCap');
        if (riskCapEl) {
            riskCapEl.value = autoBotConfig.risk_cap_percent || 10;
            console.log('[BotsManager] ‚ö†Ô∏è –õ–∏–º–∏—Ç —Ä–∏—Å–∫–∞:', riskCapEl.value);
        }
        
        // –û–±–ª–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
        const scopeEl = document.getElementById('autoBotScope');
        if (scopeEl) {
            const scopeValue = autoBotConfig.scope;
            if (scopeValue !== undefined) {
                scopeEl.value = scopeValue;
                console.log('[BotsManager] üéØ –û–±–ª–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è:', scopeValue);
                
                const scopeButtons = document.querySelectorAll('.scope-btn');
                console.log('[BotsManager] üîç –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –æ–±–ª–∞—Å—Ç–∏:', scopeButtons.length);
                
                scopeButtons.forEach(btn => {
                    btn.classList.remove('active');
                    const btnValue = btn.getAttribute('data-value');
                    if (btnValue === scopeEl.value) {
                        btn.classList.add('active');
                        console.log('[BotsManager] ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞:', btnValue);
                    }
                });
            } else {
                console.warn('[BotsManager] ‚ö†Ô∏è –û–±–ª–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø—É—Å—Ç—ã–º');
            }
        } else {
            console.error('[BotsManager] ‚ùå –≠–ª–µ–º–µ–Ω—Ç autoBotScope –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        
        // –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const rsiLongEl = document.getElementById('rsiLongThreshold');
        if (rsiLongEl) {
            rsiLongEl.value = autoBotConfig.rsi_long_threshold || 29;
            console.log('[BotsManager] üìà RSI LONG –ø–æ—Ä–æ–≥:', rsiLongEl.value);
        }
        
        const rsiShortEl = document.getElementById('rsiShortThreshold');
        if (rsiShortEl) {
            rsiShortEl.value = autoBotConfig.rsi_short_threshold || 71;
            console.log('[BotsManager] üìâ RSI SHORT –ø–æ—Ä–æ–≥:', rsiShortEl.value);
        }
        
        const positionSizeEl = document.getElementById('defaultPositionSize');
        if (positionSizeEl) {
            positionSizeEl.value = autoBotConfig.default_position_size || 10;
            console.log('[BotsManager] üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:', positionSizeEl.value);
        }
        
        const checkIntervalEl = document.getElementById('checkInterval');
        if (checkIntervalEl && autoBotConfig.check_interval !== undefined) {
            checkIntervalEl.value = autoBotConfig.check_interval;
            console.log('[BotsManager] ‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', autoBotConfig.check_interval, '(–∏–∑ API)');
        } else if (checkIntervalEl) {
            console.warn('[BotsManager] ‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø—É—Å—Ç—ã–º');
        }
        

        
        const rsiExitLongEl = document.getElementById('rsiExitLong');
        if (rsiExitLongEl) {
            rsiExitLongEl.value = autoBotConfig.rsi_exit_long || 65;
            console.log('[BotsManager] üü¢ RSI –≤—ã—Ö–æ–¥ LONG:', rsiExitLongEl.value);
        }
        
        const rsiExitShortEl = document.getElementById('rsiExitShort');
        if (rsiExitShortEl) {
            rsiExitShortEl.value = autoBotConfig.rsi_exit_short || 35;
            console.log('[BotsManager] üî¥ RSI –≤—ã—Ö–æ–¥ SHORT:', rsiExitShortEl.value);
        }
        
        // –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ backend)
        
        const useTestServerEl1 = document.getElementById('useTestServer');
        if (useTestServerEl1) {
            useTestServerEl1.checked = autoBotConfig.use_test_server || false;
            console.log('[BotsManager] üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä:', useTestServerEl1.checked);
        }
        
        const maxRiskEl = document.getElementById('maxRiskPerTrade');
        if (maxRiskEl) {
            maxRiskEl.value = autoBotConfig.max_risk_per_trade || 2.0;
            console.log('[BotsManager] ‚ö†Ô∏è –ú–∞–∫—Å. —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É:', maxRiskEl.value);
        }
        
        // ==========================================
        // –ó–ê–©–ò–¢–ù–´–ï –ú–ï–•–ê–ù–ò–ó–ú–´
        // ==========================================
        
        const maxLossPercentEl = document.getElementById('maxLossPercent');
        if (maxLossPercentEl) {
            maxLossPercentEl.value = autoBotConfig.max_loss_percent || 15.0;
            console.log('[BotsManager] üõ°Ô∏è –ú–∞–∫—Å. —É–±—ã—Ç–æ–∫ (—Å—Ç–æ–ø-–ª–æ—Å—Å):', maxLossPercentEl.value);
        }
        
        const trailingStopActivationEl = document.getElementById('trailingStopActivation');
        if (trailingStopActivationEl) {
            trailingStopActivationEl.value = autoBotConfig.trailing_stop_activation || 300.0;
            console.log('[BotsManager] üìà –ê–∫—Ç–∏–≤–∞—Ü–∏—è trailing stop:', trailingStopActivationEl.value);
        }
        
        const trailingStopDistanceEl = document.getElementById('trailingStopDistance');
        if (trailingStopDistanceEl) {
            trailingStopDistanceEl.value = autoBotConfig.trailing_stop_distance || 150.0;
            console.log('[BotsManager] üìâ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ trailing stop:', trailingStopDistanceEl.value);
        }
        
        const maxPositionHoursEl = document.getElementById('maxPositionHours');
        if (maxPositionHoursEl) {
            maxPositionHoursEl.value = autoBotConfig.max_position_hours || 0;
            console.log('[BotsManager] ‚è∞ –ú–∞–∫—Å. –≤—Ä–µ–º—è –ø–æ–∑–∏—Ü–∏–∏ (—á–∞—Å–æ–≤):', maxPositionHoursEl.value);
        }
        
        const breakEvenProtectionEl = document.getElementById('breakEvenProtection');
        if (breakEvenProtectionEl) {
            breakEvenProtectionEl.checked = autoBotConfig.break_even_protection !== false;
            console.log('[BotsManager] üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏:', breakEvenProtectionEl.checked);
        }
        
        const breakEvenTriggerEl = document.getElementById('breakEvenTrigger');
        if (breakEvenTriggerEl) {
            breakEvenTriggerEl.value = autoBotConfig.break_even_trigger || 100.0;
            console.log('[BotsManager] üéØ –¢—Ä–∏–≥–≥–µ—Ä –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏:', breakEvenTriggerEl.value);
        }
        
        // ==========================================
        // –§–ò–õ–¨–¢–†–´ –ü–û –¢–†–ï–ù–î–£
        // ==========================================
        
        const avoidDownTrendEl = document.getElementById('avoidDownTrend');
        if (avoidDownTrendEl) {
            avoidDownTrendEl.checked = autoBotConfig.avoid_down_trend !== false;
            console.log('[BotsManager] üìâ –ò–∑–±–µ–≥–∞—Ç—å DOWN —Ç—Ä–µ–Ω–¥:', avoidDownTrendEl.checked);
        }
        
        const avoidUpTrendEl = document.getElementById('avoidUpTrend');
        if (avoidUpTrendEl) {
            avoidUpTrendEl.checked = autoBotConfig.avoid_up_trend !== false;
            console.log('[BotsManager] üìà –ò–∑–±–µ–≥–∞—Ç—å UP —Ç—Ä–µ–Ω–¥:', avoidUpTrendEl.checked);
        }
        
        // ==========================================
        // –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
        // ==========================================
        const systemConfig = config.system || {};
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –¢–û–õ–¨–ö–û –∏–∑ API, –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const rsiUpdateIntervalEl = document.getElementById('rsiUpdateInterval');
        if (rsiUpdateIntervalEl && systemConfig.rsi_update_interval !== undefined) {
            rsiUpdateIntervalEl.value = systemConfig.rsi_update_interval;
            console.log('[BotsManager] üîÑ RSI –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', systemConfig.rsi_update_interval, '(–∏–∑ API)');
        } else if (rsiUpdateIntervalEl) {
            console.warn('[BotsManager] ‚ö†Ô∏è RSI –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø—É—Å—Ç—ã–º');
        } else {
            console.error('[BotsManager] ‚ùå –≠–ª–µ–º–µ–Ω—Ç rsiUpdateInterval –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        
        const autoSaveIntervalEl = document.getElementById('autoSaveInterval');
        if (autoSaveIntervalEl && systemConfig.auto_save_interval !== undefined) {
            autoSaveIntervalEl.value = systemConfig.auto_save_interval;
            console.log('[BotsManager] üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', systemConfig.auto_save_interval, '(–∏–∑ API)');
        } else if (autoSaveIntervalEl) {
            console.warn('[BotsManager] ‚ö†Ô∏è –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø—É—Å—Ç—ã–º');
        } else {
            console.error('[BotsManager] ‚ùå –≠–ª–µ–º–µ–Ω—Ç autoSaveInterval –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        
        // –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        const debugModeEl = document.getElementById('debugMode');
        if (debugModeEl) {
            debugModeEl.checked = systemConfig.debug_mode || false;
            console.log('[BotsManager] üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏:', debugModeEl.checked);
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        const autoRefreshUIEl = document.getElementById('autoRefreshUI');
        if (autoRefreshUIEl) {
            autoRefreshUIEl.checked = systemConfig.auto_refresh_ui !== false;
            console.log('[BotsManager] üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI:', autoRefreshUIEl.checked);
        }
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        const refreshIntervalEl = document.getElementById('refreshInterval');
        if (refreshIntervalEl && systemConfig.refresh_interval !== undefined) {
            refreshIntervalEl.value = systemConfig.refresh_interval;
            this.refreshInterval = systemConfig.refresh_interval * 1000;
            console.log('[BotsManager] üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', systemConfig.refresh_interval, '—Å–µ–∫ (–∏–∑ API)');
        } else if (refreshIntervalEl) {
            refreshIntervalEl.value = 3; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.refreshInterval = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.log('[BotsManager] üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3 —Å–µ–∫');
        }
        
        // ==========================================
        // –ò–ù–¢–ï–†–í–ê–õ–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ò –û–ß–ò–°–¢–ö–ò
        // ==========================================
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π
        const positionSyncIntervalEl = document.getElementById('positionSyncInterval');
        console.log('[BotsManager] üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ positionSyncInterval:', positionSyncIntervalEl);
        console.log('[BotsManager] üîç systemConfig.position_sync_interval:', systemConfig.position_sync_interval);
        if (positionSyncIntervalEl && systemConfig.position_sync_interval !== undefined) {
            positionSyncIntervalEl.value = systemConfig.position_sync_interval;
            console.log('[BotsManager] üîÑ Position Sync –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', systemConfig.position_sync_interval, '—Å–µ–∫ (–∏–∑ API)');
        } else if (positionSyncIntervalEl) {
            positionSyncIntervalEl.value = 600; // 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.log('[BotsManager] üîÑ Position Sync –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 600 —Å–µ–∫');
        } else {
            console.error('[BotsManager] ‚ùå –≠–ª–µ–º–µ–Ω—Ç positionSyncInterval –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        const inactiveBotCleanupIntervalEl = document.getElementById('inactiveBotCleanupInterval');
        if (inactiveBotCleanupIntervalEl && systemConfig.inactive_bot_cleanup_interval !== undefined) {
            inactiveBotCleanupIntervalEl.value = systemConfig.inactive_bot_cleanup_interval;
            console.log('[BotsManager] üßπ Inactive Bot Cleanup –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', systemConfig.inactive_bot_cleanup_interval, '—Å–µ–∫ (–∏–∑ API)');
        } else if (inactiveBotCleanupIntervalEl) {
            inactiveBotCleanupIntervalEl.value = 600; // 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.log('[BotsManager] üßπ Inactive Bot Cleanup –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 600 —Å–µ–∫');
        }
        
        // –¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
        const inactiveBotTimeoutEl = document.getElementById('inactiveBotTimeout');
        if (inactiveBotTimeoutEl && systemConfig.inactive_bot_timeout !== undefined) {
            inactiveBotTimeoutEl.value = systemConfig.inactive_bot_timeout;
            console.log('[BotsManager] ‚è∞ Inactive Bot Timeout —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', systemConfig.inactive_bot_timeout, '—Å–µ–∫ (–∏–∑ API)');
        } else if (inactiveBotTimeoutEl) {
            inactiveBotTimeoutEl.value = 600; // 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.log('[BotsManager] ‚è∞ Inactive Bot Timeout —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 600 —Å–µ–∫');
        }
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
        const stopLossSetupIntervalEl = document.getElementById('stopLossSetupInterval');
        if (stopLossSetupIntervalEl && systemConfig.stop_loss_setup_interval !== undefined) {
            stopLossSetupIntervalEl.value = systemConfig.stop_loss_setup_interval;
            console.log('[BotsManager] üõ°Ô∏è Stop Loss Setup –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', systemConfig.stop_loss_setup_interval, '—Å–µ–∫ (–∏–∑ API)');
        } else if (stopLossSetupIntervalEl) {
            stopLossSetupIntervalEl.value = 300; // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.log('[BotsManager] üõ°Ô∏è Stop Loss Setup –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300 —Å–µ–∫');
        }
        
        // ==========================================
        // RSI –í–†–ï–ú–ï–ù–ù–û–ô –§–ò–õ–¨–¢–†
        // ==========================================
        
        const rsiTimeFilterEnabledEl = document.getElementById('rsiTimeFilterEnabled');
        if (rsiTimeFilterEnabledEl) {
            rsiTimeFilterEnabledEl.checked = autoBotConfig.rsi_time_filter_enabled !== false;
            console.log('[BotsManager] ‚è∞ RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä:', rsiTimeFilterEnabledEl.checked);
        }
        
        const rsiTimeFilterCandlesEl = document.getElementById('rsiTimeFilterCandles');
        if (rsiTimeFilterCandlesEl) {
            rsiTimeFilterCandlesEl.value = autoBotConfig.rsi_time_filter_candles || 8;
            console.log('[BotsManager] üïê RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä (—Å–≤–µ—á–µ–π):', rsiTimeFilterCandlesEl.value);
        }
        
        const rsiTimeFilterUpperEl = document.getElementById('rsiTimeFilterUpper');
        if (rsiTimeFilterUpperEl) {
            rsiTimeFilterUpperEl.value = autoBotConfig.rsi_time_filter_upper || 65;
            console.log('[BotsManager] üìà RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä (–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞):', rsiTimeFilterUpperEl.value);
        }
        
        const rsiTimeFilterLowerEl = document.getElementById('rsiTimeFilterLower');
        if (rsiTimeFilterLowerEl) {
            rsiTimeFilterLowerEl.value = autoBotConfig.rsi_time_filter_lower || 35;
            console.log('[BotsManager] üìâ RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä (–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞):', rsiTimeFilterLowerEl.value);
        }
        
        // ==========================================
        // EXITSCAM –§–ò–õ–¨–¢–†
        // ==========================================
        
        const exitScamEnabledEl = document.getElementById('exitScamEnabled');
        if (exitScamEnabledEl) {
            exitScamEnabledEl.checked = autoBotConfig.exit_scam_enabled !== false;
            console.log('[BotsManager] üõ°Ô∏è ExitScam —Ñ–∏–ª—å—Ç—Ä:', exitScamEnabledEl.checked);
        }
        
        const exitScamCandlesEl = document.getElementById('exitScamCandles');
        if (exitScamCandlesEl) {
            exitScamCandlesEl.value = autoBotConfig.exit_scam_candles || 10;
            console.log('[BotsManager] üìä ExitScam –∞–Ω–∞–ª–∏–∑ —Å–≤–µ—á–µ–π:', exitScamCandlesEl.value);
        }
        
        const exitScamSingleCandlePercentEl = document.getElementById('exitScamSingleCandlePercent');
        if (exitScamSingleCandlePercentEl) {
            exitScamSingleCandlePercentEl.value = autoBotConfig.exit_scam_single_candle_percent || 15.0;
            console.log('[BotsManager] ‚ö° ExitScam –ª–∏–º–∏—Ç –æ–¥–Ω–æ–π —Å–≤–µ—á–∏:', exitScamSingleCandlePercentEl.value);
        }
        
        const exitScamMultiCandleCountEl = document.getElementById('exitScamMultiCandleCount');
        if (exitScamMultiCandleCountEl) {
            exitScamMultiCandleCountEl.value = autoBotConfig.exit_scam_multi_candle_count || 4;
            console.log('[BotsManager] üìà ExitScam —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', exitScamMultiCandleCountEl.value);
        }
        
        const exitScamMultiCandlePercentEl = document.getElementById('exitScamMultiCandlePercent');
        if (exitScamMultiCandlePercentEl) {
            exitScamMultiCandlePercentEl.value = autoBotConfig.exit_scam_multi_candle_percent || 50.0;
            console.log('[BotsManager] üìä ExitScam —Å—É–º–º–∞—Ä–Ω—ã–π –ª–∏–º–∏—Ç:', exitScamMultiCandlePercentEl.value);
        }
        
        // ==========================================
        // –ù–ê–°–¢–†–û–ô–ö–ò –ó–†–ï–õ–û–°–¢–ò –ú–û–ù–ï–¢
        // ==========================================
        
        const enableMaturityCheckEl = document.getElementById('enableMaturityCheck');
        if (enableMaturityCheckEl) {
            enableMaturityCheckEl.checked = autoBotConfig.enable_maturity_check !== false;
            console.log('[BotsManager] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏:', enableMaturityCheckEl.checked);
        }
        
        const minCandlesForMaturityEl = document.getElementById('minCandlesForMaturity');
        if (minCandlesForMaturityEl) {
            minCandlesForMaturityEl.value = autoBotConfig.min_candles_for_maturity || 200;
            console.log('[BotsManager] üìä –ú–∏–Ω. —Å–≤–µ—á–µ–π –¥–ª—è –∑—Ä–µ–ª–æ—Å—Ç–∏:', minCandlesForMaturityEl.value);
        }
        
        const minRsiLowEl = document.getElementById('minRsiLow');
        if (minRsiLowEl) {
            minRsiLowEl.value = autoBotConfig.min_rsi_low || 35;
            console.log('[BotsManager] üìâ –ú–∏–Ω. RSI low:', minRsiLowEl.value);
        }
        
        const maxRsiHighEl = document.getElementById('maxRsiHigh');
        if (maxRsiHighEl) {
            maxRsiHighEl.value = autoBotConfig.max_rsi_high || 65;
            console.log('[BotsManager] üìà –ú–∞–∫—Å. RSI high:', maxRsiHighEl.value);
        }
        
        // ==========================================
        // ENHANCED RSI (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê RSI)
        // ==========================================
        
        const enhancedRsiEnabledEl = document.getElementById('enhancedRsiEnabled');
        if (enhancedRsiEnabledEl) {
            enhancedRsiEnabledEl.checked = systemConfig.enhanced_rsi_enabled || false;
            console.log('[BotsManager] üß† Enhanced RSI –≤–∫–ª—é—á–µ–Ω:', enhancedRsiEnabledEl.checked);
        }
        
        const enhancedRsiVolumeConfirmEl = document.getElementById('enhancedRsiVolumeConfirm');
        if (enhancedRsiVolumeConfirmEl) {
            enhancedRsiVolumeConfirmEl.checked = systemConfig.enhanced_rsi_require_volume_confirmation || false;
            console.log('[BotsManager] üìä Enhanced RSI —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–º:', enhancedRsiVolumeConfirmEl.checked);
        }
        
        const enhancedRsiDivergenceConfirmEl = document.getElementById('enhancedRsiDivergenceConfirm');
        if (enhancedRsiDivergenceConfirmEl) {
            enhancedRsiDivergenceConfirmEl.checked = systemConfig.enhanced_rsi_require_divergence_confirmation || false;
            console.log('[BotsManager] üìà Enhanced RSI —Ç—Ä–µ–±—É–µ—Ç –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—é:', enhancedRsiDivergenceConfirmEl.checked);
        }
        
        const enhancedRsiUseStochRsiEl = document.getElementById('enhancedRsiUseStochRsi');
        if (enhancedRsiUseStochRsiEl) {
            enhancedRsiUseStochRsiEl.checked = systemConfig.enhanced_rsi_use_stoch_rsi || false;
            console.log('[BotsManager] üìä Enhanced RSI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Stoch RSI:', enhancedRsiUseStochRsiEl.checked);
        }
        
        const rsiExtremeZoneTimeoutEl = document.getElementById('rsiExtremeZoneTimeout');
        if (rsiExtremeZoneTimeoutEl) {
            rsiExtremeZoneTimeoutEl.value = systemConfig.rsi_extreme_zone_timeout || 3;
            console.log('[BotsManager] ‚è∞ RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ —Ç–∞–π–º–∞—É—Ç:', rsiExtremeZoneTimeoutEl.value);
        }
        
        const rsiExtremeOversoldEl = document.getElementById('rsiExtremeOversold');
        if (rsiExtremeOversoldEl) {
            rsiExtremeOversoldEl.value = systemConfig.rsi_extreme_oversold || 20;
            console.log('[BotsManager] üìâ RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π oversold:', rsiExtremeOversoldEl.value);
        }
        
        const rsiExtremeOverboughtEl = document.getElementById('rsiExtremeOverbought');
        if (rsiExtremeOverboughtEl) {
            rsiExtremeOverboughtEl.value = systemConfig.rsi_extreme_overbought || 80;
            console.log('[BotsManager] üìà RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π overbought:', rsiExtremeOverboughtEl.value);
        }
        
        const rsiVolumeMultiplierEl = document.getElementById('rsiVolumeMultiplier');
        if (rsiVolumeMultiplierEl) {
            rsiVolumeMultiplierEl.value = systemConfig.rsi_volume_confirmation_multiplier || 1.2;
            console.log('[BotsManager] üìä RSI –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä—ë–º–∞:', rsiVolumeMultiplierEl.value);
        }
        
        const rsiDivergenceLookbackEl = document.getElementById('rsiDivergenceLookback');
        if (rsiDivergenceLookbackEl) {
            rsiDivergenceLookbackEl.value = systemConfig.rsi_divergence_lookback || 10;
            console.log('[BotsManager] üîç RSI –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π:', rsiDivergenceLookbackEl.value);
        }
        
        // ==========================================
        // –ü–ê–†–ê–ú–ï–¢–†–´ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–†–ï–ù–î–ê
        // ==========================================
        
        const trendConfirmationBarsEl = document.getElementById('trendConfirmationBars');
        if (trendConfirmationBarsEl && systemConfig.trend_confirmation_bars !== undefined) {
            trendConfirmationBarsEl.value = systemConfig.trend_confirmation_bars;
            console.log('[BotsManager] üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞:', trendConfirmationBarsEl.value);
        }
        
        const trendMinConfirmationsEl = document.getElementById('trendMinConfirmations');
        if (trendMinConfirmationsEl && systemConfig.trend_min_confirmations !== undefined) {
            trendMinConfirmationsEl.value = systemConfig.trend_min_confirmations;
            console.log('[BotsManager] ‚úÖ –ú–∏–Ω–∏–º—É–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Ç—Ä–µ–Ω–¥–∞:', trendMinConfirmationsEl.value);
        }
        
        const trendRequireSlopeEl = document.getElementById('trendRequireSlope');
        if (trendRequireSlopeEl) {
            trendRequireSlopeEl.checked = systemConfig.trend_require_slope || false;
            console.log('[BotsManager] üìà –¢—Ä–µ–±–æ–≤–∞—Ç—å –Ω–∞–∫–ª–æ–Ω EMA:', trendRequireSlopeEl.checked);
        }
        
        const trendRequirePriceEl = document.getElementById('trendRequirePrice');
        if (trendRequirePriceEl) {
            trendRequirePriceEl.checked = systemConfig.trend_require_price !== false;
            console.log('[BotsManager] üí∞ –¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ü–µ–Ω—ã:', trendRequirePriceEl.checked);
        }
        
        const trendRequireCandlesEl = document.getElementById('trendRequireCandles');
        if (trendRequireCandlesEl) {
            trendRequireCandlesEl.checked = systemConfig.trend_require_candles !== false;
            console.log('[BotsManager] üïØÔ∏è –¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–≤–µ—á–∞–º–∏:', trendRequireCandlesEl.checked);
        }
        
        console.log('[BotsManager] ‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API');
    }
    
    // ==========================================
    // –ò–ù–î–ò–ö–ê–¢–û–† –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
    // ==========================================
    
    showConfigurationLoading(show) {
        const configContainer = document.getElementById('configTab');
        if (!configContainer) return;
        
        if (show) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            configContainer.classList.add('loading');
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
            const inputs = configContainer.querySelectorAll('input, select, button:not(.scope-btn)');
            inputs.forEach(input => {
                input.disabled = true;
                input.style.opacity = '0.6';
            });
            
            console.log('[BotsManager] ‚è≥ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
        } else {
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            configContainer.classList.remove('loading');
            
            // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
            const inputs = configContainer.querySelectorAll('input, select, button');
            inputs.forEach(input => {
                input.disabled = false;
                input.style.opacity = '1';
            });
            
            console.log('[BotsManager] ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
    }
    
    // ==========================================
    // –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô
    // ==========================================
    
    async loadConfigurationData() {
        this.logDebug('[BotsManager] üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        try {
            this.logDebug('[BotsManager] üåê –ó–∞–ø—Ä–æ—Å Auto Bot –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Auto Bot
            const autoBotResponse = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/auto-bot`);
            this.logDebug('[BotsManager] üì° Auto Bot response status:', autoBotResponse.status);
            const autoBotData = await autoBotResponse.json();
            this.logDebug('[BotsManager] ü§ñ Auto Bot data:', autoBotData);
            
            this.logDebug('[BotsManager] üåê –ó–∞–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const systemResponse = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/system-config`);
            this.logDebug('[BotsManager] üì° System response status:', systemResponse.status);
            const systemData = await systemResponse.json();
            this.logDebug('[BotsManager] ‚öôÔ∏è System data:', systemData);
            
            if (autoBotData.success && systemData.success) {
                this.populateConfigurationForm({
                    autoBot: autoBotData.config,
                    system: systemData.config
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º RSI –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                this.updateRsiThresholds(autoBotData.config);
                
                console.log('[BotsManager] ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                console.log('[BotsManager] Auto Bot config:', autoBotData.config);
                console.log('[BotsManager] System config:', systemData.config);
            } else {
                const errorMsg = !autoBotData.success ? autoBotData.message : systemData.message;
                console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', errorMsg);
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        }
    }
    
    async saveDefaultConfiguration(defaultConfig) {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º Auto Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const autoBotResponse = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/auto-bot`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(defaultConfig.autoBot)
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const systemResponse = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/system-config`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(defaultConfig.system)
            });
            
            const autoBotData = await autoBotResponse.json();
            const systemData = await systemResponse.json();
            
            if (autoBotData.success && systemData.success) {
                console.log('[BotsManager] ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
                console.log('[BotsManager] üìä Auto Bot —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', autoBotData.saved_to_file);
                console.log('[BotsManager] üîß System config —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', systemData.success);
                return true;
            } else {
                throw new Error(`API –æ—à–∏–±–∫–∞: ${autoBotData.message || systemData.message}`);
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
            throw error;
        }
    }
    
    collectConfigurationData() {
        console.log('[BotsManager] üìã –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        // üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Enhanced RSI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('[BotsManager] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Enhanced RSI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DOM:');
        console.log('  enhancedRsiEnabled —ç–ª–µ–º–µ–Ω—Ç:', !!document.getElementById('enhancedRsiEnabled'));
        console.log('  enhancedRsiVolumeConfirm —ç–ª–µ–º–µ–Ω—Ç:', !!document.getElementById('enhancedRsiVolumeConfirm'));
        console.log('  enhancedRsiDivergenceConfirm —ç–ª–µ–º–µ–Ω—Ç:', !!document.getElementById('enhancedRsiDivergenceConfirm'));
        console.log('  enhancedRsiUseStochRsi —ç–ª–µ–º–µ–Ω—Ç:', !!document.getElementById('enhancedRsiUseStochRsi'));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        const positionSyncEl = document.getElementById('positionSyncInterval');
        const inactiveCleanupEl = document.getElementById('inactiveBotCleanupInterval');
        const inactiveTimeoutEl = document.getElementById('inactiveBotTimeout');
        const stopLossSetupEl = document.getElementById('stopLossSetupInterval');
        
        console.log('[BotsManager] üîç –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π:');
        console.log('  positionSyncInterval:', positionSyncEl?.value);
        console.log('  inactiveBotCleanupInterval:', inactiveCleanupEl?.value);
        console.log('  inactiveBotTimeout:', inactiveTimeoutEl?.value);
        console.log('  stopLossSetupInterval:', stopLossSetupEl?.value);
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ Auto Bot
        const autoBotConfig = {
            enabled: document.getElementById('globalAutoBotToggle')?.checked || false,
            max_concurrent: parseInt(document.getElementById('autoBotMaxConcurrent')?.value) || 5,
            risk_cap_percent: parseFloat(document.getElementById('autoBotRiskCap')?.value) || 10,
            scope: document.getElementById('autoBotScope')?.value || 'all',
            rsi_long_threshold: parseInt(document.getElementById('rsiLongThreshold')?.value) || 29,
            rsi_short_threshold: parseInt(document.getElementById('rsiShortThreshold')?.value) || 71,
            rsi_exit_long: parseInt(document.getElementById('rsiExitLong')?.value) || 65,
            rsi_exit_short: parseInt(document.getElementById('rsiExitShort')?.value) || 35,
            default_position_size: parseFloat(document.getElementById('defaultPositionSize')?.value) || 10,
            check_interval: parseInt(document.getElementById('checkInterval')?.value) || 180,
            max_loss_percent: parseFloat(document.getElementById('maxLossPercent')?.value) || 15.0,
            trailing_stop_activation: parseFloat(document.getElementById('trailingStopActivation')?.value) || 300.0,
            trailing_stop_distance: parseFloat(document.getElementById('trailingStopDistance')?.value) || 150.0,
            max_position_hours: parseInt(document.getElementById('maxPositionHours')?.value) || 0,
            break_even_protection: document.getElementById('breakEvenProtection')?.checked !== false,
            avoid_down_trend: document.getElementById('avoidDownTrend')?.checked !== false,
            avoid_up_trend: document.getElementById('avoidUpTrend')?.checked !== false,
            break_even_trigger: parseFloat(document.getElementById('breakEvenTrigger')?.value) || 100.0,
            enable_maturity_check: document.getElementById('enableMaturityCheck')?.checked !== false,
            min_candles_for_maturity: parseInt(document.getElementById('minCandlesForMaturity')?.value) || 200,
            min_rsi_low: parseInt(document.getElementById('minRsiLow')?.value) || 35,
            max_rsi_high: parseInt(document.getElementById('maxRsiHigh')?.value) || 65,
            min_volatility_threshold: parseFloat(document.getElementById('minVolatilityThreshold')?.value) || 0.05,
            // RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
            rsi_time_filter_enabled: document.getElementById('rsiTimeFilterEnabled')?.checked !== false,
            rsi_time_filter_candles: parseInt(document.getElementById('rsiTimeFilterCandles')?.value) || 8,
            rsi_time_filter_upper: parseInt(document.getElementById('rsiTimeFilterUpper')?.value) || 65,
            rsi_time_filter_lower: parseInt(document.getElementById('rsiTimeFilterLower')?.value) || 35,
            // ExitScam —Ñ–∏–ª—å—Ç—Ä
            exit_scam_enabled: document.getElementById('exitScamEnabled')?.checked !== false,
            exit_scam_candles: parseInt(document.getElementById('exitScamCandles')?.value) || 10,
            exit_scam_single_candle_percent: parseFloat(document.getElementById('exitScamSingleCandlePercent')?.value) || 15.0,
            exit_scam_multi_candle_count: parseInt(document.getElementById('exitScamMultiCandleCount')?.value) || 4,
            exit_scam_multi_candle_percent: parseFloat(document.getElementById('exitScamMultiCandlePercent')?.value) || 50.0,
            trading_enabled: document.getElementById('tradingEnabled')?.checked !== false,
            use_test_server: document.getElementById('useTestServer')?.checked || false,
            max_risk_per_trade: parseFloat(document.getElementById('maxRiskPerTrade')?.value) || 2.0,
            enhanced_rsi_enabled: (() => {
                const el = document.getElementById('enhancedRsiEnabled');
                const checked = el?.checked || false;
                console.log('[BotsManager] üîç Enhanced RSI Enabled - —ç–ª–µ–º–µ–Ω—Ç:', !!el, '–∑–Ω–∞—á–µ–Ω–∏–µ:', checked);
                return checked;
            })(),
            enhanced_rsi_require_volume_confirmation: (() => {
                const el = document.getElementById('enhancedRsiVolumeConfirm');
                const checked = el?.checked || false;
                console.log('[BotsManager] üîç Enhanced RSI Volume - —ç–ª–µ–º–µ–Ω—Ç:', !!el, '–∑–Ω–∞—á–µ–Ω–∏–µ:', checked);
                return checked;
            })(),
            enhanced_rsi_require_divergence_confirmation: (() => {
                const el = document.getElementById('enhancedRsiDivergenceConfirm');
                const checked = el?.checked || false;
                console.log('[BotsManager] üîç Enhanced RSI Divergence - —ç–ª–µ–º–µ–Ω—Ç:', !!el, '–∑–Ω–∞—á–µ–Ω–∏–µ:', checked);
                return checked;
            })(),
            enhanced_rsi_use_stoch_rsi: (() => {
                const el = document.getElementById('enhancedRsiUseStochRsi');
                const checked = el?.checked || false;
                console.log('[BotsManager] üîç Enhanced RSI Stoch - —ç–ª–µ–º–µ–Ω—Ç:', !!el, '–∑–Ω–∞—á–µ–Ω–∏–µ:', checked);
                return checked;
            })(),
            rsi_extreme_zone_timeout: parseInt(document.getElementById('rsiExtremeZoneTimeout')?.value) || 3,
            rsi_extreme_oversold: parseInt(document.getElementById('rsiExtremeOversold')?.value) || 20,
            rsi_extreme_overbought: parseInt(document.getElementById('rsiExtremeOverbought')?.value) || 80,
            rsi_volume_confirmation_multiplier: parseFloat(document.getElementById('rsiVolumeMultiplier')?.value) || 1.2,
            rsi_divergence_lookback: parseInt(document.getElementById('rsiDivergenceLookback')?.value) || 10
        };
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const systemConfig = {
            rsi_update_interval: parseInt(document.getElementById('rsiUpdateInterval')?.value) || 1800,
            auto_save_interval: parseInt(document.getElementById('autoSaveInterval')?.value) || 30,
            debug_mode: document.getElementById('debugMode')?.checked || false,
            auto_refresh_ui: document.getElementById('autoRefreshUI')?.checked !== false,
            refresh_interval: parseInt(document.getElementById('refreshInterval')?.value) || 3,
            position_sync_interval: parseInt(document.getElementById('positionSyncInterval')?.value) || 600,
            inactive_bot_cleanup_interval: parseInt(document.getElementById('inactiveBotCleanupInterval')?.value) || 600,
            inactive_bot_timeout: parseInt(document.getElementById('inactiveBotTimeout')?.value) || 600,
            stop_loss_setup_interval: parseInt(document.getElementById('stopLossSetupInterval')?.value) || 300,
            // EMA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–¥–∞
            ema_fast: parseInt(document.getElementById('emaFast')?.value) || 50,
            ema_slow: parseInt(document.getElementById('emaSlow')?.value) || 200,
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            trend_confirmation_bars: parseInt(document.getElementById('trendConfirmationBars')?.value) || 3,
            trend_min_confirmations: parseInt(document.getElementById('trendMinConfirmations')?.value) || 2,
            trend_require_slope: document.getElementById('trendRequireSlope')?.checked || false,
            trend_require_price: document.getElementById('trendRequirePrice')?.checked !== false,
            trend_require_candles: document.getElementById('trendRequireCandles')?.checked !== false,
            // Enhanced RSI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            enhanced_rsi_enabled: autoBotConfig.enhanced_rsi_enabled,
            enhanced_rsi_require_volume_confirmation: autoBotConfig.enhanced_rsi_require_volume_confirmation,
            enhanced_rsi_require_divergence_confirmation: autoBotConfig.enhanced_rsi_require_divergence_confirmation,
            enhanced_rsi_use_stoch_rsi: autoBotConfig.enhanced_rsi_use_stoch_rsi,
            rsi_extreme_zone_timeout: autoBotConfig.rsi_extreme_zone_timeout,
            rsi_extreme_oversold: autoBotConfig.rsi_extreme_oversold,
            rsi_extreme_overbought: autoBotConfig.rsi_extreme_overbought,
            rsi_volume_confirmation_multiplier: autoBotConfig.rsi_volume_confirmation_multiplier,
            rsi_divergence_lookback: autoBotConfig.rsi_divergence_lookback
        };
        
        const result = {
            autoBot: autoBotConfig,
            system: systemConfig
        };
        
        // üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Enhanced RSI
        console.log('[BotsManager] üîç –ò–¢–û–ì–û–í–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Enhanced RSI:');
        console.log('  enhanced_rsi_enabled:', result.autoBot.enhanced_rsi_enabled);
        console.log('  enhanced_rsi_require_volume_confirmation:', result.autoBot.enhanced_rsi_require_volume_confirmation);
        console.log('  enhanced_rsi_require_divergence_confirmation:', result.autoBot.enhanced_rsi_require_divergence_confirmation);
        console.log('  enhanced_rsi_use_stoch_rsi:', result.autoBot.enhanced_rsi_use_stoch_rsi);
        
        return result;
    }

    // ‚úÖ –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –û–¢–î–ï–õ–¨–ù–´–• –ë–õ–û–ö–û–í
    
    async saveBasicSettings() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        try {
            const config = this.collectConfigurationData();
            const basicSettings = {
                enabled: config.autoBot.enabled,
                max_concurrent: config.autoBot.max_concurrent,
                risk_cap_percent: config.autoBot.risk_cap_percent,
                scope: config.autoBot.scope
            };
            
            await this.sendConfigUpdate('auto-bot', basicSettings, '–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }
    
    async saveSystemSettings() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        try {
            const config = this.collectConfigurationData();
            const systemSettings = {
                rsi_update_interval: config.system.rsi_update_interval,
                auto_save_interval: config.system.auto_save_interval,
                debug_mode: config.system.debug_mode,
                auto_refresh_ui: config.system.auto_refresh_ui,
                refresh_interval: config.system.refresh_interval
            };
            
            await this.sendConfigUpdate('system-config', systemSettings, '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }
    
    async saveTradingParameters() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...');
        try {
            const config = this.collectConfigurationData();
            const tradingParams = {
                rsi_long_threshold: config.autoBot.rsi_long_threshold,
                rsi_short_threshold: config.autoBot.rsi_short_threshold,
                rsi_exit_long: config.autoBot.rsi_exit_long,
                rsi_exit_short: config.autoBot.rsi_exit_short,
                default_position_size: config.autoBot.default_position_size,
                check_interval: config.autoBot.check_interval
            };
            
            await this.sendConfigUpdate('auto-bot', tradingParams, '–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', 'error');
        }
    }
    
    async saveRsiExits() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ RSI –≤—ã—Ö–æ–¥–æ–≤...');
        try {
            const config = this.collectConfigurationData();
            const rsiExits = {
                rsi_exit_long: config.autoBot.rsi_exit_long,
                rsi_exit_short: config.autoBot.rsi_exit_short
            };
            
            await this.sendConfigUpdate('auto-bot', rsiExits, 'RSI –≤—ã—Ö–æ–¥—ã');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è RSI –≤—ã—Ö–æ–¥–æ–≤:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è RSI –≤—ã—Ö–æ–¥–æ–≤', 'error');
        }
    }
    
    async saveRsiTimeFilter() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞...');
        try {
            const config = this.collectConfigurationData();
            const rsiTimeFilter = {
                rsi_time_filter_enabled: config.autoBot.rsi_time_filter_enabled,
                rsi_time_filter_candles: config.autoBot.rsi_time_filter_candles,
                rsi_time_filter_upper: config.autoBot.rsi_time_filter_upper,
                rsi_time_filter_lower: config.autoBot.rsi_time_filter_lower
            };
            
            await this.sendConfigUpdate('auto-bot', rsiTimeFilter, 'RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞', 'error');
        }
    }
    
    async saveExitScamFilter() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ExitScam —Ñ–∏–ª—å—Ç—Ä–∞...');
        try {
            const config = this.collectConfigurationData();
            const exitScamFilter = {
                exit_scam_enabled: config.autoBot.exit_scam_enabled,
                exit_scam_candles: config.autoBot.exit_scam_candles,
                exit_scam_single_candle_percent: config.autoBot.exit_scam_single_candle_percent,
                exit_scam_multi_candle_count: config.autoBot.exit_scam_multi_candle_count,
                exit_scam_multi_candle_percent: config.autoBot.exit_scam_multi_candle_percent
            };
            
            await this.sendConfigUpdate('auto-bot', exitScamFilter, 'ExitScam —Ñ–∏–ª—å—Ç—Ä');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ExitScam —Ñ–∏–ª—å—Ç—Ä–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ExitScam —Ñ–∏–ª—å—Ç—Ä–∞', 'error');
        }
    }
    
    async saveEnhancedRsi() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Enhanced RSI...');
        try {
            const config = this.collectConfigurationData();
            const enhancedRsi = {
                enhanced_rsi_enabled: config.autoBot.enhanced_rsi_enabled,
                enhanced_rsi_require_volume_confirmation: config.autoBot.enhanced_rsi_require_volume_confirmation,
                enhanced_rsi_require_divergence_confirmation: config.autoBot.enhanced_rsi_require_divergence_confirmation,
                enhanced_rsi_use_stoch_rsi: config.autoBot.enhanced_rsi_use_stoch_rsi,
                rsi_extreme_zone_timeout: config.autoBot.rsi_extreme_zone_timeout,
                rsi_extreme_oversold: config.autoBot.rsi_extreme_oversold,
                rsi_extreme_overbought: config.autoBot.rsi_extreme_overbought,
                rsi_volume_confirmation_multiplier: config.autoBot.rsi_volume_confirmation_multiplier,
                rsi_divergence_lookback: config.autoBot.rsi_divergence_lookback
            };
            
            await this.sendConfigUpdate('auto-bot', enhancedRsi, 'Enhanced RSI');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Enhanced RSI:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Enhanced RSI', 'error');
        }
    }
    
    async saveTradingSettings() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        try {
            const config = this.collectConfigurationData();
            const tradingSettings = {
                trading_enabled: config.autoBot.trading_enabled,
                use_test_server: config.autoBot.use_test_server,
                max_risk_per_trade: config.autoBot.max_risk_per_trade
            };
            
            await this.sendConfigUpdate('auto-bot', tradingSettings, '–¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }
    
    async saveProtectiveMechanisms() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤...');
        try {
            const config = this.collectConfigurationData();
            const protectiveMechanisms = {
                max_loss_percent: config.autoBot.max_loss_percent,
                trailing_stop_activation: config.autoBot.trailing_stop_activation,
                trailing_stop_distance: config.autoBot.trailing_stop_distance,
                max_position_hours: config.autoBot.max_position_hours,
                break_even_protection: config.autoBot.break_even_protection,
                break_even_trigger: config.autoBot.break_even_trigger,
                avoid_down_trend: config.autoBot.avoid_down_trend,
                avoid_up_trend: config.autoBot.avoid_up_trend
            };
            
            await this.sendConfigUpdate('auto-bot', protectiveMechanisms, '–ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤', 'error');
        }
    }
    
    async saveMaturitySettings() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑—Ä–µ–ª–æ—Å—Ç–∏...');
        try {
            const config = this.collectConfigurationData();
            const maturitySettings = {
                enable_maturity_check: config.autoBot.enable_maturity_check,
                min_candles_for_maturity: config.autoBot.min_candles_for_maturity,
                min_rsi_low: config.autoBot.min_rsi_low,
                max_rsi_high: config.autoBot.max_rsi_high,
                min_volatility_threshold: config.autoBot.min_volatility_threshold
            };
            
            await this.sendConfigUpdate('auto-bot', maturitySettings, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑—Ä–µ–ª–æ—Å—Ç–∏:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑—Ä–µ–ª–æ—Å—Ç–∏', 'error');
        }
    }
    
    async saveEmaParameters() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ EMA –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...');
        try {
            const config = this.collectConfigurationData();
            const emaParameters = {
                ema_fast: config.system.ema_fast,
                ema_slow: config.system.ema_slow,
                trend_confirmation_bars: config.system.trend_confirmation_bars
            };
            
            await this.sendConfigUpdate('system-config', emaParameters, 'EMA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è EMA –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è EMA –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', 'error');
        }
    }
    
    async saveTrendParameters() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞...');
        try {
            const config = this.collectConfigurationData();
            const trendParameters = {
                trend_confirmation_bars: config.system.trend_confirmation_bars,
                trend_min_confirmations: config.system.trend_min_confirmations,
                trend_require_slope: config.system.trend_require_slope,
                trend_require_price: config.system.trend_require_price,
                trend_require_candles: config.system.trend_require_candles
            };
            
            console.log('[BotsManager] üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', trendParameters);
            
            await this.sendConfigUpdate('system-config', trendParameters, '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–µ–Ω–¥–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–µ–Ω–¥–∞', 'error');
        }
    }
    
    // ‚úÖ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
    async sendConfigUpdate(endpoint, data, sectionName) {
        this.showConfigurationLoading(true);
        
        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/${endpoint}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            
            if (response.ok) {
                this.showNotification(`‚úÖ ${sectionName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`, 'success');
                console.log(`[BotsManager] ‚úÖ ${sectionName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
        } finally {
            this.showConfigurationLoading(false);
        }
    }

    async saveConfiguration() {
        console.log('[BotsManager] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        try {
            const config = this.collectConfigurationData();
            
            // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è Enhanced RSI
            console.log('[BotsManager] üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Enhanced RSI:');
            console.log('  enhanced_rsi_enabled:', config.autoBot.enhanced_rsi_enabled);
            console.log('  enhanced_rsi_require_volume_confirmation:', config.autoBot.enhanced_rsi_require_volume_confirmation);
            console.log('  enhanced_rsi_require_divergence_confirmation:', config.autoBot.enhanced_rsi_require_divergence_confirmation);
            console.log('  enhanced_rsi_use_stoch_rsi:', config.autoBot.enhanced_rsi_use_stoch_rsi);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showConfigurationLoading(true);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º Auto Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const autoBotResponse = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/auto-bot`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(config.autoBot)
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const systemResponse = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/system-config`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(config.system)
            });
            
            const autoBotData = await autoBotResponse.json();
            const systemData = await systemResponse.json();
            
            if (autoBotData.success && systemData.success) {
                this.showNotification('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ bot_config.py! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.', 'success');
                console.log('[BotsManager] ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ bot_config.py –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                console.log('[BotsManager] üìä Auto Bot —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', autoBotData.saved_to_file);
                console.log('[BotsManager] üîß System config —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', systemData.saved_to_file);
                
                // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú RSI –ü–û–†–û–ì–ò (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–µ–π)
                if (config.autoBot) {
                    this.updateRsiThresholds(config.autoBot);
                    console.log('[BotsManager] üîÑ RSI –ø–æ—Ä–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                }
                
                // ‚úÖ –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ï–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ (—á—Ç–æ–±—ã UI –æ—Ç–æ–±—Ä–∞–∂–∞–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                setTimeout(() => {
                    console.log('[BotsManager] üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI...');
                    this.loadConfigurationData();
                }, 500);
                
                // ‚úÖ –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ï–ú –î–ê–ù–ù–´–ï RSI (—á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã)
                setTimeout(() => {
                    console.log('[BotsManager] üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ RSI –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
                    this.loadCoinsRsiData();
                }, 1000);
            } else {
                const errorMsg = !autoBotData.success ? autoBotData.message : systemData.message;
                throw new Error(`API –æ—à–∏–±–∫–∞: ${errorMsg}`);
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ' + error.message, 'error');
        } finally {
            this.showConfigurationLoading(false);
        }
    }
    
    async resetConfiguration() {
        console.log('[BotsManager] üîÑ –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º...');
        
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º?')) {
            return;
        }
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const defaultConfig = {
                autoBot: {
                    enabled: false,
                    max_concurrent: 5,
                    risk_cap_percent: 10,
                    scope: 'all',
                    rsi_long_threshold: 29,
                    rsi_short_threshold: 71,
                    rsi_exit_long: 65,
                    rsi_exit_short: 35,
                    default_position_size: 10,
                    check_interval: 180,
                    max_loss_percent: 15.0,
                    trailing_stop_activation: 300.0,
                    trailing_stop_distance: 150.0,
                    max_position_hours: 0,
                    break_even_protection: true,
                    avoid_down_trend: true,
                    avoid_up_trend: true,
                    break_even_trigger: 100.0,
                    enable_maturity_check: true,
                    min_candles_for_maturity: 200,
                    min_rsi_low: 35,
                    max_rsi_high: 65,
                    trading_enabled: true,
                    use_test_server: false,
                    max_risk_per_trade: 2.0,
                    enhanced_rsi_enabled: true,
                    enhanced_rsi_require_volume_confirmation: true,
                    enhanced_rsi_require_divergence_confirmation: false,
                    enhanced_rsi_use_stoch_rsi: true,
                    rsi_extreme_zone_timeout: 3,
                    rsi_extreme_oversold: 20,
                    rsi_extreme_overbought: 80,
                    rsi_volume_confirmation_multiplier: 1.2,
                    rsi_divergence_lookback: 10
                },
                system: {
                    rsi_update_interval: 1800,
                    auto_save_interval: 30,
                    debug_mode: false,
                    auto_refresh_ui: true,
                    refresh_interval: 3,
                    position_sync_interval: 600,
                    inactive_bot_cleanup_interval: 600,
                    inactive_bot_timeout: 600,
                    stop_loss_setup_interval: 300
                }
            };
            
            await this.saveDefaultConfiguration(defaultConfig);
            this.showNotification('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º!', 'success');
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await this.loadConfigurationData();
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ' + error.message, 'error');
        }
    }

    testConfiguration() {
        console.log('[BotsManager] üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        const config = this.collectConfigurationData();
        
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        let errors = [];
        
        if (config.autoBot.rsi_long_threshold >= config.autoBot.rsi_short_threshold) {
            errors.push('RSI –¥–ª—è LONG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ RSI –¥–ª—è SHORT');
        }
        
        if (config.autoBot.rsi_exit_long <= config.autoBot.rsi_long_threshold) {
            errors.push('RSI –≤—ã—Ö–æ–¥ –∏–∑ LONG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ RSI –≤—Ö–æ–¥–∞ –≤ LONG');
        }
        
        if (config.autoBot.rsi_exit_short >= config.autoBot.rsi_short_threshold) {
            errors.push('RSI –≤—ã—Ö–æ–¥ –∏–∑ SHORT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ RSI –≤—Ö–æ–¥–∞ –≤ SHORT');
        }
        
        if (config.autoBot.max_loss_percent <= 0 || config.autoBot.max_loss_percent > 50) {
            errors.push('–°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1% –¥–æ 50%');
        }
        
        if (config.autoBot.trailing_stop_activation < config.autoBot.break_even_trigger) {
            errors.push('–ê–∫—Ç–∏–≤–∞—Ü–∏—è Trailing Stop –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏');
        }
        
        if (errors.length > 0) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n' + errors.join('\n'), 'error');
        } else {
            this.showNotification('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!', 'success');
        }
    }
    
    syncDuplicateSettings(config) {
        console.log('[BotsManager] üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Auto Bot –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const globalAutoBotToggleEl = document.getElementById('globalAutoBotToggle');
        if (globalAutoBotToggleEl) {
            const enabled = config.enabled || false;
            globalAutoBotToggleEl.checked = enabled;
            console.log(`[BotsManager] ü§ñ Auto Bot –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${enabled}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const toggleLabel = globalAutoBotToggleEl.closest('.auto-bot-toggle')?.querySelector('.toggle-label');
            if (toggleLabel) {
                toggleLabel.textContent = enabled ? 'ü§ñ Auto Bot (–í–ö–õ)' : 'ü§ñ Auto Bot (–í–´–ö–õ)';
            }
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Auto Bot
        const mobileAutoBotToggleEl = document.getElementById('mobileAutobotToggle');
        if (mobileAutoBotToggleEl) {
            const enabled = config.enabled || false;
            mobileAutoBotToggleEl.checked = enabled;
            console.log(`[BotsManager] ü§ñ –ú–æ–±–∏–ª—å–Ω—ã–π Auto Bot –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${enabled}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const statusText = document.getElementById('mobileAutobotStatusText');
            if (statusText) {
                statusText.textContent = enabled ? '–í–ö–õ' : '–í–´–ö–õ';
                statusText.className = enabled ? 'mobile-autobot-status enabled' : 'mobile-autobot-status';
            }
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
        const rsiLongDupEl = document.getElementById('rsiLongThresholdDup');
        if (rsiLongDupEl) rsiLongDupEl.value = config.rsi_long_threshold || 29;
        
        const rsiShortDupEl = document.getElementById('rsiShortThresholdDup');
        if (rsiShortDupEl) rsiShortDupEl.value = config.rsi_short_threshold || 71;
        
        const rsiExitLongDupEl = document.getElementById('rsiExitLongDup');
        if (rsiExitLongDupEl) rsiExitLongDupEl.value = config.rsi_exit_long || 65;
        
        const rsiExitShortDupEl = document.getElementById('rsiExitShortDup');
        if (rsiExitShortDupEl) rsiExitShortDupEl.value = config.rsi_exit_short || 35;
        
        const maxLossDupEl = document.getElementById('maxLossPercentDup');
        if (maxLossDupEl) maxLossDupEl.value = config.max_loss_percent || 15.0;
        
        const trailingActivationDupEl = document.getElementById('trailingStopActivationDup');
        if (trailingActivationDupEl) trailingActivationDupEl.value = config.trailing_stop_activation || 300.0;
        
        const trailingDistanceDupEl = document.getElementById('trailingStopDistanceDup');
        if (trailingDistanceDupEl) trailingDistanceDupEl.value = config.trailing_stop_distance || 150.0;
        
        const maxHoursDupEl = document.getElementById('maxPositionHoursDup');
        if (maxHoursDupEl) {
            const seconds = config.max_position_hours || 0;
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const minutes = Math.round(seconds / 60);
            maxHoursDupEl.value = minutes;
        }
        
        const breakEvenDupEl = document.getElementById('breakEvenProtectionDup');
        if (breakEvenDupEl) breakEvenDupEl.checked = config.break_even_protection !== false;
        
        const avoidDownTrendDupEl = document.getElementById('avoidDownTrendDup');
        if (avoidDownTrendDupEl) avoidDownTrendDupEl.checked = config.avoid_down_trend !== false;
        
        const avoidUpTrendDupEl = document.getElementById('avoidUpTrendDup');
        if (avoidUpTrendDupEl) avoidUpTrendDupEl.checked = config.avoid_up_trend !== false;
        
        const enableMaturityCheckDupEl = document.getElementById('enableMaturityCheckDup');
        if (enableMaturityCheckDupEl) enableMaturityCheckDupEl.checked = config.enable_maturity_check !== false;
        
        const breakEvenTriggerDupEl = document.getElementById('breakEvenTriggerDup');
        if (breakEvenTriggerDupEl) breakEvenTriggerDupEl.value = config.break_even_trigger || 100.0;
        
        console.log('[BotsManager] ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.updateTrendFilterLabels();
    }
    
    async loadDuplicateSettings() {
        console.log('[BotsManager] üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/auto-bot`);
            const data = await response.json();
            
            if (data.success && data.config) {
                this.syncDuplicateSettings(data.config);
                this.initializeGlobalAutoBotToggle();
            this.initializeMobileAutoBotToggle();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º RSI –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                this.updateRsiThresholds(data.config);
                
                console.log('[BotsManager] ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            } else {
                console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', data.message);
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }
    
    async initializeGlobalAutoBotToggle() {
        const globalAutoBotToggleEl = document.getElementById('globalAutoBotToggle');
        console.log('[BotsManager] üîç initializeGlobalAutoBotToggle –≤—ã–∑–≤–∞–Ω');
        console.log('[BotsManager] üîç –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', !!globalAutoBotToggleEl);
        console.log('[BotsManager] üîç data-initialized:', globalAutoBotToggleEl?.getAttribute('data-initialized'));
        
        if (globalAutoBotToggleEl && !globalAutoBotToggleEl.hasAttribute('data-initialized')) {
            console.log('[BotsManager] üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è...');
            globalAutoBotToggleEl.setAttribute('data-initialized', 'true');
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Auto Bot —Å —Å–µ—Ä–≤–µ—Ä–∞
            try {
                console.log('[BotsManager] üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Auto Bot...');
                const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/auto-bot`);
                const data = await response.json();
                
                if (data.success && data.config) {
                    const autoBotEnabled = data.config.enabled;
                    console.log('[BotsManager] ü§ñ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Auto Bot —Å —Å–µ—Ä–≤–µ—Ä–∞:', autoBotEnabled ? '–í–ö–õ' : '–í–´–ö–õ');
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
                    globalAutoBotToggleEl.checked = autoBotEnabled;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    const toggleLabel = globalAutoBotToggleEl.closest('.auto-bot-toggle')?.querySelector('.toggle-label');
                    if (toggleLabel) {
                        toggleLabel.textContent = autoBotEnabled ? 'ü§ñ Auto Bot (–í–ö–õ)' : 'ü§ñ Auto Bot (–í–´–ö–õ)';
                    }
                    
                    console.log('[BotsManager] ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Auto Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:', autoBotEnabled);
                } else {
                    console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Auto Bot:', data.message);
                }
            } catch (error) {
                console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Auto Bot:', error);
            }
            
            globalAutoBotToggleEl.addEventListener('change', async (e) => {
                const isEnabled = e.target.checked;
                console.log(`[BotsManager] ü§ñ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–Ø: ${isEnabled}`);
                
                // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
                globalAutoBotToggleEl.setAttribute('data-user-changed', 'true');
                console.log('[BotsManager] üîí –§–ª–∞–≥ data-user-changed —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É
                const toggleLabel = globalAutoBotToggleEl.closest('.auto-bot-toggle')?.querySelector('.toggle-label');
                if (toggleLabel) {
                    toggleLabel.textContent = isEnabled ? 'ü§ñ Auto Bot (–í–ö–õ)' : 'ü§ñ Auto Bot (–í–´–ö–õ)';
                }
                
                try {
                    const url = `${this.BOTS_SERVICE_URL}/api/bots/auto-bot`;
                    console.log(`[BotsManager] üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ${isEnabled ? '–≤–∫–ª—é—á–µ–Ω–∏–µ' : '–≤—ã–∫–ª—é—á–µ–Ω–∏–µ'} –∞–≤—Ç–æ–±–æ—Ç–∞...`);
                    console.log(`[BotsManager] üåê URL: ${url}`);
                    console.log(`[BotsManager] üì¶ –î–∞–Ω–Ω—ã–µ: ${JSON.stringify({ enabled: isEnabled })}`);
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ enabled: isEnabled })
                    });
                    console.log('[BotsManager] üì° –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status);
                    
                    const result = await response.json();
                    console.log('[BotsManager] üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
                    console.log('[BotsManager] üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ enabled –≤ –æ—Ç–≤–µ—Ç–µ:', result.config?.enabled);
                    
                    if (result.success) {
                        this.showNotification(
                            isEnabled ? '‚úÖ Auto Bot –≤–∫–ª—é—á–µ–Ω' : '‚è∏Ô∏è Auto Bot –≤—ã–∫–ª—é—á–µ–Ω', 
                            'success'
                        );
                        
                        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –º–æ–±–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º
                        const mobileToggle = document.getElementById('mobileAutobotToggle');
                        if (mobileToggle) {
                            mobileToggle.checked = isEnabled;
                            const mobileStatusText = document.getElementById('mobileAutobotStatusText');
                            if (mobileStatusText) {
                                mobileStatusText.textContent = isEnabled ? '–í–ö–õ' : '–í–´–ö–õ';
                                mobileStatusText.className = isEnabled ? 'mobile-autobot-status enabled' : 'mobile-autobot-status';
                            }
                            console.log(`[BotsManager] üîÑ –ú–æ–±–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${isEnabled}`);
                        }
                        
                        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                        // –î–∞–µ–º –≤—Ä–µ–º—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
                        setTimeout(() => {
                            globalAutoBotToggleEl.removeAttribute('data-user-changed');
                            console.log('[BotsManager] üîì –§–ª–∞–≥ data-user-changed —Å–Ω—è—Ç –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏');
                        }, 15000);  // 15 —Å–µ–∫—É–Ω–¥ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        
                        console.log(`[BotsManager] ‚úÖ Auto Bot ${isEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
                } else {
                        console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Auto Bot:', result.message);
                        // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
                        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + result.message, 'error');
                    }
                    
                } catch (error) {
                    console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Auto Bot:', error);
                    // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
                }
            });
            
            console.log('[BotsManager] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è Auto Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    }

    initializeMobileAutoBotToggle() {
        const mobileAutoBotToggleEl = document.getElementById('mobileAutobotToggle');
        console.log('[BotsManager] üîç initializeMobileAutoBotToggle –≤—ã–∑–≤–∞–Ω');
        console.log('[BotsManager] üîç –ú–æ–±–∏–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', !!mobileAutoBotToggleEl);
        console.log('[BotsManager] üîç data-initialized:', mobileAutoBotToggleEl?.getAttribute('data-initialized'));
        
        if (mobileAutoBotToggleEl && !mobileAutoBotToggleEl.hasAttribute('data-initialized')) {
            console.log('[BotsManager] üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è...');
            mobileAutoBotToggleEl.setAttribute('data-initialized', 'true');
            
            mobileAutoBotToggleEl.addEventListener('change', async (e) => {
                const isEnabled = e.target.checked;
                console.log(`[BotsManager] ü§ñ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ú–û–ë–ò–õ–¨–ù–û–ì–û –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–Ø: ${isEnabled}`);
                
                // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
                mobileAutoBotToggleEl.setAttribute('data-user-changed', 'true');
                console.log('[BotsManager] üîí –§–ª–∞–≥ data-user-changed —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É
                const statusText = document.getElementById('mobileAutobotStatusText');
                if (statusText) {
                    statusText.textContent = isEnabled ? '–í–ö–õ' : '–í–´–ö–õ';
                    statusText.className = isEnabled ? 'mobile-autobot-status enabled' : 'mobile-autobot-status';
                }
                
                try {
                    const url = `${this.BOTS_SERVICE_URL}/api/bots/auto-bot`;
                    console.log(`[BotsManager] üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ${isEnabled ? '–≤–∫–ª—é—á–µ–Ω–∏–µ' : '–≤—ã–∫–ª—é—á–µ–Ω–∏–µ'} –∞–≤—Ç–æ–±–æ—Ç–∞...`);
                    console.log(`[BotsManager] üåê URL: ${url}`);
                    console.log(`[BotsManager] üì¶ –î–∞–Ω–Ω—ã–µ: ${JSON.stringify({ enabled: isEnabled })}`);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ enabled: isEnabled })
                    });
                    
                    const result = await response.json();
                    console.log('[BotsManager] üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
                    
                    if (result.success) {
                        console.log(`[BotsManager] ‚úÖ Auto Bot ${isEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'} —É—Å–ø–µ—à–Ω–æ`);
                        this.showNotification(`‚úÖ Auto Bot ${isEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`, 'success');
                        
                        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º
                        const globalToggle = document.getElementById('globalAutoBotToggle');
                        if (globalToggle) {
                            globalToggle.checked = isEnabled;
                            const globalLabel = globalToggle.closest('.auto-bot-toggle')?.querySelector('.toggle-label');
                            if (globalLabel) {
                                globalLabel.textContent = isEnabled ? 'ü§ñ Auto Bot (–í–ö–õ)' : 'ü§ñ Auto Bot (–í–´–ö–õ)';
                            }
                            console.log(`[BotsManager] üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${isEnabled}`);
                        }
                        
                        // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                        setTimeout(() => {
                            mobileAutoBotToggleEl.removeAttribute('data-user-changed');
                            console.log('[BotsManager] üîì –§–ª–∞–≥ data-user-changed —Å–Ω—è—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏');
                        }, 15000);  // 15 —Å–µ–∫—É–Ω–¥ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        
                    } else {
                        console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', result.message);
                        this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + result.message, 'error');
                    }
                    
                } catch (error) {
                    console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Auto Bot:', error);
                    this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
                }
            });
            
            console.log('[BotsManager] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è Auto Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    }
    
    // ==========================================
    // –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ï–î–ò–ù–´–ú –¢–û–†–ì–û–í–´–ú –°–ß–ï–¢–û–ú
    // ==========================================
    
    async loadAccountInfo() {
        this.logDebug('[BotsManager] üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –µ–¥–∏–Ω–æ–º —Ç–æ—Ä–≥–æ–≤–æ–º —Å—á–µ—Ç–µ...');
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç, —á—Ç–æ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ü–æ–∑–∏—Ü–∏–∏
            const response = await fetch('/api/positions');
            const data = await response.json();
            
            if (data.wallet_data) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π updateAccountDisplay
                const accountData = {
                    success: true,
                    total_wallet_balance: data.wallet_data.total_balance,
                    total_available_balance: data.wallet_data.available_balance,
                    total_unrealized_pnl: data.wallet_data.realized_pnl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º realized_pnl –∫–∞–∫ unrealized
                    active_positions: data.stats?.total_trades || 0,
                    active_bots: this.activeBots?.length || 0
                };
                this.updateAccountDisplay(accountData);
                this.logDebug('[BotsManager] ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', accountData);
            } else {
                console.warn('[BotsManager] ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ');
                this.updateAccountDisplay(null);
            }
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ:', error);
            this.updateAccountDisplay(null);
        }
    }
    
    updateAccountDisplay(accountData) {
        // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ h3 –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
        const activeBotsHeader = document.querySelector('.active-bots-header h3');
        if (!activeBotsHeader) return;
        
        if (accountData && accountData.success) {
            const balance = parseFloat(accountData.total_wallet_balance || 0);
            const available = parseFloat(accountData.total_available_balance || 0);
            const pnl = parseFloat(accountData.total_unrealized_pnl || 0);
            const positions = parseInt(accountData.active_positions || 0);
            const activeBots = parseInt(accountData.active_bots || 0);
            
            const balanceText = (typeof TRANSLATIONS !== 'undefined' && TRANSLATIONS[document.documentElement.lang || 'ru'] && TRANSLATIONS[document.documentElement.lang || 'ru']['balance']) ? TRANSLATIONS[document.documentElement.lang || 'ru']['balance'] : '–ë–∞–ª–∞–Ω—Å';
            const remainderText = (typeof TRANSLATIONS !== 'undefined' && TRANSLATIONS[document.documentElement.lang || 'ru'] && TRANSLATIONS[document.documentElement.lang || 'ru']['remainder']) ? TRANSLATIONS[document.documentElement.lang || 'ru']['remainder'] : '–û—Å—Ç–∞—Ç–æ–∫';
            const openPositionsText = (typeof TRANSLATIONS !== 'undefined' && TRANSLATIONS[document.documentElement.lang || 'ru'] && TRANSLATIONS[document.documentElement.lang || 'ru']['open_positions']) ? TRANSLATIONS[document.documentElement.lang || 'ru']['open_positions'] : '–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π';
            
            activeBotsHeader.innerHTML = `
                ${balanceText}  $${balance.toFixed(2)}<br>
                ${remainderText}  $${available.toFixed(2)}<br>
                PnL  ${pnl >= 0 ? '+' : ''}$${pnl.toFixed(2)}<br>
                ${openPositionsText}  ${positions}
            `;
        } else {
            const balanceText = (typeof TRANSLATIONS !== 'undefined' && TRANSLATIONS[document.documentElement.lang || 'ru'] && TRANSLATIONS[document.documentElement.lang || 'ru']['balance']) ? TRANSLATIONS[document.documentElement.lang || 'ru']['balance'] : '–ë–∞–ª–∞–Ω—Å';
            const remainderText = (typeof TRANSLATIONS !== 'undefined' && TRANSLATIONS[document.documentElement.lang || 'ru'] && TRANSLATIONS[document.documentElement.lang || 'ru']['remainder']) ? TRANSLATIONS[document.documentElement.lang || 'ru']['remainder'] : '–û—Å—Ç–∞—Ç–æ–∫';
            const openPositionsText = (typeof TRANSLATIONS !== 'undefined' && TRANSLATIONS[document.documentElement.lang || 'ru'] && TRANSLATIONS[document.documentElement.lang || 'ru']['open_positions']) ? TRANSLATIONS[document.documentElement.lang || 'ru']['open_positions'] : '–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π';
            
            activeBotsHeader.innerHTML = `
                ${balanceText}  -<br>
                ${remainderText}  -<br>
                PnL  -<br>
                ${openPositionsText}  -
            `;
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ startPeriodicUpdate()
        // –ù–µ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è accountInfo
    }
    
    // ==========================================
    // –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –ë–û–¢–ê–ú–ò
    // ==========================================
    
    updateBulkControlsVisibility(bots) {
        const bulkControlsEl = document.getElementById('bulkBotControls');
        const countEl = document.getElementById('bulkControlsCount');
        
        if (bulkControlsEl && countEl) {
            if (bots && bots.length > 0) {
                bulkControlsEl.style.display = 'block';
                countEl.textContent = `${bots.length} ${bots.length === 1 ? '–±–æ—Ç' : '–±–æ—Ç–æ–≤'}`;
                this.initializeBulkControls(bots);
            } else {
                bulkControlsEl.style.display = 'none';
            }
        }
    }
    
    initializeBulkControls(bots) {
        const startAllBtn = document.getElementById('startAllBotsBtn');
        const stopAllBtn = document.getElementById('stopAllBotsBtn');
        const deleteAllBtn = document.getElementById('deleteAllBotsBtn');
        
        if (startAllBtn && !startAllBtn.hasAttribute('data-initialized')) {
            startAllBtn.setAttribute('data-initialized', 'true');
            startAllBtn.addEventListener('click', () => this.startAllBots());
        }
        
        if (stopAllBtn && !stopAllBtn.hasAttribute('data-initialized')) {
            stopAllBtn.setAttribute('data-initialized', 'true');
            stopAllBtn.addEventListener('click', () => this.stopAllBots());
        }
        
        if (deleteAllBtn && !deleteAllBtn.hasAttribute('data-initialized')) {
            deleteAllBtn.setAttribute('data-initialized', 'true');
            deleteAllBtn.addEventListener('click', () => this.deleteAllBots());
        }
    }
    
    initializeConfigurationButtons() {
        console.log('[BotsManager] ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const saveConfigBtn = document.getElementById('saveConfigBtn');
        if (saveConfigBtn && !saveConfigBtn.hasAttribute('data-initialized')) {
            saveConfigBtn.setAttribute('data-initialized', 'true');
            saveConfigBtn.addEventListener('click', () => this.saveConfiguration());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const resetConfigBtn = document.getElementById('resetConfigBtn');
        if (resetConfigBtn && !resetConfigBtn.hasAttribute('data-initialized')) {
            resetConfigBtn.setAttribute('data-initialized', 'true');
            resetConfigBtn.addEventListener('click', () => this.resetConfiguration());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const testConfigBtn = document.getElementById('testConfigBtn');
        if (testConfigBtn && !testConfigBtn.hasAttribute('data-initialized')) {
            testConfigBtn.setAttribute('data-initialized', 'true');
            testConfigBtn.addEventListener('click', () => this.testConfiguration());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö –°–û–•–†–ê–ù–ï–ù–ò–Ø –û–¢–î–ï–õ–¨–ù–´–• –ë–õ–û–ö–û–í
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const saveBasicBtn = document.querySelector('.config-section-save-btn[data-section="basic"]');
        if (saveBasicBtn && !saveBasicBtn.hasAttribute('data-initialized')) {
            saveBasicBtn.setAttribute('data-initialized', 'true');
            saveBasicBtn.addEventListener('click', () => this.saveBasicSettings());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const saveSystemBtn = document.querySelector('.config-section-save-btn[data-section="system"]');
        if (saveSystemBtn && !saveSystemBtn.hasAttribute('data-initialized')) {
            saveSystemBtn.setAttribute('data-initialized', 'true');
            saveSystemBtn.addEventListener('click', () => this.saveSystemSettings());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const saveTradingBtn = document.querySelector('.config-section-save-btn[data-section="trading"]');
        if (saveTradingBtn && !saveTradingBtn.hasAttribute('data-initialized')) {
            saveTradingBtn.setAttribute('data-initialized', 'true');
            saveTradingBtn.addEventListener('click', () => this.saveTradingParameters());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // RSI –≤—ã—Ö–æ–¥—ã
        const saveRsiExitsBtn = document.querySelector('.config-section-save-btn[data-section="rsi-exits"]');
        if (saveRsiExitsBtn && !saveRsiExitsBtn.hasAttribute('data-initialized')) {
            saveRsiExitsBtn.setAttribute('data-initialized', 'true');
            saveRsiExitsBtn.addEventListener('click', () => this.saveRsiExits());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å RSI –≤—ã—Ö–æ–¥—ã" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
        const saveRsiTimeBtn = document.querySelector('.config-section-save-btn[data-section="rsi-time-filter"]');
        if (saveRsiTimeBtn && !saveRsiTimeBtn.hasAttribute('data-initialized')) {
            saveRsiTimeBtn.setAttribute('data-initialized', 'true');
            saveRsiTimeBtn.addEventListener('click', () => this.saveRsiTimeFilter());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å RSI –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // ExitScam —Ñ–∏–ª—å—Ç—Ä
        const saveExitScamBtn = document.querySelector('.config-section-save-btn[data-section="exit-scam"]');
        if (saveExitScamBtn && !saveExitScamBtn.hasAttribute('data-initialized')) {
            saveExitScamBtn.setAttribute('data-initialized', 'true');
            saveExitScamBtn.addEventListener('click', () => this.saveExitScamFilter());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ExitScam —Ñ–∏–ª—å—Ç—Ä" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // Enhanced RSI
        const saveEnhancedRsiBtn = document.querySelector('.config-section-save-btn[data-section="enhanced-rsi"]');
        if (saveEnhancedRsiBtn && !saveEnhancedRsiBtn.hasAttribute('data-initialized')) {
            saveEnhancedRsiBtn.setAttribute('data-initialized', 'true');
            saveEnhancedRsiBtn.addEventListener('click', () => this.saveEnhancedRsi());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å Enhanced RSI" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const saveTradingSettingsBtn = document.querySelector('.config-section-save-btn[data-section="trading-settings"]');
        if (saveTradingSettingsBtn && !saveTradingSettingsBtn.hasAttribute('data-initialized')) {
            saveTradingSettingsBtn.setAttribute('data-initialized', 'true');
            saveTradingSettingsBtn.addEventListener('click', () => this.saveTradingSettings());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
        const saveProtectiveBtn = document.querySelector('.config-section-save-btn[data-section="protective"]');
        if (saveProtectiveBtn && !saveProtectiveBtn.hasAttribute('data-initialized')) {
            saveProtectiveBtn.setAttribute('data-initialized', 'true');
            saveProtectiveBtn.addEventListener('click', () => this.saveProtectiveMechanisms());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏
        const saveMaturityBtn = document.querySelector('.config-section-save-btn[data-section="maturity"]');
        if (saveMaturityBtn && !saveMaturityBtn.hasAttribute('data-initialized')) {
            saveMaturityBtn.setAttribute('data-initialized', 'true');
            saveMaturityBtn.addEventListener('click', () => this.saveMaturitySettings());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // EMA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const saveEmaBtn = document.querySelector('.config-section-save-btn[data-section="ema"]');
        if (saveEmaBtn && !saveEmaBtn.hasAttribute('data-initialized')) {
            saveEmaBtn.setAttribute('data-initialized', 'true');
            saveEmaBtn.addEventListener('click', () => this.saveEmaParameters());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å EMA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–¥–∞
        const saveTrendBtn = document.querySelector('.config-section-save-btn[data-section="trend"]');
        if (saveTrendBtn && !saveTrendBtn.hasAttribute('data-initialized')) {
            saveTrendBtn.setAttribute('data-initialized', 'true');
            saveTrendBtn.addEventListener('click', () => this.saveTrendParameters());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–¥–∞" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // Hot Reload –∫–Ω–æ–ø–∫–∞
        const reloadModulesBtn = document.getElementById('reloadModulesBtn');
        if (reloadModulesBtn && !reloadModulesBtn.hasAttribute('data-initialized')) {
            reloadModulesBtn.setAttribute('data-initialized', 'true');
            reloadModulesBtn.addEventListener('click', () => this.reloadModules());
            console.log('[BotsManager] ‚úÖ –ö–Ω–æ–ø–∫–∞ "Hot Reload" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        console.log('[BotsManager] ‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    async reloadModules() {
        console.log('[BotsManager] üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...');
        
        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/system/reload-modules`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.showNotification(`‚úÖ ${data.message}. –ú–æ–¥—É–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!`, 'success');
                console.log('[BotsManager] ‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π:', data.reloaded);
                if (data.failed && data.failed.length > 0) {
                    console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ:', data.failed);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                await this.loadConfiguration();
                await this.loadCoinsRsiData();
            } else {
                this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: ${data.error}`, 'error');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ Hot Reload:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π', 'error');
        }
    }
    
    async startAllBots() {
        if (!this.activeBots || this.activeBots.length === 0) {
            this.showNotification('‚ö†Ô∏è –ù–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞', 'warning');
            return;
        }

        const stoppedBots = this.activeBots.filter(bot => 
            bot.status === 'paused' || bot.status === 'idle' || bot.status === 'stopped'
        );
        
        if (stoppedBots.length === 0) {
            this.showNotification('‚ÑπÔ∏è –í—Å–µ –±–æ—Ç—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã', 'info');
            return;
        }
        
        console.log(`[BotsManager] üöÄ –ó–∞–ø—É—Å–∫ ${stoppedBots.length} –±–æ—Ç–æ–≤...`);
        this.showConfigNotification('üöÄ –ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤', `–ó–∞–ø—É—Å–∫–∞–µ–º ${stoppedBots.length} –±–æ—Ç–æ–≤...`);
        
        let successful = 0;
        let failed = 0;
        
        for (const bot of stoppedBots) {
            try {
                const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/start`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ symbol: bot.symbol })
                });
                
                const result = await response.json();
                if (result.success) {
                    successful++;
                } else {
                    failed++;
                }
            } catch (error) {
                failed++;
            }
        }
        
        await this.loadActiveBotsData();
        
        if (failed === 0) {
            this.showConfigNotification('‚úÖ –í—Å–µ –±–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã', `–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ ${successful} –±–æ—Ç–æ–≤`);
        } else {
            this.showConfigNotification('‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏', 
                `–£—Å–ø–µ—à–Ω–æ: ${successful}, –û—à–∏–±–æ–∫: ${failed}`, 'error');
        }
    }
    
    async stopAllBots() {
        if (!this.activeBots || this.activeBots.length === 0) {
            this.showNotification('‚ö†Ô∏è –ù–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏', 'warning');
            return;
        }
        
        const runningBots = this.activeBots.filter(bot => 
            bot.status === 'running' || bot.status === 'idle' || 
            bot.status === 'in_position_long' || bot.status === 'in_position_short'
        );
        
        if (runningBots.length === 0) {
            this.showNotification('‚ÑπÔ∏è –í—Å–µ –±–æ—Ç—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'info');
            return;
        }
        
        console.log(`[BotsManager] ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${runningBots.length} –±–æ—Ç–æ–≤...`);
        this.showConfigNotification('‚èπÔ∏è –ú–∞—Å—Å–æ–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤', `–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${runningBots.length} –±–æ—Ç–æ–≤...`);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        runningBots.forEach(bot => {
            this.updateBotStatusInUI(bot.symbol, 'stopping');
        });
        
        let successful = 0;
        let failed = 0;
        
        for (const bot of runningBots) {
            try {
                const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/stop`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ symbol: bot.symbol })
                });
                
                const result = await response.json();
                if (result.success) {
                    successful++;
                } else {
                    failed++;
                }
            } catch (error) {
                console.error(`[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ ${bot.symbol}:`, error);
                failed++;
            }
        }
        
        await this.loadActiveBotsData();
        
        if (failed === 0) {
            this.showConfigNotification('‚úÖ –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', `–£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${successful} –±–æ—Ç–æ–≤`);
                } else {
            this.showConfigNotification('‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏', 
                `–£—Å–ø–µ—à–Ω–æ: ${successful}, –û—à–∏–±–æ–∫: ${failed}`, 'error');
        }
    }
    
    async deleteAllBots() {
        if (!this.activeBots || this.activeBots.length === 0) {
            this.showNotification('‚ö†Ô∏è –ù–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
            return;
        }
        
        const confirmMessage = `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö ${this.activeBots.length} –±–æ—Ç–æ–≤?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`;
        
        if (!confirm(confirmMessage)) {
            return;
        }
        
        console.log(`[BotsManager] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ ${this.activeBots.length} –±–æ—Ç–æ–≤...`);
        this.showConfigNotification('üóëÔ∏è –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤', `–£–¥–∞–ª—è–µ–º ${this.activeBots.length} –±–æ—Ç–æ–≤...`);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        this.activeBots.forEach(bot => {
            this.updateBotStatusInUI(bot.symbol, 'deleting');
        });
        
        let successful = 0;
        let failed = 0;
        
        for (const bot of this.activeBots) {
            try {
                const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/delete`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ symbol: bot.symbol })
                });
                
                const result = await response.json();
                if (result.success) {
                    successful++;
                } else {
                    failed++;
                }
            } catch (error) {
                failed++;
            }
        }
        
        await this.loadActiveBotsData();
        this.updateCoinsListWithBotStatus();
        
        if (failed === 0) {
            this.showConfigNotification('‚úÖ –í—Å–µ –±–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã', `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${successful} –±–æ—Ç–æ–≤`);
        } else {
            this.showConfigNotification('‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏', 
                `–£—Å–ø–µ—à–Ω–æ: ${successful}, –û—à–∏–±–æ–∫: ${failed}`, 'error');
        }
    }
    
    // ==========================================
    // –£–õ–£–ß–®–ï–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –°–û–•–†–ê–ù–ï–ù–ò–ò
    // ==========================================
    
    showConfigNotification(title, message, type = 'success', changes = null) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingNotification = document.querySelector('.config-save-notification');
        if (existingNotification) {
            existingNotification.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `config-save-notification ${type === 'error' ? 'error' : ''}`;
        
        let changesHtml = '';
        if (changes && changes.length > 0) {
            changesHtml = `
                <div class="config-changes-list">
                    <strong>${this.translate('changes_label')}</strong>
                    <ul>
                        ${changes.map(change => `<li>${change}</li>`).join('')}
                    </ul>
                </div>
            `;
        }
        
        notification.innerHTML = `
            <div class="config-notification-header">
                <span class="config-notification-title">${title}</span>
                <button class="config-notification-close" type="button">&times;</button>
            </div>
            <div class="config-notification-body">
                ${message}
                ${changesHtml}
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(notification);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = notification.querySelector('.config-notification-close');
        const closeNotification = () => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 400);
        };
        
        closeBtn.addEventListener('click', closeNotification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(closeNotification, 5000);
        
        console.log(`[BotsManager] üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${title} - ${message}`);
    }
    
    // ==========================================
    // –î–ï–¢–ï–ö–¶–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
    // ==========================================
    
    detectConfigChanges(oldAutoBot, oldSystem, newAutoBot, newSystem) {
        const changes = [];
        
        // –°–ª–æ–≤–∞—Ä—å —Å —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const configLabels = {
            // Auto Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'enabled': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Auto Bot enabled' : 'Auto Bot –≤–∫–ª—é—á–µ–Ω',
            'max_concurrent': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Max concurrent bots' : '–ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤',
            'risk_cap_percent': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Risk cap (% of deposit)' : '–†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞)',
            'scope': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Action scope' : '–û–±–ª–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è',
            'rsi_long_threshold': window.languageUtils?.getCurrentLanguage() === 'en' ? 'RSI for LONG positions' : 'RSI –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π',
            'rsi_short_threshold': window.languageUtils?.getCurrentLanguage() === 'en' ? 'RSI for SHORT positions' : 'RSI –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π',
            'rsi_exit_long': window.languageUtils?.getCurrentLanguage() === 'en' ? 'RSI exit from LONG' : 'RSI –≤—ã—Ö–æ–¥ –∏–∑ LONG',
            'rsi_exit_short': window.languageUtils?.getCurrentLanguage() === 'en' ? 'RSI exit from SHORT' : 'RSI –≤—ã—Ö–æ–¥ –∏–∑ SHORT',
            'default_position_size': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Default position size' : '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
            'check_interval': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Check interval (min)' : '–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∏–Ω)',
            'max_risk_per_trade': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Max risk per trade (%)' : '–ú–∞–∫—Å. —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)',
            'max_loss_percent': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Max loss (%)' : '–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫ (%)',
            'trailing_stop_activation': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Trailing stop activation (%)' : '–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ (%)',
            'trailing_stop_distance': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Trailing stop distance (%)' : '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ (%)',
            'max_position_hours': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Max time in position (minutes)' : '–ú–∞–∫—Å. –≤—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏ (–º–∏–Ω—É—Ç—ã)',
            'break_even_protection': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Break-even protection' : '–ó–∞—â–∏—Ç–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏',
            'break_even_trigger': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Break-even trigger (%)' : '–¢—Ä–∏–≥–≥–µ—Ä –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (%)',
            'avoid_down_trend': window.languageUtils?.getCurrentLanguage() === 'en' ? 'üîª Avoid downtrend (LONG)' : 'üîª –ò–∑–±–µ–≥–∞—Ç—å –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (LONG)',
            'avoid_up_trend': window.languageUtils?.getCurrentLanguage() === 'en' ? 'üìà Avoid uptrend (SHORT)' : 'üìà –ò–∑–±–µ–≥–∞—Ç—å –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (SHORT)',
            
            // –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'rsi_update_interval': window.languageUtils?.getCurrentLanguage() === 'en' ? 'RSI update interval' : '–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI',
            'auto_save_interval': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Auto-save interval' : '–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
            'debug_mode': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Debug mode' : '–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏',
            'auto_refresh_ui': window.languageUtils?.getCurrentLanguage() === 'en' ? 'Auto-refresh UI' : '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI'
        };
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        const formatValue = (key, value) => {
            const isEnglish = window.languageUtils?.getCurrentLanguage() === 'en';
            
            if (typeof value === 'boolean') {
                return isEnglish ? 
                    (value ? 'enabled' : 'disabled') : 
                    (value ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ');
            }
            if (key === 'scope') {
                if (isEnglish) {
                    return value === 'all' ? 'All coins' : 
                           value === 'whitelist' ? 'Whitelist' : 
                           value === 'blacklist' ? 'Blacklist' : value;
                } else {
                    return value === 'all' ? '–í—Å–µ –º–æ–Ω–µ—Ç—ã' : 
                           value === 'whitelist' ? '–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫' : 
                           value === 'blacklist' ? '–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫' : value;
                }
            }
            if (key === 'rsi_update_interval') {
                const minutes = Math.round(value / 60);
                return isEnglish ? 
                    `${minutes} min (${value} sec)` : 
                    `${minutes} –º–∏–Ω (${value} —Å–µ–∫)`;
            }
            if (key === 'auto_save_interval') {
                return isEnglish ? `${value} sec` : `${value} —Å–µ–∫`;
            }
            return value;
        };
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º Auto Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (oldAutoBot && newAutoBot) {
            Object.keys(newAutoBot).forEach(key => {
                const oldValue = oldAutoBot[key];
                const newValue = newAutoBot[key];
                
                if (oldValue !== newValue && configLabels[key]) {
                    changes.push(
                        `${configLabels[key]}: ${formatValue(key, oldValue)} ‚Üí ${formatValue(key, newValue)}`
                    );
                }
            });
        }
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (oldSystem && newSystem) {
            Object.keys(newSystem).forEach(key => {
                const oldValue = oldSystem[key];
                const newValue = newSystem[key];
                
                if (oldValue !== newValue && configLabels[key]) {
                    changes.push(
                        `${configLabels[key]}: ${formatValue(key, oldValue)} ‚Üí ${formatValue(key, newValue)}`
                    );
                }
            });
        }
        
        console.log('[BotsManager] üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', changes.length);
        changes.forEach(change => console.log('[BotsManager] üìù', change));
        
        return changes;
    }
    
    getBotPositionInfo(bot) {
        // –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
        console.log(`[DEBUG] getBotPositionInfo –¥–ª—è ${bot.symbol}:`, {
            position_side: bot.position_side,
            entry_price: bot.entry_price,
            status: bot.status,
            current_price: bot.current_price,
            stop_loss_price: bot.stop_loss_price,
            exchange_position: bot.exchange_position
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        if (!bot.position_side || !bot.entry_price) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞
            let statusText = '';
            let statusColor = '#888';
            let statusIcon = 'üìç';
            
            if (bot.status === 'in_position_long') {
                statusText = 'LONG (–∑–∞–∫—Ä—ã—Ç–∞)';
                statusColor = '#4caf50';
                statusIcon = 'üìà';
            } else if (bot.status === 'in_position_short') {
                statusText = 'SHORT (–∑–∞–∫—Ä—ã—Ç–∞)';
                statusColor = '#f44336';
                statusIcon = 'üìâ';
            } else if (bot.status === 'running') {
                statusText = '–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞';
                statusColor = '#2196f3';
                statusIcon = 'üîÑ';
            } else {
                statusText = '–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏';
                statusColor = '#888';
                statusIcon = 'üìç';
            }
            
            return `<div style="display: flex; justify-content: space-between; margin-bottom: 4px;"><span>${statusIcon} –ü–æ–∑–∏—Ü–∏—è:</span><span style="color: ${statusColor};">${statusText}</span></div>`;
        }
        
        const sideColor = bot.position_side === 'LONG' ? '#4caf50' : '#f44336';
        const sideIcon = bot.position_side === 'LONG' ? 'üìà' : 'üìâ';
        
        let positionHtml = `
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                <span style="color: #888;">${sideIcon} –ü–æ–∑–∏—Ü–∏—è</span>
                <span style="color: ${sideColor}; font-weight: 600;">${bot.position_side}</span>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                <span style="color: #888;">üíµ –í—Ö–æ–¥</span>
                <span style="color: #fff; font-weight: 600;">$${bot.entry_price.toFixed(6)}</span>
            </div>
        `;
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º current_price –Ω–∞–ø—Ä—è–º—É—é –∏–∑ bot (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
        if (bot.current_price || bot.mark_price) {
            const currentPrice = bot.current_price || bot.mark_price;
            const entryPrice = bot.entry_price || 0;
            const priceChange = entryPrice > 0 ? ((currentPrice - entryPrice) / entryPrice) * 100 : 0;
            const priceChangeColor = priceChange >= 0 ? '#4caf50' : '#f44336';
            const priceChangeIcon = priceChange >= 0 ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è';
            
            positionHtml += `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                    <span style="color: #888;">üìä –¢–µ–∫—É—â–∞—è</span>
                    <span style="color: ${priceChangeColor}; font-weight: 600;">$${currentPrice.toFixed(6)} ${priceChangeIcon}</span>
                </div>
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                    <span style="color: #888;">üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ</span>
                    <span style="color: ${priceChangeColor}; font-weight: 600;">${priceChange.toFixed(2)}%</span>
                </div>
            `;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏)
        let stopLoss = bot.exchange_position?.stop_loss || '';
        let takeProfit = bot.exchange_position?.take_profit || '';
        
        // –ï—Å–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        if (!stopLoss && bot.entry_price) {
            const stopLossPercent = bot.max_loss_percent || 15.0;
            if (bot.position_side === 'LONG') {
                stopLoss = bot.entry_price * (1 - stopLossPercent / 100);
            } else if (bot.position_side === 'SHORT') {
                stopLoss = bot.entry_price * (1 + stopLossPercent / 100);
            }
        }
        
        // –ï—Å–ª–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        if (!takeProfit && bot.entry_price) {
            const rsiExitLong = bot.rsi_exit_long || 55;
            const rsiExitShort = bot.rsi_exit_short || 45;
            const currentRsi = bot.rsi_data?.rsi6h || 50;
            
            if (bot.position_side === 'LONG' && currentRsi < rsiExitLong) {
                const takeProfitPercent = (rsiExitLong - currentRsi) * 0.5;
                takeProfit = bot.entry_price * (1 + takeProfitPercent / 100);
            } else if (bot.position_side === 'SHORT' && currentRsi > rsiExitShort) {
                const takeProfitPercent = (currentRsi - rsiExitShort) * 0.5;
                takeProfit = bot.entry_price * (1 - takeProfitPercent / 100);
            }
        }
        
        positionHtml += `
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                <span style="color: #888;">üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å</span>
                <span style="color: ${stopLoss ? '#ff9800' : '#666'}; font-weight: 600;">${stopLoss ? `$${parseFloat(stopLoss).toFixed(6)}` : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</span>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                <span style="color: #888;">üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç</span>
                <span style="color: ${takeProfit ? '#4caf50' : '#666'}; font-weight: 600;">${takeProfit ? `$${parseFloat(takeProfit).toFixed(6)}` : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</span>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º RSI –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (bot.rsi_data) {
            const rsi = bot.rsi_data.rsi6h;
            const trend = bot.rsi_data.trend6h;
            
            if (rsi) {
                let rsiColor = '#888';
                if (rsi > 70) rsiColor = '#f44336'; // –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                else if (rsi < 30) rsiColor = '#4caf50'; // –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                
                positionHtml += `
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                        <span style="color: #888;">üìä RSI</span>
                        <span style="color: ${rsiColor}; font-weight: 600;">${rsi.toFixed(1)}</span>
                    </div>
                `;
            }
            
            if (trend) {
                let trendColor = '#888';
                let trendIcon = '‚û°Ô∏è';
                if (trend === 'UP') { trendColor = '#4caf50'; trendIcon = 'üìà'; }
                else if (trend === 'DOWN') { trendColor = '#f44336'; trendIcon = 'üìâ'; }
                else if (trend === 'NEUTRAL') { trendColor = '#ff9800'; trendIcon = '‚û°Ô∏è'; }
                
                positionHtml += `
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                        <span style="color: #888;">${trendIcon} –¢—Ä–µ–Ω–¥</span>
                        <span style="color: ${trendColor}; font-weight: 600;">${trend}</span>
                    </div>
                `;
            }
        }
        
        return positionHtml;
    }
    
    getBotTimeInfo(bot) {
        let timeInfoHtml = '';
        
        // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        if (bot.created_at) {
        const createdTime = new Date(bot.created_at);
        const now = new Date();
        const timeDiff = now - createdTime;
        const hours = Math.floor(timeDiff / (1000 * 60 * 60));
        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
        
        let timeText = '';
        if (hours > 0) {
            timeText = `${hours}—á ${minutes}–º`;
        } else {
            timeText = `${minutes}–º`;
        }
        
            timeInfoHtml += `
            <div style="display: flex; justify-content: space-between; margin-bottom: 4px;">
                <span>‚è±Ô∏è –í—Ä–µ–º—è:</span>
                <span style="color: #888; font-weight: 500;">${timeText}</span>
            </div>
        `;
        }
        
        // –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –±–æ—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏)
        if (bot.status && (bot.status.includes('position') || bot.status.includes('in_position')) && bot.last_update) {
            const lastUpdateTime = new Date(bot.last_update);
            const now = new Date();
            const updateDiff = now - lastUpdateTime;
            const updateMinutes = Math.floor(updateDiff / (1000 * 60));
            const updateSeconds = Math.floor((updateDiff % (1000 * 60)) / 1000);
            
            let updateTimeText = '';
            if (updateMinutes > 0) {
                updateTimeText = `${updateMinutes}–º ${updateSeconds}—Å –Ω–∞–∑–∞–¥`;
            } else {
                updateTimeText = `${updateSeconds}—Å –Ω–∞–∑–∞–¥`;
            }
            
            // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            let updateColor = '#4caf50'; // –∑–µ–ª–µ–Ω—ã–π - —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            if (updateMinutes > 1) {
                updateColor = '#ff9800'; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π - –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã
            }
            if (updateMinutes > 5) {
                updateColor = '#f44336'; // –∫—Ä–∞—Å–Ω—ã–π - –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
            }
            
            timeInfoHtml += `
                <div style="display: flex; justify-content: space-between; margin-bottom: 4px;">
                    <span>üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ:</span>
                    <span style="color: ${updateColor}; font-weight: 500;">${updateTimeText}</span>
                </div>
            `;
        }
        
        return timeInfoHtml;
    }
    
    renderTradesInfo(coinSymbol) {
        console.log(`[DEBUG] renderTradesInfo –¥–ª—è ${coinSymbol}`);
        console.log(`[DEBUG] this.activeBots:`, this.activeBots);
        console.log(`[DEBUG] this.selectedCoin:`, this.selectedCoin);
        
        const tradesSection = document.getElementById('tradesInfoSection');
        const tradesContainer = document.getElementById('tradesContainer');
        
        console.log(`[DEBUG] tradesSection:`, tradesSection);
        console.log(`[DEBUG] tradesContainer:`, tradesContainer);
        
        if (!tradesSection || !tradesContainer) {
            console.log(`[DEBUG] –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã tradesSection –∏–ª–∏ tradesContainer`);
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
        const bot = this.activeBots.find(b => b.symbol === coinSymbol);
        
        console.log(`[DEBUG] –ù–∞–π–¥–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è ${coinSymbol}:`, bot);
        
        if (!bot) {
            console.log(`[DEBUG] –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${coinSymbol}`);
            tradesSection.style.display = 'none';
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å–¥–µ–ª–æ–∫
        console.log(`[DEBUG] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å–¥–µ–ª–æ–∫ –¥–ª—è ${coinSymbol}`);
        tradesSection.style.display = 'block';
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–∞—Ö
        const trades = this.getBotTrades(bot);
        
        console.log(`[DEBUG] –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è ${coinSymbol}:`, trades);
        
        if (trades.length === 0) {
            console.log(`[DEBUG] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è ${coinSymbol}`);
            tradesContainer.innerHTML = '<div class="no-trades">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫</div>';
            return;
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–¥–µ–ª–∫–∏
        const tradesHtml = trades.map(trade => this.renderTradeItem(trade)).join('');
        console.log(`[DEBUG] HTML –¥–ª—è —Å–¥–µ–ª–æ–∫ ${coinSymbol}:`, tradesHtml);
        tradesContainer.innerHTML = tradesHtml;
    }
    
    getBotTrades(bot) {
        console.log(`[DEBUG] getBotTrades –¥–ª—è ${bot.symbol}:`, {
            position_side: bot.position_side,
            entry_price: bot.entry_price,
            position_size: bot.position_size,
            exchange_position: bot.exchange_position
        });
        
        const trades = [];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º currentRsi –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö –±–ª–æ–∫–∞—Ö
        const currentRsi = bot.rsi_data?.rsi6h || 50;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è LONG
        if (bot.position_side === 'LONG' && bot.entry_price) {
            console.log(`[DEBUG] –°–æ–∑–¥–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ${bot.symbol}`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            const stopLossPrice = bot.exchange_position?.stop_loss || bot.entry_price * 0.95; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ –∏–ª–∏ 5% –æ—Ç –≤—Ö–æ–¥–∞
            const takeProfitPrice = bot.exchange_position?.take_profit || null; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
            let calculatedStopLoss = stopLossPrice;
            let calculatedTakeProfit = takeProfitPrice;
            
            if (!bot.exchange_position?.stop_loss) {
                const stopLossPercent = bot.max_loss_percent || 15.0;
                calculatedStopLoss = bot.entry_price * (1 - stopLossPercent / 100);
            }
            
            if (!bot.exchange_position?.take_profit) {
                const rsiExitLong = bot.rsi_exit_long || 55;
                
                if (currentRsi < rsiExitLong) {
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –≤—Ö–æ–¥–∞
                    const takeProfitPercent = (rsiExitLong - currentRsi) * 0.5; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
                    calculatedTakeProfit = bot.entry_price * (1 + takeProfitPercent / 100);
                }
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –≤ USDT —Ç–æ—á–Ω–æ
            const volumeInTokens = bot.position_size || 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (70 AWE)
            const volumeInUsdt = parseFloat((volumeInTokens * bot.entry_price).toFixed(2)); // –¢–æ—á–Ω—ã–π –æ–±—ä–µ–º –≤ USDT (70 * 0.074190 = 5.19 USDT)
            
            console.log(`[DEBUG] –†–∞—Å—á–µ—Ç—ã –¥–ª—è ${bot.symbol}:`, {
                volumeInTokens,
                volumeInUsdt,
                calculatedStopLoss,
                calculatedTakeProfit
            });
            
            trades.push({
                side: 'LONG',
                entryPrice: bot.entry_price,
                currentPrice: bot.current_price || bot.mark_price || bot.entry_price,
                stopLossPrice: calculatedStopLoss,
                stopLossPercent: bot.max_loss_percent || 15.0,
                takeProfitPrice: calculatedTakeProfit,
                pnl: bot.unrealized_pnl || 0,
                status: 'active',
                volume: volumeInUsdt, // –û–±—ä–µ–º –≤ USDT
                volumeInTokens: volumeInTokens, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                volumeMode: 'USDT',
                startTime: bot.created_at,
                rsi: currentRsi,
                trend: bot.trend6h || 'NEUTRAL',
                workTime: bot.work_time || '0–º',
                lastUpdate: bot.last_update || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            });
        } else {
            console.log(`[DEBUG] –ù–µ—Ç LONG –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è ${bot.symbol}:`, {
                position_side: bot.position_side,
                entry_price: bot.entry_price
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è SHORT (–¥–ª—è –∫—Ä–æ—Å—Å-—Å–¥–µ–ª–æ–∫)
        if (bot.position_side === 'SHORT' && bot.entry_price) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            const stopLossPrice = bot.exchange_position?.stop_loss || bot.entry_price * 1.05; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ –∏–ª–∏ 5% –æ—Ç –≤—Ö–æ–¥–∞
            const takeProfitPrice = bot.exchange_position?.take_profit || null; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
            let calculatedStopLoss = stopLossPrice;
            let calculatedTakeProfit = takeProfitPrice;
            
            if (!bot.exchange_position?.stop_loss) {
                const stopLossPercent = bot.max_loss_percent || 15.0;
                calculatedStopLoss = bot.entry_price * (1 + stopLossPercent / 100);
            }
            
            if (!bot.exchange_position?.take_profit) {
                const rsiExitShort = bot.rsi_exit_short || 45;
                
                if (currentRsi > rsiExitShort) {
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –≤—Ö–æ–¥–∞
                    const takeProfitPercent = (currentRsi - rsiExitShort) * 0.5; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
                    calculatedTakeProfit = bot.entry_price * (1 - takeProfitPercent / 100);
                }
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –≤ USDT —Ç–æ—á–Ω–æ
            const volumeInTokens = bot.position_size || 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            const volumeInUsdt = parseFloat((volumeInTokens * bot.entry_price).toFixed(2)); // –¢–æ—á–Ω—ã–π –æ–±—ä–µ–º –≤ USDT
            
            trades.push({
                side: 'SHORT',
                entryPrice: bot.entry_price,
                currentPrice: bot.current_price || bot.mark_price || bot.entry_price,
                stopLossPrice: calculatedStopLoss,
                stopLossPercent: bot.max_loss_percent || 15.0,
                takeProfitPrice: calculatedTakeProfit,
                pnl: bot.unrealized_pnl || 0,
                status: 'active',
                volume: volumeInUsdt, // –û–±—ä–µ–º –≤ USDT
                volumeInTokens: volumeInTokens, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                volumeMode: 'USDT',
                startTime: bot.created_at,
                rsi: currentRsi,
                trend: bot.trend6h || 'NEUTRAL',
                workTime: bot.work_time || '0–º',
                lastUpdate: bot.last_update || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            });
        }
        
        return trades;
    }
    
    renderTradeItem(trade) {
        const sideIcon = trade.side === 'LONG' ? 'üìà' : 'üìâ';
        const sideClass = trade.side.toLowerCase();
        const pnlClass = trade.pnl >= 0 ? 'positive' : 'negative';
        const pnlIcon = trade.pnl >= 0 ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è';
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        const priceChange = trade.side === 'LONG' 
            ? ((trade.currentPrice - trade.entryPrice) / trade.entryPrice) * 100
            : ((trade.entryPrice - trade.currentPrice) / trade.entryPrice) * 100;
        
        const priceChangeClass = priceChange >= 0 ? 'positive' : 'negative';
        
        return `
            <div class="trade-item" style="border: 1px solid #444; border-radius: 8px; padding: 12px; margin: 8px 0; background: #2a2a2a; transition: all 0.3s ease;" onmouseover="this.style.backgroundColor='#333'" onmouseout="this.style.backgroundColor='#2a2a2a'">
                <div class="trade-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; padding-bottom: 8px; border-bottom: 1px solid #444;">
                    <div class="trade-side ${sideClass}" style="display: flex; align-items: center; gap: 8px;">
                        <span style="font-size: 16px;">${sideIcon}</span>
                        <span style="color: ${trade.side === 'LONG' ? '#4caf50' : '#f44336'}; font-weight: bold;">${trade.side}</span>
                    </div>
                    <div class="trade-status ${trade.status}" style="background: ${trade.status === 'active' ? '#4caf50' : '#ff5722'}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 10px;">
                        ${trade.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ó–∞–∫—Ä—ã—Ç–∞'}
                    </div>
                </div>
                
                <div class="trade-details" style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 12px; color: #ccc;">
                    <div class="trade-detail-item" style="display: flex; justify-content: space-between; align-items: center; padding: 4px 8px; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <span class="trade-detail-label" style="color: #888;">üíµ –í—Ö–æ–¥:</span>
                        <span class="trade-detail-value" style="color: #fff; font-weight: 600;">$${trade.entryPrice.toFixed(6)}</span>
                    </div>
                    
                    <div class="trade-detail-item" style="display: flex; justify-content: space-between; align-items: center; padding: 4px 8px; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <span class="trade-detail-label" style="color: #888;">üìä –¢–µ–∫—É—â–∞—è:</span>
                        <span class="trade-detail-value" style="color: #fff; font-weight: 600;">$${trade.currentPrice.toFixed(6)}</span>
                    </div>
                    
                    <div class="trade-detail-item" style="display: flex; justify-content: space-between; align-items: center; padding: 4px 8px; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <span class="trade-detail-label" style="color: #888;">üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ:</span>
                        <span class="trade-detail-value ${priceChangeClass}" style="color: ${priceChange >= 0 ? '#4caf50' : '#f44336'}; font-weight: 600;">${priceChange.toFixed(2)}%</span>
                    </div>
                    
                    <div class="trade-detail-item" style="display: flex; justify-content: space-between; align-items: center; padding: 4px 8px; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <span class="trade-detail-label" style="color: #888;">üí∞ –û–±—ä–µ–º:</span>
                        <span class="trade-detail-value" style="color: #fff; font-weight: 600;">${trade.volume.toFixed(2)} ${trade.volumeMode.toUpperCase()}</span>
                    </div>
                    
                    <div class="trade-detail-item" style="display: flex; justify-content: space-between; align-items: center; padding: 4px 8px; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <span class="trade-detail-label" style="color: #888;">üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å:</span>
                        <span class="trade-detail-value" style="color: #ff9800; font-weight: 600;">$${parseFloat(trade.stopLossPrice).toFixed(6)} (${trade.stopLossPercent}%)</span>
                    </div>
                    
                    ${trade.takeProfitPrice ? `
                    <div class="trade-detail-item" style="display: flex; justify-content: space-between; align-items: center; padding: 4px 8px; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <span class="trade-detail-label" style="color: #888;">üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</span>
                        <span class="trade-detail-value" style="color: #4caf50; font-weight: 600;">$${parseFloat(trade.takeProfitPrice).toFixed(6)}</span>
                    </div>
                    ` : ''}
                    
                    <div class="trade-detail-item" style="display: flex; justify-content: space-between; align-items: center; padding: 4px 8px; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <span class="trade-detail-label" style="color: #888;">üìä RSI:</span>
                        <span class="trade-detail-value" style="color: #fff; font-weight: 600;">${trade.rsi ? trade.rsi.toFixed(1) : 'N/A'}</span>
                    </div>
                    
                    <div class="trade-detail-item" style="display: flex; justify-content: space-between; align-items: center; padding: 4px 8px; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <span class="trade-detail-label" style="color: #888;">‚û°Ô∏è –¢—Ä–µ–Ω–¥:</span>
                        <span class="trade-detail-value" style="color: ${trade.trend === 'UP' ? '#4caf50' : trade.trend === 'DOWN' ? '#f44336' : '#ff9800'}; font-weight: 600;">${trade.trend || 'NEUTRAL'}</span>
                    </div>
                    
                    <div class="trade-detail-item" style="display: flex; justify-content: space-between; align-items: center; padding: 4px 8px; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <span class="trade-detail-label" style="color: #888;">‚è±Ô∏è –í—Ä–µ–º—è:</span>
                        <span class="trade-detail-value" style="color: #fff; font-weight: 600;">${trade.workTime || '0–º'}</span>
                    </div>
                    
                    <div class="trade-detail-item" style="display: flex; justify-content: space-between; align-items: center; padding: 4px 8px; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <span class="trade-detail-label" style="color: #888;">üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ:</span>
                        <span class="trade-detail-value" style="color: #fff; font-weight: 600;">${trade.lastUpdate || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                    </div>
                </div>
                
                <div class="trade-pnl ${pnlClass}">
                    <span>${pnlIcon} PnL:</span>
                    <span>$${trade.pnl.toFixed(3)}</span>
                </div>
            </div>
        `;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    initializeManualPositionsControls() {
        console.log('[BotsManager] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...');
        
        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        const refreshBtn = document.getElementById('refreshManualPositionsBtn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', async () => {
                console.log('[BotsManager] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...');
                
                try {
                    const response = await fetch(`http://localhost:5001/api/bots/manual-positions/refresh`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        console.log('[BotsManager] ‚úÖ –†—É—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', result);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        await this.loadCoinsRsiData();
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if (window.showToast) {
                            window.showToast(`${window.languageUtils.translate('updated')} ${result.count} ${window.languageUtils.translate('manual_positions')}`, 'success');
                        }
                    } else {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                } catch (error) {
                    console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', error);
                    if (window.showToast) {
                        window.showToast(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`, 'error');
                    }
                }
            });
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ RSI –¥–∞–Ω–Ω—ã—Ö
     */
    initializeRSILoadingButtons() {
        console.log('[BotsManager] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ RSI... (–∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)');
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É RSI –¥–∞–Ω–Ω—ã—Ö (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —É–¥–∞–ª–µ–Ω–∞)
     * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
     */
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç
     */
    async loadMatureCoinsCount() {
        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/mature-coins-list`);
            const data = await response.json();
            
            if (data.success) {
                const countEl = document.getElementById('matureCoinsCount');
                if (countEl) {
                    countEl.textContent = `(${data.total_count})`;
                }
            }
        } catch (error) {
            console.error('[BotsManager] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á—ë—Ç—á–∏–∫–∞ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç –∏ –ø–æ–º–µ—á–∞–µ—Ç –∏—Ö –≤ –¥–∞–Ω–Ω—ã—Ö
     */
    async loadMatureCoinsAndMark() {
        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/mature-coins-list`);
            const data = await response.json();
            
            if (data.success && data.mature_coins) {
                // –ü–æ–º–µ—á–∞–µ–º –∑—Ä–µ–ª—ã–µ –º–æ–Ω–µ—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
                let markedCount = 0;
                this.coinsRsiData.forEach(coin => {
                    coin.is_mature = data.mature_coins.includes(coin.symbol);
                    if (coin.is_mature) {
                        markedCount++;
                    }
                });
                
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç –≤ UI
                await this.loadMatureCoinsCount();
                
                this.logDebug(`[BotsManager] üíé –ü–æ–º–µ—á–µ–Ω–æ ${markedCount} –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç –∏–∑ ${data.total_count} –æ–±—â–∏—Ö`);
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç:', error);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ toast
        console.log(`[${type.toUpperCase()}] ${message}`);
    }

    // ==================== –ò–°–¢–û–†–ò–Ø –ë–û–¢–û–í ====================

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –±–æ—Ç–æ–≤
     */
    initializeHistoryTab() {
        console.log('[BotsManager] üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –±–æ—Ç–æ–≤...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.initializeHistoryFilters();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        this.initializeHistorySubTabs();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.loadHistoryData();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        this.initializeHistoryActionButtons();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏
     */
    initializeHistoryFilters() {
        // –§–∏–ª—å—Ç—Ä –ø–æ –±–æ—Ç—É
        const botFilter = document.getElementById('historyBotFilter');
        if (botFilter) {
            botFilter.addEventListener('change', () => this.loadHistoryData());
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è
        const actionFilter = document.getElementById('historyActionFilter');
        if (actionFilter) {
            actionFilter.addEventListener('change', () => this.loadHistoryData());
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
        const dateFilter = document.getElementById('historyDateFilter');
        if (dateFilter) {
            dateFilter.addEventListener('change', () => this.loadHistoryData());
        }

        // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const applyBtn = document.querySelector('.history-filters .btn-primary');
        if (applyBtn) {
            applyBtn.addEventListener('click', () => this.loadHistoryData());
        }

        const clearBtn = document.querySelector('.history-filters .btn-secondary');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => this.clearHistoryFilters());
        }

        const exportBtn = document.querySelector('.history-filters .btn-info');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => this.exportHistoryData());
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
     */
    initializeHistorySubTabs() {
        const tabButtons = document.querySelectorAll('.history-tab-btn');
        const tabContents = document.querySelectorAll('.history-tab-content');

        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tabName = button.dataset.historyTab;
                
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                button.classList.add('active');
                const targetContent = document.getElementById(`${tabName}History`);
                if (targetContent) {
                    targetContent.classList.add('active');
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
                this.loadHistoryData(tabName);
            });
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏—Å—Ç–æ—Ä–∏–∏
     */
    initializeHistoryActionButtons() {
        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const refreshBtn = document.querySelector('.history-actions .btn-primary');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => this.loadHistoryData());
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
        const demoBtn = document.querySelector('.history-actions .btn-success');
        if (demoBtn) {
            demoBtn.addEventListener('click', () => this.createDemoHistoryData());
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        const clearBtn = document.querySelector('.history-actions .btn-warning');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => this.clearAllHistory());
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
     */
    async loadHistoryData(tabName = 'actions') {
        try {
            console.log(`[BotsManager] üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏: ${tabName}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const filters = this.getHistoryFilters();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
            switch (tabName) {
                case 'actions':
                    await this.loadBotActions(filters);
                    break;
                case 'trades':
                    await this.loadBotTrades(filters);
                    break;
                case 'signals':
                    await this.loadBotSignals(filters);
                    break;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.loadHistoryStatistics(filters.symbol);
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`, 'error');
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    getHistoryFilters() {
        const botFilter = document.getElementById('historyBotFilter');
        const actionFilter = document.getElementById('historyActionFilter');
        const dateFilter = document.getElementById('historyDateFilter');
        
        return {
            symbol: botFilter ? botFilter.value : null,
            action_type: actionFilter ? actionFilter.value : null,
            trade_type: actionFilter ? actionFilter.value : null,
            period: dateFilter ? dateFilter.value : null,
            limit: 100
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–æ–≤
     */
    async loadBotActions(filters) {
        try {
            const params = new URLSearchParams();
            if (filters.symbol && filters.symbol !== 'all') params.append('symbol', filters.symbol);
            if (filters.action_type && filters.action_type !== 'all') params.append('action_type', filters.action_type);
            params.append('limit', filters.limit);
            
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/history?${params}`);
            const data = await response.json();
            
            if (data.success) {
                this.displayBotActions(data.history);
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–æ–≤:', error);
            this.displayBotActions([]);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –±–æ—Ç–æ–≤
     */
    async loadBotTrades(filters) {
        try {
            const params = new URLSearchParams();
            if (filters.symbol && filters.symbol !== 'all') params.append('symbol', filters.symbol);
            if (filters.trade_type && filters.trade_type !== 'all') params.append('trade_type', filters.trade_type);
            params.append('limit', filters.limit);
            
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/trades?${params}`);
            const data = await response.json();
            
            if (data.success) {
                this.displayBotTrades(data.trades);
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫ –±–æ—Ç–æ–≤:', error);
            this.displayBotTrades([]);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –±–æ—Ç–æ–≤
     */
    async loadBotSignals(filters) {
        try {
            const params = new URLSearchParams();
            if (filters.symbol && filters.symbol !== 'all') params.append('symbol', filters.symbol);
            params.append('action_type', 'SIGNAL');
            params.append('limit', filters.limit);
            
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/history?${params}`);
            const data = await response.json();
            
            if (data.success) {
                this.displayBotSignals(data.history);
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –±–æ—Ç–æ–≤:', error);
            this.displayBotSignals([]);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏
     */
    async loadHistoryStatistics(symbol = null) {
        try {
            const params = new URLSearchParams();
            if (symbol && symbol !== 'all') params.append('symbol', symbol);
            
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/statistics?${params}`);
            const data = await response.json();
            
            if (data.success) {
                this.displayHistoryStatistics(data.statistics);
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–æ–≤
     */
    displayBotActions(actions) {
        const container = document.getElementById('botActionsList');
        if (!container) return;
        
        if (actions.length === 0) {
            container.innerHTML = `
                <div class="empty-history-state">
                    <div class="empty-icon">üìä</div>
                    <p data-translate="no_actions_found">–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
                    <p data-translate="actions_will_appear">–î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–æ–≤ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }
        
        const html = actions.map(action => `
            <div class="history-item">
                <div class="history-item-header">
                    <span class="history-action-type">${this.getActionIcon(action.action_type)} ${action.action_name}</span>
                    <span class="history-timestamp">${this.formatTimestamp(action.timestamp)}</span>
                </div>
                <div class="history-item-content">
                    <div class="history-symbol">${action.symbol || 'N/A'}</div>
                    <div class="history-details">${action.details}</div>
                    ${action.bot_id ? `<div class="history-bot-id">Bot ID: ${action.bot_id}</div>` : ''}
                </div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –±–æ—Ç–æ–≤
     */
    displayBotTrades(trades) {
        const container = document.getElementById('botTradesList');
        if (!container) return;
        
        if (trades.length === 0) {
            container.innerHTML = `
                <div class="empty-history-state">
                    <div class="empty-icon">üíº</div>
                    <p data-translate="no_trades_found">–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
                    <p data-translate="trades_will_appear">–°–¥–µ–ª–∫–∏ –±–æ—Ç–æ–≤ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }
        
        const html = trades.map(trade => `
            <div class="history-item trade-item ${trade.status === 'CLOSED' ? 'closed' : 'open'}">
                <div class="history-item-header">
                    <span class="history-trade-direction ${trade.direction.toLowerCase()}">${trade.direction}</span>
                    <span class="history-timestamp">${this.formatTimestamp(trade.timestamp)}</span>
                </div>
                <div class="history-item-content">
                    <div class="history-symbol">${trade.symbol}</div>
                    <div class="trade-details">
                        <div class="trade-price">–í—Ö–æ–¥: ${trade.entry_price?.toFixed(4) || 'N/A'}</div>
                        ${trade.exit_price ? `<div class="trade-price">–í—ã—Ö–æ–¥: ${trade.exit_price.toFixed(4)}</div>` : ''}
                        <div class="trade-size">–†–∞–∑–º–µ—Ä: ${trade.size}</div>
                        ${trade.pnl !== null ? `<div class="trade-pnl ${trade.pnl >= 0 ? 'profit' : 'loss'}">PnL: ${trade.pnl.toFixed(2)} USDT</div>` : ''}
                        ${trade.roi !== null ? `<div class="trade-roi ${trade.roi >= 0 ? 'profit' : 'loss'}">ROI: ${trade.roi.toFixed(2)}%</div>` : ''}
                    </div>
                    <div class="trade-status">–°—Ç–∞—Ç—É—Å: ${trade.status === 'OPEN' ? '–û—Ç–∫—Ä—ã—Ç–∞' : '–ó–∞–∫—Ä—ã—Ç–∞'}</div>
                </div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –±–æ—Ç–æ–≤
     */
    displayBotSignals(signals) {
        const container = document.getElementById('botSignalsList');
        if (!container) return;
        
        if (signals.length === 0) {
            container.innerHTML = `
                <div class="empty-history-state">
                    <div class="empty-icon">‚ö°</div>
                    <p data-translate="no_signals_found">–ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
                    <p data-translate="signals_will_appear">–°–∏–≥–Ω–∞–ª—ã –±–æ—Ç–æ–≤ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }
        
        const html = signals.map(signal => `
            <div class="history-item signal-item">
                <div class="history-item-header">
                    <span class="history-signal-type">‚ö° ${signal.signal_type || 'SIGNAL'}</span>
                    <span class="history-timestamp">${this.formatTimestamp(signal.timestamp)}</span>
                </div>
                <div class="history-item-content">
                    <div class="history-symbol">${signal.symbol}</div>
                    <div class="signal-details">
                        <div class="signal-rsi">RSI: ${signal.rsi?.toFixed(2) || 'N/A'}</div>
                        <div class="signal-price">–¶–µ–Ω–∞: ${signal.price?.toFixed(4) || 'N/A'}</div>
                    </div>
                    <div class="signal-description">${signal.details}</div>
                </div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏
     */
    displayHistoryStatistics(stats) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const totalActionsEl = document.querySelector('.history-stats .stat-card:nth-child(1) .stat-value');
        const totalTradesEl = document.querySelector('.history-stats .stat-card:nth-child(2) .stat-value');
        const totalPnlEl = document.querySelector('.history-stats .stat-card:nth-child(3) .stat-value');
        const successRateEl = document.querySelector('.history-stats .stat-card:nth-child(4) .stat-value');
        
        if (totalActionsEl) totalActionsEl.textContent = stats.total_trades || 0;
        if (totalTradesEl) totalTradesEl.textContent = stats.total_trades || 0;
        if (totalPnlEl) totalPnlEl.textContent = `$${stats.total_pnl?.toFixed(2) || '0.00'}`;
        if (successRateEl) successRateEl.textContent = `${stats.win_rate?.toFixed(1) || '0'}%`;
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏
     */
    clearHistoryFilters() {
        const botFilter = document.getElementById('historyBotFilter');
        const actionFilter = document.getElementById('historyActionFilter');
        const dateFilter = document.getElementById('historyDateFilter');
        
        if (botFilter) botFilter.value = 'all';
        if (actionFilter) actionFilter.value = 'all';
        if (dateFilter) dateFilter.value = 'today';
        
        this.loadHistoryData();
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
     */
    exportHistoryData() {
        console.log('[BotsManager] üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
        this.showNotification('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
     */
    async createDemoHistoryData() {
        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/history/demo`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.showNotification('–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ', 'success');
                this.loadHistoryData();
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
     */
    async clearAllHistory() {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            return;
        }
        
        try {
            const response = await fetch(`${this.BOTS_SERVICE_URL}/api/bots/history/clear`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({})
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.showNotification('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞', 'success');
                this.loadHistoryData();
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`, 'error');
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
     */
    getActionIcon(actionType) {
        const icons = {
            'BOT_START': 'üöÄ',
            'BOT_STOP': 'üõë',
            'SIGNAL': '‚ö°',
            'POSITION_OPENED': 'üìà',
            'POSITION_CLOSED': 'üìâ',
            'STOP_LOSS': 'üõ°Ô∏è',
            'TAKE_PROFIT': 'üéØ',
            'TRAILING_STOP': 'üìä',
            'ERROR': '‚ùå'
        };
        return icons[actionType] || 'üìã';
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp
     */
    formatTimestamp(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }
    
    saveCollapseState(symbol, isCollapsed) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
        if (!this.collapseStates) {
            this.collapseStates = {};
        }
        
        this.collapseStates[symbol] = {
            isCollapsed: isCollapsed,
            buttonText: isCollapsed ? '‚ñ≤' : '‚ñº'
        };
        
        console.log(`[DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${symbol}:`, this.collapseStates[symbol]);
        console.log(`[DEBUG] –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:`, this.collapseStates);
    }
    
    preserveCollapseState(container) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        if (!this.collapseStates) {
            this.collapseStates = {};
        }
        
        console.log(`[DEBUG] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:`, container.id);
        console.log(`[DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:`, this.collapseStates);
        
        container.querySelectorAll('.active-bot-item').forEach(item => {
            const symbol = item.dataset.symbol;
            const details = item.querySelector('.bot-details');
            const collapseBtn = item.querySelector('.collapse-btn');
            
            console.log(`[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ—Ç–∞ ${symbol}:`, {
                hasDetails: !!details,
                hasCollapseBtn: !!collapseBtn,
                hasState: !!this.collapseStates[symbol],
                currentDisplay: details ? details.style.display : 'N/A'
            });
            
            if (details && collapseBtn && this.collapseStates[symbol]) {
                const state = this.collapseStates[symbol];
                console.log(`[DEBUG] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${symbol}:`, state);
                
                if (state.isCollapsed) {
                    // –ë–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–µ—Ä–Ω—É—Ç
                    details.style.display = 'none';
                    collapseBtn.textContent = '‚ñº';
                    console.log(`[DEBUG] ${symbol}: –°–í–ï–†–ù–£–¢ (display: none, –∫–Ω–æ–ø–∫–∞: ‚ñº)`);
                } else {
                    // –ë–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π display –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    const isDetailsElement = container.id === 'activeBotsDetailsList';
                    const displayValue = isDetailsElement ? 'grid' : 'block';
                    details.style.display = displayValue;
                    collapseBtn.textContent = '‚ñ≤';
                    console.log(`[DEBUG] ${symbol}: –†–ê–ó–í–ï–†–ù–£–¢ (display: ${displayValue}, –∫–Ω–æ–ø–∫–∞: ‚ñ≤, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${container.id})`);
                }
            } else {
                console.log(`[DEBUG] ${symbol}: –ù–ï –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
            }
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –≥–ª–æ–±–∞–ª—å–Ω–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
window.BotsManager = BotsManager;

// BotsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ app.js, –Ω–µ –∑–¥–µ—Å—å
// Version: 2025-10-21 03:47:29
