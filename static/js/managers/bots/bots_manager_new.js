/**
 * –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏
 * –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
 */
class BotsManager {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        this.apiService = new BotsApiService();
        this.uiComponents = new BotsUIComponents();
        this.dataManager = new BotsDataManager();
        this.configManager = new BotsConfigManager();
        this.controlManager = new BotsControlManager();
        this.filtersManager = new BotsFiltersManager();

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.serviceOnline = false;
        this.updateInterval = null;
        this.monitoringTimer = null;
        this.refreshInterval = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
        this.trendLabelsUpdated = false;

        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–¥—É–ª–µ–π
        this.bindModuleContexts();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        this.init();
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–¥—É–ª–µ–π
     */
    bindModuleContexts() {
        // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –º–æ–¥—É–ª–∏
        this.apiService.botsManager = this;
        this.uiComponents.botsManager = this;
        this.dataManager.botsManager = this;
        this.configManager.botsManager = this;
        this.controlManager.botsManager = this;
        this.filtersManager.botsManager = this;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async init() {
        console.log('[BotsManager] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–æ–≤...');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.initializeInterface();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤
            await this.checkBotsService();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this.startPeriodicUpdate();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            setTimeout(() => {
                console.log('[BotsManager] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
                this.loadConfigurationData();
            }, 2000);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–±–æ—Ç–∞ –∏ –±–æ—Ç–æ–≤
            setTimeout(() => {
                console.log('[BotsManager] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–±–æ—Ç–∞...');
                this.loadActiveBotsData();
            }, 1000);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤
            setTimeout(() => {
                console.log('[BotsManager] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤...');
                this.trendLabelsUpdated = false;
                this.updateTrendFilterLabels();
            }, 3000);
            
            console.log('[BotsManager] ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showServiceUnavailable();
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    initializeInterface() {
        console.log('[BotsManager] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±—ã
        this.initializeTabs();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        this.initializeSearch();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
        this.loadAccountInfo();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã RSI
        this.filtersManager.initializeRsiFilters();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
        this.initializeBotControls();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±–ª–∞—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
        this.initializeScopeButtons();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.initializeManagementButtons();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        this.uiComponents.applyReadabilityStyles();
        
        console.log('[BotsManager] ‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–æ–≤
     */
    initializeTabs() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        
        tabButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const tabName = btn.dataset.tab;
                console.log('[BotsManager] üìë –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±:', tabName);
                this.switchTab(tabName);
            });
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–∞
     */
    switchTab(tabName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∞–±–æ–≤
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tabName);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–æ–≤
        document.querySelectorAll('.tab-content').forEach(content => {
            const tabIdMap = {
                'management': 'managementTab',
                'filters': 'filtersTab', 
                'active-bots': 'activeBotsTab',
                'configuration': 'configurationTab'
            };
            
            const targetId = tabIdMap[tabName] || `${tabName}Tab`;
            const isActive = content.id === targetId;
            content.classList.toggle('active', isActive);
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
        this.loadTabData(tabName);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–∞
     */
    loadTabData(tabName) {
        switch (tabName) {
            case 'management':
                this.loadCoinsRsiData();
                break;
            case 'filters':
                this.filtersManager.loadFiltersData();
                break;
            case 'active-bots':
                this.loadActiveBotsData();
                break;
            case 'configuration':
                this.loadConfigurationData();
                break;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
     */
    initializeSearch() {
        const searchInput = document.getElementById('coinSearchInput');
        const clearSearchBtn = document.getElementById('clearSearchBtn');
        
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value;
                this.dataManager.setSearchTerm(searchTerm);
                this.updateClearButtonVisibility(searchTerm);
                this.performSearch(searchTerm);
            });
        }
        
        if (clearSearchBtn) {
            clearSearchBtn.addEventListener('click', () => this.clearSearch());
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    performSearch(searchTerm) {
        const filteredCoins = this.dataManager.searchCoins(searchTerm);
        this.filtersManager.renderFilteredCoins(filteredCoins);
        this.filtersManager.updateSmartFilterControls(searchTerm);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
     */
    updateClearButtonVisibility(searchTerm) {
        const clearSearchBtn = document.getElementById('clearSearchBtn');
        if (clearSearchBtn) {
            clearSearchBtn.style.display = searchTerm && searchTerm.length > 0 ? 'flex' : 'none';
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    clearSearch() {
        const searchInput = document.getElementById('coinSearchInput');
        if (searchInput) {
            searchInput.value = '';
            this.dataManager.setSearchTerm('');
            this.performSearch('');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
     */
    initializeBotControls() {
        const createBotBtn = document.getElementById('createBotBtn');
        const startBotBtn = document.getElementById('startBotBtn');
        const stopBotBtn = document.getElementById('stopBotBtn');
        const pauseBotBtn = document.getElementById('pauseBotBtn');
        const resumeBotBtn = document.getElementById('resumeBotBtn');

        if (createBotBtn) {
            createBotBtn.addEventListener('click', () => this.createBot());
        }
        if (startBotBtn) {
            startBotBtn.addEventListener('click', () => this.startBot());
        }
        if (stopBotBtn) {
            stopBotBtn.addEventListener('click', () => this.stopBot());
        }
        if (pauseBotBtn) {
            pauseBotBtn.addEventListener('click', () => this.pauseBot());
        }
        if (resumeBotBtn) {
            resumeBotBtn.addEventListener('click', () => this.resumeBot());
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –æ–±–ª–∞—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
     */
    initializeScopeButtons() {
        const scopeButtons = document.querySelectorAll('.scope-btn');
        
        scopeButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const scope = btn.dataset.scope;
                this.updateScope(scope);
            });
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
     */
    updateScope(scope) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.scope-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.scope === scope);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = this.configManager.getCurrentConfig();
        if (config) {
            config.scope = scope;
            this.configManager.saveAutoBotConfig(config);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    initializeManagementButtons() {
        const addToWhitelistBtn = document.getElementById('addToWhitelistBtn');
        const addToBlacklistBtn = document.getElementById('addToBlacklistBtn');
        const removeFromFiltersBtn = document.getElementById('removeFromFiltersBtn');
        
        if (addToWhitelistBtn) {
            addToWhitelistBtn.addEventListener('click', () => this.filtersManager.addSelectedCoinToWhitelist());
        }
        if (addToBlacklistBtn) {
            addToBlacklistBtn.addEventListener('click', () => this.filtersManager.addSelectedCoinToBlacklist());
        }
        if (removeFromFiltersBtn) {
            removeFromFiltersBtn.addEventListener('click', () => this.filtersManager.removeSelectedCoinFromFilters());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤
     */
    async checkBotsService() {
        console.log('[BotsManager] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤...');
        
        try {
            const result = await this.apiService.checkServiceStatus();
            this.serviceOnline = result.online;
            this.updateServiceStatus(this.serviceOnline ? 'online' : 'offline', result.error);
            
            if (this.serviceOnline) {
                console.log('[BotsManager] ‚úÖ –°–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω');
            } else {
                console.log('[BotsManager] ‚ùå –°–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –æ—Ñ–ª–∞–π–Ω:', result.error);
                this.showServiceUnavailable();
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–æ–≤:', error);
            this.serviceOnline = false;
            this.updateServiceStatus('offline', error.message);
            this.showServiceUnavailable();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
     */
    updateServiceStatus(status, message) {
        const statusElement = document.getElementById('botsServiceStatus');
        const statusDot = document.getElementById('rsiStatusDot');
        
        if (statusElement) {
            const indicator = statusElement.querySelector('.status-indicator');
            const text = statusElement.querySelector('.status-text');
            
            if (indicator) {
                indicator.className = `status-indicator ${status}`;
                indicator.textContent = status === 'online' ? 'üü¢' : 'üî¥';
            }
            
            if (text) {
                text.textContent = status === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω';
            }
        }
        
        if (statusDot) {
            statusDot.className = `status-dot ${status}`;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
     */
    showServiceUnavailable() {
        const coinsListElement = document.getElementById('coinsRsiList');
        if (coinsListElement) {
            coinsListElement.innerHTML = `
                <div class="service-unavailable">
                    <h3>üö´ –°–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
                    <p>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–∞–º–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:</p>
                    <code>python bots.py</code>
                    <p><small>–°–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø–æ—Ä—Ç—É 5001</small></p>
                    <button class="btn btn-primary" onclick="location.reload()">
                        <i class="fas fa-refresh"></i> –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    </button>
                </div>
            `;
        }
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        this.updateServiceStatus('offline', '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö RSI –º–æ–Ω–µ—Ç
     */
    async loadCoinsRsiData() {
        if (!this.serviceOnline) {
            console.warn('[BotsManager] ‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –æ–Ω–ª–∞–π–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
            return;
        }

        const searchInput = document.getElementById('coinSearchInput');
        const currentSearchTerm = searchInput ? searchInput.value : '';
        
        try {
            const response = await this.apiService.getCoinsWithRsi();
            
            if (response.success) {
                this.dataManager.setCoinsRsiData(response.data);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if (this.dataManager.getSelectedCoin()) {
                    const updatedCoin = this.dataManager.getCoinsRsiData().find(coin => 
                        coin.symbol === this.dataManager.getSelectedCoin().symbol
                    );
                    if (updatedCoin) {
                        this.dataManager.setSelectedCoin(updatedCoin);
                    }
                }
                
                this.renderCoinsList();
                console.log(`[BotsManager] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.length} –º–æ–Ω–µ—Ç —Å RSI –¥–∞–Ω–Ω—ã–º–∏`);
            } else {
                throw new Error(response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö RSI');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö RSI:', error);
            this.showServiceUnavailable();
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç
     */
    renderCoinsList() {
        const coinsListElement = document.getElementById('coinsRsiList');
        if (!coinsListElement) return;

        const coins = this.dataManager.getFilteredData();
        
        if (coins.length === 0) {
            coinsListElement.innerHTML = `
                <div class="loading-state">
                    <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö RSI...</p>
                    <small>–ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</small>
                </div>
            `;
            return;
        }

        const coinsHtml = coins.map(coin => {
            const rsiClass = this.uiComponents.getRsiZoneClass(coin.rsi6h);
            const trendClass = coin.trend6h ? `trend-${coin.trend6h.toLowerCase()}` : '';
            const effectiveSignal = this.uiComponents.getEffectiveSignal(coin);
            const signalClass = effectiveSignal === 'ENTER_LONG' ? 'enter-long' : 
                               effectiveSignal === 'ENTER_SHORT' ? 'enter-short' : '';

            return `
                <li class="coin-item ${rsiClass} ${trendClass} ${signalClass}" data-symbol="${coin.symbol}">
                    <div class="coin-item-content">
                        <div class="coin-header">
                            <span class="coin-symbol">${coin.symbol}</span>
                            <div class="coin-header-right">
                                ${this.uiComponents.generateWarningIndicator(coin)}
                                <span class="coin-rsi ${rsiClass}">${coin.rsi6h}</span>
                                <a href="${this.uiComponents.createTickerLink(coin.symbol)}" 
                                   target="_blank" 
                                   class="external-link" 
                                   title="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –±–∏—Ä–∂–µ"
                                   onclick="event.stopPropagation()">
                                    <i class="fas fa-external-link-alt"></i>
                                </a>
                            </div>
                        </div>
                        <div class="coin-details">
                            <span class="coin-trend ${coin.trend6h}">${coin.trend6h || 'NEUTRAL'}</span>
                            <span class="coin-price">$${coin.price?.toFixed(6) || '0'}</span>
                            ${this.uiComponents.generateEnhancedSignalInfo(coin)}
                        </div>
                    </div>
                </li>
            `;
        }).join('');

        coinsListElement.innerHTML = coinsHtml;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        this.attachCoinClickHandlers();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.uiComponents.updateCoinsCounter();
        this.uiComponents.updateSignalCounters();
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç
     */
    attachCoinClickHandlers() {
        const coinItems = document.querySelectorAll('.coin-item');
        
        coinItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const symbol = item.dataset.symbol;
                this.selectCoin(symbol);
            });
        });
    }

    /**
     * –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç—ã
     */
    selectCoin(symbol) {
        const coin = this.dataManager.getCoinBySymbol(symbol);
        if (!coin) return;

        this.dataManager.setSelectedCoin(coin);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        document.querySelectorAll('.coin-item').forEach(item => {
            item.classList.toggle('selected', item.dataset.symbol === symbol);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
        this.showBotControlInterface();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–µ—Ç–µ
        this.updateCoinInfo();
        
        console.log(`[BotsManager] üìå –í—ã–±—Ä–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞: ${symbol}`);
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
     */
    showBotControlInterface() {
        const controlInterface = document.getElementById('botControlInterface');
        if (controlInterface) {
            controlInterface.style.display = 'block';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–µ—Ç–µ
     */
    updateCoinInfo() {
        const selectedCoin = this.dataManager.getSelectedCoin();
        if (!selectedCoin) return;

        const coinInfoElement = document.getElementById('selectedCoinInfo');
        if (coinInfoElement) {
            coinInfoElement.innerHTML = `
                <h4>${selectedCoin.symbol}</h4>
                <p>RSI 6H: <span class="rsi-value">${selectedCoin.rsi6h}</span></p>
                <p>–¢—Ä–µ–Ω–¥: <span class="trend-value">${selectedCoin.trend6h || 'NEUTRAL'}</span></p>
                <p>–¶–µ–Ω–∞: <span class="price-value">$${selectedCoin.price?.toFixed(6) || '0'}</span></p>
            `;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
        this.uiComponents.updateBotControlButtons();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
     */
    async loadActiveBotsData() {
        if (!this.serviceOnline) {
            console.warn('[BotsManager] ‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –æ–Ω–ª–∞–π–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–æ—Ç–æ–≤');
            return;
        }

        try {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            try {
                const syncResponse = await fetch(`${this.apiService.baseUrl}/sync-positions`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                const syncData = await syncResponse.json();
                if (syncData.success) {
                    console.log('[BotsManager] ‚úÖ –ü–æ–∑–∏—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
                } else {
                    console.warn('[BotsManager] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π:', syncData.message);
                }
            } catch (syncError) {
                console.warn('[BotsManager] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π:', syncError);
            }

            const [botsResponse, autoBotResponse] = await Promise.all([
                this.apiService.getBotsList(),
                this.apiService.getAutoBotConfig()
            ]);

            if (botsResponse.success) {
                this.dataManager.setActiveBots(botsResponse.data);
                this.renderActiveBotsDetails();
            }

            if (autoBotResponse.success) {
                this.configManager.autoBotConfig = autoBotResponse.data;
                this.updateRsiThresholds(autoBotResponse.data);
            }

            console.log('[BotsManager] ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤:', error);
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–∞—Ö
     */
    renderActiveBotsDetails() {
        const activeBots = this.dataManager.getActiveBots();
        const container = document.getElementById('activeBotsDetails');
        
        if (!container) return;

        if (activeBots.length === 0) {
            container.innerHTML = `
                <div class="no-bots">
                    <p>ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –Ω–µ—Ç</p>
                    <small>–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"</small>
                </div>
            `;
            return;
        }

        const botsHtml = activeBots.map(bot => {
            const positionInfo = this.controlManager.getBotPositionInfo(bot);
            const timeInfo = this.controlManager.getBotTimeInfo(bot);
            
            return `
                <div class="bot-card" data-symbol="${bot.symbol}">
                    <div class="bot-header">
                        <h4>${bot.symbol}</h4>
                        <span class="bot-status ${bot.status}">${bot.status}</span>
                    </div>
                    <div class="bot-details">
                        ${positionInfo ? `
                            <div class="position-info">
                                <p>PnL: <span class="${positionInfo.isProfitable ? 'profit' : 'loss'}">${positionInfo.pnl.toFixed(2)} USDT</span></p>
                                <p>ROI: <span class="${positionInfo.isProfitable ? 'profit' : 'loss'}">${positionInfo.roi.toFixed(2)}%</span></p>
                                <p>–°—Ç–æ—Ä–æ–Ω–∞: ${positionInfo.side}</p>
                            </div>
                        ` : ''}
                        ${timeInfo ? `
                            <div class="time-info">
                                <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${timeInfo.formatted}</p>
                            </div>
                        ` : ''}
                    </div>
                    <div class="bot-actions">
                        ${this.uiComponents.getBotControlButtonsHtml(bot)}
                        ${this.uiComponents.getBotDetailButtonsHtml(bot)}
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = botsHtml;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π RSI
     */
    updateRsiThresholds(config) {
        const oldLongThreshold = this.configManager.rsiLongThreshold;
        const oldShortThreshold = this.configManager.rsiShortThreshold;
        
        this.configManager.rsiLongThreshold = config.rsi_long_threshold || 29;
        this.configManager.rsiShortThreshold = config.rsi_short_threshold || 71;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.uiComponents.updateRsiThresholds(this.configManager.rsiLongThreshold, this.configManager.rsiShortThreshold);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.filtersManager.updateRsiFilterButtons();
        this.filtersManager.updateTrendFilterLabels();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã RSI –¥–ª—è –º–æ–Ω–µ—Ç
        this.refreshCoinsRsiClasses();
        
        console.log(`[BotsManager] üîÑ RSI –ø–æ—Ä–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: LONG=${this.configManager.rsiLongThreshold}, SHORT=${this.configManager.rsiShortThreshold}`);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ RSI –¥–ª—è –º–æ–Ω–µ—Ç
     */
    refreshCoinsRsiClasses() {
        const coinItems = document.querySelectorAll('.coin-item');
        
        coinItems.forEach(item => {
            const symbol = item.dataset.symbol;
            const coinData = this.dataManager.getCoinBySymbol(symbol);
            
            if (coinData) {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
                item.classList.remove('buy-zone', 'sell-zone', 'enter-long', 'enter-short');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
                const rsiClass = this.uiComponents.getRsiZoneClass(coinData.rsi6h);
                if (rsiClass) {
                    item.classList.add(rsiClass);
                }
                
                const effectiveSignal = this.uiComponents.getEffectiveSignal(coinData);
                if (effectiveSignal === 'ENTER_LONG') {
                    item.classList.add('enter-long');
                } else if (effectiveSignal === 'ENTER_SHORT') {
                    item.classList.add('enter-short');
                }
            }
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startPeriodicUpdate() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }

        this.updateInterval = setInterval(() => {
            this.performPeriodicUpdate();
        }, this.refreshInterval);

        console.log(`[BotsManager] üîÑ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ${this.refreshInterval / 1000} —Å–µ–∫—É–Ω–¥`);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async performPeriodicUpdate() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
            await this.checkBotsService();
            
            if (this.serviceOnline) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ RSI
                await this.loadCoinsRsiData();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
                await this.loadActiveBotsData();
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    stopPeriodicUpdate() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async loadConfigurationData() {
        await this.configManager.loadAutoBotConfig();
        await this.configManager.loadSystemConfig();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    updateTrendFilterLabels() {
        this.filtersManager.updateTrendFilterLabels();
    }

    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ controlManager)
    async createBot() {
        const selectedCoin = this.dataManager.getSelectedCoin();
        if (!selectedCoin) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞', 'warning');
            return;
        }

        return await this.controlManager.createBot(selectedCoin.symbol);
    }

    async startBot(symbol) {
        return await this.controlManager.startBot(symbol);
    }

    async stopBot(symbol) {
        return await this.controlManager.stopBot(symbol);
    }

    async pauseBot(symbol) {
        return await this.controlManager.pauseBot(symbol);
    }

    async resumeBot(symbol) {
        return await this.controlManager.resumeBot(symbol);
    }

    async deleteBot(symbol) {
        return await this.controlManager.deleteBot(symbol);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ
     */
    async loadAccountInfo() {
        if (!this.serviceOnline) {
            console.warn('[BotsManager] ‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –æ–Ω–ª–∞–π–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ');
            return;
        }

        try {
            const response = await this.apiService.getAccountInfo();
            if (response.success) {
                console.log('[BotsManager] ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å UI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—á–µ—Ç–µ
            } else {
                throw new Error(response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ');
            }
        } catch (error) {
            console.error('[BotsManager] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
     */
    updateScope(scope) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.scope-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.scope === scope);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = this.configManager.getCurrentConfig();
        if (config) {
            config.scope = scope;
            this.configManager.saveAutoBotConfig(config);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message, type = 'info') {
        this.uiComponents.showConfigNotification('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', message, type);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        this.stopPeriodicUpdate();
        
        if (this.monitoringTimer) {
            clearInterval(this.monitoringTimer);
        }
        
        console.log('[BotsManager] üóëÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// BotsManager —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ bots_modules_loader.js –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
