"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞ –∞–≤—Ç–æ–±–æ—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP API —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
"""

import requests
import sys
from collections import defaultdict

# URL API —Å–µ—Ä–≤–µ—Ä–∞
API_URL = "http://localhost:5001/api"

def print_header(text):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "=" * 80)
    print(f"  {text}")
    print("=" * 80)

def print_section(text):
    """–°–µ–∫—Ü–∏—è"""
    print("\n" + "-" * 80)
    print(f"  {text}")
    print("-" * 80)

def main():
    print_header("üß™ –¢–ï–°–¢ –£–°–õ–û–í–ò–ô –ê–í–¢–û–ë–û–¢–ê")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("\nüìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        response = requests.get(f"{API_URL}/bots/auto-bot", timeout=10)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {response.status_code}")
            return
        
        config = response.json()
        print(f"\nüìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   ‚Ä¢ –í–∫–ª—é—á–µ–Ω: {config.get('enabled', False)}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å. –±–æ—Ç–æ–≤: {config.get('max_concurrent', 5)}")
        print(f"   ‚Ä¢ RSI LONG: ‚â§{config.get('rsi_long_threshold', 29)}")
        print(f"   ‚Ä¢ RSI SHORT: ‚â•{config.get('rsi_short_threshold', 71)}")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏: {config.get('enable_maturity_check', True)}")
        print(f"   ‚Ä¢ ExitScam —Ñ–∏–ª—å—Ç—Ä: {config.get('exit_scam_enabled', True)}")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —Å RSI
        print_section("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å –±–∏—Ä–∂–∏...")
        response = requests.get(f"{API_URL}/bots/coins-with-rsi", timeout=30)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–µ—Ç: {response.status_code}")
            return
        
        response_data = response.json()
        coins_dict = response_data.get('coins', {})
        coins = list(coins_dict.values())
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(coins)} –º–æ–Ω–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ is_mature –≤ –¥–∞–Ω–Ω—ã—Ö
        sample_coins = list(coins_dict.keys())[:5]
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 5 –º–æ–Ω–µ—Ç):")
        for sym in sample_coins:
            coin = coins_dict[sym]
            print(f"   {sym}: is_mature = {coin.get('is_mature', '–ù–ï–¢ –ü–û–õ–Ø')}")
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        print_section("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã...")
        
        stats = {
            'total': len(coins),
            'has_rsi': 0,
            'in_long_zone': 0,
            'in_short_zone': 0,
            'has_signal': 0,
            'enter_long': 0,
            'enter_short': 0,
            'wait': 0,
            'has_position': 0,
            'has_bot': 0,
            'is_mature': 0,
            'blocked_reasons': defaultdict(int)
        }
        
        ready_coins = {
            'LONG': [],
            'SHORT': []
        }
        
        blocked_details = []  # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        for coin in coins:
            symbol = coin.get('symbol', 'UNKNOWN')
            rsi = coin.get('rsi6h')
            signal = coin.get('signal', 'WAIT')
            effective_signal = coin.get('effective_signal', 'WAIT')
            blocked_by = coin.get('blocked_by', '')
            has_bot = coin.get('has_bot', False)
            has_position = coin.get('has_position', False)
            is_mature = coin.get('is_mature', False)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if rsi is not None:
                stats['has_rsi'] += 1
                
                if rsi <= config.get('rsi_long_threshold', 29):
                    stats['in_long_zone'] += 1
                elif rsi >= config.get('rsi_short_threshold', 71):
                    stats['in_short_zone'] += 1
            
            if signal != 'WAIT':
                stats['has_signal'] += 1
            
            if effective_signal == 'ENTER_LONG':
                stats['enter_long'] += 1
            elif effective_signal == 'ENTER_SHORT':
                stats['enter_short'] += 1
            elif effective_signal == 'WAIT':
                stats['wait'] += 1
            
            if has_bot:
                stats['has_bot'] += 1
            
            if has_position:
                stats['has_position'] += 1
            
            if is_mature:
                stats['is_mature'] += 1
            
            # –ü—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if blocked_by:
                for reason in blocked_by.split(','):
                    reason = reason.strip()
                    if reason:
                        stats['blocked_reasons'][reason] += 1
            
            # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ –≤ –∑–æ–Ω–µ RSI –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É
            if (rsi is not None and 
                (rsi <= config.get('rsi_long_threshold', 29) or rsi >= config.get('rsi_short_threshold', 71)) and
                effective_signal == 'WAIT'):
                if not blocked_by:
                    stats['blocked_reasons']['unknown'] += 1
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    blocked_details.append({
                        'symbol': symbol,
                        'rsi': rsi,
                        'signal': signal,
                        'effective_signal': effective_signal,
                        'blocked_by': blocked_by,
                        'is_mature': is_mature,
                        'has_bot': has_bot,
                        'has_position': has_position
                    })
            
            # –ì–æ—Ç–æ–≤—ã–µ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ
            if effective_signal in ['ENTER_LONG', 'ENTER_SHORT'] and not has_bot and not has_position:
                direction = 'LONG' if effective_signal == 'ENTER_LONG' else 'SHORT'
                ready_coins[direction].append({
                    'symbol': symbol,
                    'rsi': rsi,
                    'signal': signal,
                    'effective_signal': effective_signal,
                    'blocked_by': blocked_by,
                    'is_mature': is_mature
                })
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print_section("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
        
        print(f"\nüéØ –í–æ—Ä–æ–Ω–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:")
        print(f"   1Ô∏è‚É£  –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç:                    {stats['total']}")
        print(f"   2Ô∏è‚É£  ‚úÖ –ò–º–µ—é—Ç RSI –¥–∞–Ω–Ω—ã–µ:             {stats['has_rsi']} ({stats['has_rsi']/stats['total']*100:.1f}%)")
        print(f"   3Ô∏è‚É£  üìà –í –∑–æ–Ω–µ LONG (RSI ‚â§{config.get('rsi_long_threshold', 29)}):   {stats['in_long_zone']} ({stats['in_long_zone']/stats['total']*100:.1f}%)")
        print(f"   4Ô∏è‚É£  üìâ –í –∑–æ–Ω–µ SHORT (RSI ‚â•{config.get('rsi_short_threshold', 71)}): {stats['in_short_zone']} ({stats['in_short_zone']/stats['total']*100:.1f}%)")
        print(f"   5Ô∏è‚É£  üéØ –ò–º–µ—é—Ç —Å–∏–≥–Ω–∞–ª:                 {stats['has_signal']} ({stats['has_signal']/stats['total']*100:.1f}%)")
        print(f"   6Ô∏è‚É£  üíé –ó—Ä–µ–ª—ã–µ –º–æ–Ω–µ—Ç—ã:                {stats['is_mature']} ({stats['is_mature']/stats['total']*100:.1f}%)")
        print(f"   7Ô∏è‚É£  ü§ñ –£–∂–µ –µ—Å—Ç—å –±–æ—Ç:                 {stats['has_bot']} ({stats['has_bot']/stats['total']*100:.1f}%)")
        print(f"   8Ô∏è‚É£  ‚úã –†—É—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:               {stats['has_position']} ({stats['has_position']/stats['total']*100:.1f}%)")
        print(f"   9Ô∏è‚É£  üü¢ ENTER_LONG:                   {stats['enter_long']} ({stats['enter_long']/stats['total']*100:.1f}%)")
        print(f"   üîü  üî¥ ENTER_SHORT:                  {stats['enter_short']} ({stats['enter_short']/stats['total']*100:.1f}%)")
        print(f"   ‚è∏Ô∏è   ‚è∏Ô∏è  WAIT:                         {stats['wait']} ({stats['wait']/stats['total']*100:.1f}%)")
        
        if stats['blocked_reasons']:
            print(f"\nüö´ –ü—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
            for reason, count in sorted(stats['blocked_reasons'].items(), key=lambda x: x[1], reverse=True):
                percentage = count / stats['total'] * 100
                print(f"   ‚Ä¢ {reason:20s}: {count:3d} ({percentage:5.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
        if blocked_details:
            print(f"\nüîç –î–µ—Ç–∞–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç (–ø–µ—Ä–≤—ã–µ 10):")
            for detail in blocked_details[:10]:
                mature_icon = "üíé" if detail['is_mature'] else "‚ùå"
                blocked_text = f"Blocked: {detail['blocked_by']}" if detail['blocked_by'] else "No blocked_by field"
                print(f"   {mature_icon} {detail['symbol']:12s} | RSI: {detail['rsi']:5.1f} | Signal: {detail['signal']:12s} | {blocked_text}")
        
        # –ú–æ–Ω–µ—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ
        print_section("üéØ –ú–û–ù–ï–¢–´ –ì–û–¢–û–í–´–ï –ö –¢–û–†–ì–û–í–õ–ï")
        
        total_ready = len(ready_coins['LONG']) + len(ready_coins['SHORT'])
        
        if ready_coins['LONG']:
            print(f"\nüìà LONG –ø–æ–∑–∏—Ü–∏–∏ ({len(ready_coins['LONG'])}):")
            for coin in ready_coins['LONG'][:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                mature_mark = "üíé" if coin['is_mature'] else "  "
                print(f"   {mature_mark} {coin['symbol']:12s} | RSI: {coin['rsi']:5.1f}")
            if len(ready_coins['LONG']) > 15:
                print(f"   ... –∏ –µ—â–µ {len(ready_coins['LONG']) - 15} –º–æ–Ω–µ—Ç")
        else:
            print("\nüìà LONG –ø–æ–∑–∏—Ü–∏–∏: –ù–µ—Ç –º–æ–Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—Ö–æ–¥—É")
        
        if ready_coins['SHORT']:
            print(f"\nüìâ SHORT –ø–æ–∑–∏—Ü–∏–∏ ({len(ready_coins['SHORT'])}):")
            for coin in ready_coins['SHORT'][:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                mature_mark = "üíé" if coin['is_mature'] else "  "
                print(f"   {mature_mark} {coin['symbol']:12s} | RSI: {coin['rsi']:5.1f}")
            if len(ready_coins['SHORT']) > 15:
                print(f"   ... –∏ –µ—â–µ {len(ready_coins['SHORT']) - 15} –º–æ–Ω–µ—Ç")
        else:
            print("\nüìâ SHORT –ø–æ–∑–∏—Ü–∏–∏: –ù–µ—Ç –º–æ–Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—Ö–æ–¥—É")
        
        # –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print_section("üí° –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        
        if total_ready == 0:
            print("\n‚ö†Ô∏è  –ù–ï–¢ –ú–û–ù–ï–¢ –ì–û–¢–û–í–´–• –ö –¢–û–†–ì–û–í–õ–ï!")
            print("\nüìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            
            if stats['blocked_reasons']:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º—ã–π —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä
                bottleneck = max(stats['blocked_reasons'].items(), key=lambda x: x[1])
                print(f"   ‚Ä¢ –°–∞–º—ã–π —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä: {bottleneck[0]} (–±–ª–æ–∫–∏—Ä—É–µ—Ç {bottleneck[1]} –º–æ–Ω–µ—Ç)")
                
                if 'maturity' in bottleneck[0].lower():
                    print(f"\n   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û—Ç–∫–ª—é—á–∏—Ç–µ –∏–ª–∏ —Å–º—è–≥—á–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∑—Ä–µ–ª–æ—Å—Ç–∏")
                    print(f"      –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
                    print(f"      - –ú–∏–Ω–∏–º—É–º —Å–≤–µ—á–µ–π: {config.get('min_candles_for_maturity', 400)}")
                    print(f"      - –ú–∏–Ω RSI low: {config.get('min_rsi_low', 35)}")
                    print(f"      - –ú–∞–∫—Å RSI high: {config.get('max_rsi_high', 65)}")
                
                elif 'rsi' in bottleneck[0].lower():
                    print(f"\n   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—à–∏—Ä—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω RSI –¥–ª—è –≤—Ö–æ–¥–∞")
                    print(f"      –¢–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–∏:")
                    print(f"      - LONG: RSI ‚â§ {config.get('rsi_long_threshold', 29)}")
                    print(f"      - SHORT: RSI ‚â• {config.get('rsi_short_threshold', 71)}")
                    print(f"      –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: LONG ‚â§35, SHORT ‚â•65")
                
                elif 'trend' in bottleneck[0].lower():
                    print(f"\n   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û—Ç–∫–ª—é—á–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ç—Ä–µ–Ω–¥–æ–≤")
                    print(f"      –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
                    print(f"      - –ò–∑–±–µ–≥–∞—Ç—å DOWN —Ç—Ä–µ–Ω–¥ –¥–ª—è LONG: {config.get('avoid_down_trend', True)}")
                    print(f"      - –ò–∑–±–µ–≥–∞—Ç—å UP —Ç—Ä–µ–Ω–¥ –¥–ª—è SHORT: {config.get('avoid_up_trend', True)}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if stats['in_long_zone'] == 0 and stats['in_short_zone'] == 0:
                print(f"\n   ‚ö†Ô∏è  –ù–ò –û–î–ù–ê –º–æ–Ω–µ—Ç–∞ –Ω–µ –≤ –∑–æ–Ω–µ RSI –¥–ª—è –≤—Ö–æ–¥–∞!")
                print(f"      –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ä—ã–Ω–æ–∫ —Å–µ–π—á–∞—Å –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ")
                print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—à–∏—Ä—å—Ç–µ –ø–æ—Ä–æ–≥–∏ RSI –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤")
        
        elif total_ready < 5:
            print(f"\n‚ö†Ô∏è  –ú–∞–ª–æ –º–æ–Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ ({total_ready})")
            print(f"\n   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–º—è–≥—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            print(f"      - –†–∞—Å—à–∏—Ä—å—Ç–µ –ø–æ—Ä–æ–≥–∏ RSI")
            print(f"      - –û—Ç–∫–ª—é—á–∏—Ç–µ Enhanced RSI")
            print(f"      - –°–º—è–≥—á–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑—Ä–µ–ª–æ—Å—Ç–∏")
        
        else:
            print(f"\n‚úÖ –û—Ç–ª–∏—á–Ω–æ! {total_ready} –º–æ–Ω–µ—Ç –≥–æ—Ç–æ–≤—ã –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")
            print(f"   ({len(ready_coins['LONG'])} LONG + {len(ready_coins['SHORT'])} SHORT)")
            print(f"\n   –ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫–∏")
            
            if config.get('max_concurrent', 5) < total_ready:
                print(f"\n   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å. {config.get('max_concurrent', 5)} –±–æ—Ç–æ–≤")
                print(f"      –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ {total_ready} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç")
        
        print_header("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        
    except requests.exceptions.ConnectionError:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5001")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    from datetime import datetime
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    main()

