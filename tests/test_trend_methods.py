#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
"""

import sys
sys.path.append('.')

from bots_modules.init_functions import ensure_exchange_initialized
from bots_modules.filters import get_coin_rsi_data
from bot_engine.optimal_ema_manager import get_optimal_ema_periods
from bots_modules.calculations import calculate_ema
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def analyze_trend_current(candles, ema_short_period, ema_long_period):
    """–¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ (—Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è)"""
    closes = [c['close'] for c in candles]
    
    ema_short = calculate_ema(closes, ema_short_period)
    ema_long = calculate_ema(closes, ema_long_period)
    
    if ema_short is None or ema_long is None:
        return 'NEUTRAL'
    
    current_close = closes[-1]
    
    # –ù–∞–∫–ª–æ–Ω EMA_long
    if len(closes) >= ema_long_period + 1:
        prev_ema_long = calculate_ema(closes[:-1], ema_long_period)
        ema_long_slope = ema_long - prev_ema_long if prev_ema_long else 0
    else:
        ema_long_slope = 0
    
    # 3 —Å–≤–µ—á–∏ –ø–æ–¥—Ä—è–¥
    recent_closes = closes[-3:]
    all_above_ema_long = all(close > ema_long for close in recent_closes)
    all_below_ema_long = all(close < ema_long for close in recent_closes)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ (–≤—Å–µ 4 —É—Å–ª–æ–≤–∏—è)
    if (current_close > ema_long and 
        ema_short > ema_long and 
        ema_long_slope > 0 and 
        all_above_ema_long):
        return 'UP'
    
    elif (current_close < ema_long and 
          ema_short < ema_long and 
          ema_long_slope < 0 and 
          all_below_ema_long):
        return 'DOWN'
    
    return 'NEUTRAL'


def analyze_trend_improved(candles, ema_short_period, ema_long_period):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è - 2 –∏–∑ 3 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)"""
    closes = [c['close'] for c in candles]
    
    ema_short = calculate_ema(closes, ema_short_period)
    ema_long = calculate_ema(closes, ema_long_period)
    
    if ema_short is None or ema_long is None:
        return 'NEUTRAL'
    
    current_close = closes[-1]
    
    # –ù–∞–∫–ª–æ–Ω EMA_long (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    if len(closes) >= ema_long_period + 1:
        prev_ema_long = calculate_ema(closes[:-1], ema_long_period)
        ema_long_slope = ema_long - prev_ema_long if prev_ema_long else 0
    else:
        ema_long_slope = 0
    
    # –ú—è–≥–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–≤–µ—á–∞–º–∏ (2 –∏–∑ 3)
    recent_closes = closes[-3:]
    closes_above = sum(1 for c in recent_closes if c > ema_long)
    closes_below = sum(1 for c in recent_closes if c < ema_long)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª: –∫—Ä–µ—Å—Ç EMA
    ema_cross_up = ema_short > ema_long
    ema_cross_down = ema_short < ema_long
    
    # UP: –µ—Å–ª–∏ –∫—Ä–µ—Å—Ç –≤–≤–µ—Ä—Ö + –º–∏–Ω–∏–º—É–º 2 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if ema_cross_up:
        confirmations = 0
        if current_close > ema_long: confirmations += 1
        if ema_long_slope > 0: confirmations += 1
        if closes_above >= 2: confirmations += 1
        
        if confirmations >= 2:
            return 'UP'
    
    # DOWN: –µ—Å–ª–∏ –∫—Ä–µ—Å—Ç –≤–Ω–∏–∑ + –º–∏–Ω–∏–º—É–º 2 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    elif ema_cross_down:
        confirmations = 0
        if current_close < ema_long: confirmations += 1
        if ema_long_slope < 0: confirmations += 1
        if closes_below >= 2: confirmations += 1
        
        if confirmations >= 2:
            return 'DOWN'
    
    return 'NEUTRAL'


def analyze_trend_score_based(candles, ema_short_period, ema_long_period):
    """Score-based –ª–æ–≥–∏–∫–∞ (–≥–∏–±–∫–∞—è –æ—Ü–µ–Ω–∫–∞)"""
    closes = [c['close'] for c in candles]
    
    ema_short = calculate_ema(closes, ema_short_period)
    ema_long = calculate_ema(closes, ema_long_period)
    
    if ema_short is None or ema_long is None:
        return 'NEUTRAL'
    
    current_close = closes[-1]
    
    # –ù–∞–∫–ª–æ–Ω EMA_long
    if len(closes) >= ema_long_period + 1:
        prev_ema_long = calculate_ema(closes[:-1], ema_long_period)
        ema_long_slope = ema_long - prev_ema_long if prev_ema_long else 0
    else:
        ema_long_slope = 0
    
    recent_closes = closes[-3:]
    all_above_ema_long = all(close > ema_long for close in recent_closes)
    all_below_ema_long = all(close < ema_long for close in recent_closes)
    
    # –°—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã
    score = 0
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π (+2 –±–∞–ª–ª–∞)
    if ema_short > ema_long:
        score += 2
    elif ema_short < ema_long:
        score -= 2
    
    # –¶–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EMA_long (+1 –±–∞–ª–ª)
    if current_close > ema_long:
        score += 1
    elif current_close < ema_long:
        score -= 1
    
    # –ù–∞–∫–ª–æ–Ω –¥–ª–∏–Ω–Ω–æ–π EMA (+1 –±–∞–ª–ª)
    if ema_long_slope > 0:
        score += 1
    elif ema_long_slope < 0:
        score -= 1
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ (+1 –±–∞–ª–ª)
    if all_above_ema_long:
        score += 1
    elif all_below_ema_long:
        score -= 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
    if score >= 3:
        return 'UP'
    elif score <= -3:
        return 'DOWN'
    else:
        return 'NEUTRAL'


def test_trend_methods():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
    print("\n" + "="*80)
    print("üß™ –¢–ï–°–¢ –ú–ï–¢–û–î–û–í –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–†–ï–ù–î–ê")
    print("="*80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂—É
    print("\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏...")
    ensure_exchange_initialized()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã (—Å–º–µ—Å—å —Å —Ä–∞–∑–Ω—ã–º–∏ RSI)
    test_symbols = [
        'ATH',   # RSI: 25.6, trend: DOWN (—Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞)
        'CARV',  # RSI: 23.5, trend: DOWN
        'FLR',   # RSI: 24.0, trend: DOWN
        'APT',   # RSI: 28.2, trend: DOWN
        'BEAM',  # RSI: 28.0, trend: DOWN
        'BTC',   # RSI: 31.8, trend: DOWN
        'ETH',   # RSI: 40.9
        'BNB',   # RSI: 40.9
    ]
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_symbols)} –º–æ–Ω–µ—Ç...")
    print()
    
    results = {
        'current': {'UP': 0, 'DOWN': 0, 'NEUTRAL': 0},
        'improved': {'UP': 0, 'DOWN': 0, 'NEUTRAL': 0},
        'score_based': {'UP': 0, 'DOWN': 0, 'NEUTRAL': 0}
    }
    
    from bots_modules.imports_and_globals import get_exchange
    exchange = get_exchange()
    
    for symbol in test_symbols:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        coin_data = get_coin_rsi_data(symbol)
        if not coin_data:
            continue
        
        rsi = coin_data.get('rsi6h', 0)
        current_trend = coin_data.get('trend6h', 'NEUTRAL')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
        chart_response = exchange.get_chart_data(symbol, '6h', '60d')
        if not chart_response or not chart_response.get('success'):
            continue
        
        candles = chart_response['data']['candles']
        if len(candles) < 250:
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ EMA
        ema_periods = get_optimal_ema_periods(symbol)
        ema_short = ema_periods['ema_short']
        ema_long = ema_periods['ema_long']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        trend_current = analyze_trend_current(candles, ema_short, ema_long)
        trend_improved = analyze_trend_improved(candles, ema_short, ema_long)
        trend_score = analyze_trend_score_based(candles, ema_short, ema_long)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        results['current'][trend_current] += 1
        results['improved'][trend_improved] += 1
        results['score_based'][trend_score] += 1
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        in_long_zone = 'üìà' if rsi <= 29 else '  '
        in_short_zone = 'üìâ' if rsi >= 71 else '  '
        mature = 'üíé' if coin_data.get('is_mature') else '  '
        
        print(f"{in_long_zone}{in_short_zone}{mature} {symbol:12} | RSI: {rsi:5.1f} | EMA: ({ema_short:3d},{ema_long:3d})")
        print(f"     –¢–µ–∫—É—â–∞—è:      {trend_current:7} (–æ—Ä–∏–≥–∏–Ω–∞–ª)")
        print(f"     –£–ª—É—á—à–µ–Ω–Ω–∞—è:   {trend_improved:7}")
        print(f"     Score-based:  {trend_score:7}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
        if trend_current != trend_improved or trend_current != trend_score:
            print(f"     üí° –†–∞–∑–ª–∏—á–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
            if rsi <= 29 and trend_current == 'DOWN' and trend_improved != 'DOWN':
                print(f"        ‚ö†Ô∏è  –¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π LONG!")
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*80)
    print()
    
    total = sum(results['current'].values())
    
    for method_name, method_results in results.items():
        print(f"üìå {method_name.upper()}:")
        for trend_type, count in method_results.items():
            percentage = (count / total * 100) if total > 0 else 0
            print(f"   {trend_type:7}: {count:2} ({percentage:5.1f}%)")
        neutral_ratio = (method_results['NEUTRAL'] / total * 100) if total > 0 else 0
        print(f"   ‚Üí NEUTRAL ratio: {neutral_ratio:.1f}%")
        print()
    
    # –ê–Ω–∞–ª–∏–∑
    print("="*80)
    print("üí° –ê–ù–ê–õ–ò–ó")
    print("="*80)
    print()
    
    neutral_current = results['current']['NEUTRAL'] / total * 100
    neutral_improved = results['improved']['NEUTRAL'] / total * 100
    neutral_score = results['score_based']['NEUTRAL'] / total * 100
    
    print(f"–¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–∞–µ—Ç {neutral_current:.1f}% NEUTRAL")
    print(f"–£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–∞–µ—Ç {neutral_improved:.1f}% NEUTRAL")
    print(f"Score-based –ª–æ–≥–∏–∫–∞ –¥–∞–µ—Ç {neutral_score:.1f}% NEUTRAL")
    print()
    
    if neutral_current > 50:
        print("‚ö†Ô∏è  –¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞ (>50% NEUTRAL)")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –∏–ª–∏ score-based –ª–æ–≥–∏–∫—É")
    
    print()
    print("="*80)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("="*80)


if __name__ == '__main__':
    test_trend_methods()

