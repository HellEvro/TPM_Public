#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤
"""

import requests
import time
import json
import sys
import io
from datetime import datetime

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

BASE_URL = "http://localhost:5001"
COLORS = {
    'green': '\033[92m',
    'red': '\033[91m',
    'yellow': '\033[93m',
    'blue': '\033[94m',
    'end': '\033[0m'
}

def log_test(name, status, message=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
    color = COLORS['green'] if status else COLORS['red']
    symbol = "‚úÖ" if status else "‚ùå"
    print(f"{color}{symbol} Test {name}: {'PASSED' if status else 'FAILED'}{COLORS['end']}")
    if message:
        print(f"   {message}")

def test_1_api_status():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
    try:
        r = requests.get(f"{BASE_URL}/api/status", timeout=5)
        assert r.status_code == 200, "Status code not 200"
        
        data = r.json()
        assert data.get('status') == 'online', "Service not online"
        assert data.get('success') == True, "Success flag not True"
        
        log_test("1", True, f"Status: {data.get('status')}, Bots: {data.get('bots_count')}")
        return True
    except Exception as e:
        log_test("1", False, str(e))
        return False

def test_2_auto_bot_disabled():
    """–¢–µ—Å—Ç 2: –ê–≤—Ç–æ–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        r = requests.get(f"{BASE_URL}/api/bots/auto-bot", timeout=5)
        assert r.status_code == 200
        
        data = r.json()
        assert data.get('success') == True
        assert data['data'].get('enabled') == False, "Auto Bot should be disabled on startup"
        
        log_test("2", True, "Auto Bot –æ—Ç–∫–ª—é—á–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        return True
    except Exception as e:
        log_test("2", False, str(e))
        return False

def test_3_bots_list():
    """–¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤"""
    try:
        r = requests.get(f"{BASE_URL}/api/bots/list", timeout=5)
        assert r.status_code == 200
        
        data = r.json()
        assert 'data' in data
        assert isinstance(data['data'], list)
        
        log_test("3", True, f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(data['data'])}")
        return True
    except Exception as e:
        log_test("3", False, str(e))
        return False

def test_4_coins_with_rsi():
    """–¢–µ—Å—Ç 4: –ú–æ–Ω–µ—Ç—ã —Å RSI –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        r = requests.get(f"{BASE_URL}/api/bots/coins-with-rsi", timeout=10)
        assert r.status_code == 200
        
        data = r.json()
        assert 'coins' in data
        assert 'count' in data
        
        log_test("4", True, f"–ú–æ–Ω–µ—Ç —Å RSI: {data['count']}")
        return True
    except Exception as e:
        log_test("4", False, str(e))
        return False

def test_5_system_initialized():
    """–¢–µ—Å—Ç 5: –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"""
    try:
        r = requests.get(f"{BASE_URL}/api/status", timeout=5)
        data = r.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç
        assert data.get('status') == 'online'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å timestamp (—Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞)
        assert 'timestamp' in data
        
        log_test("5", True, "–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        log_test("5", False, str(e))
        return False

def test_6_maturity_check_enabled():
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω–∞"""
    try:
        r = requests.get(f"{BASE_URL}/api/bots/auto-bot", timeout=5)
        data = r.json()
        
        config = data['data']
        enable_maturity = config.get('enable_maturity_check', False)
        
        assert enable_maturity == True, "Maturity check should be enabled"
        
        log_test("6", True, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω–∞")
        return True
    except Exception as e:
        log_test("6", False, str(e))
        return False

def test_7_sync_positions():
    """–¢–µ—Å—Ç 7: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π"""
    try:
        r = requests.post(f"{BASE_URL}/api/bots/sync-positions", timeout=10)
        assert r.status_code == 200
        
        data = r.json()
        assert data.get('success') == True
        
        log_test("7", True, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        log_test("7", False, str(e))
        return False

def test_8_optimal_ema_status():
    """–¢–µ—Å—Ç 8: –°—Ç–∞—Ç—É—Å Optimal EMA Worker"""
    try:
        r = requests.get(f"{BASE_URL}/api/bots/optimal-ema-worker/status", timeout=5)
        assert r.status_code == 200
        
        data = r.json()
        # –í–æ—Ä–∫–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ API –æ—Ç–≤–µ—á–∞–µ—Ç
        
        log_test("8", True, f"Optimal EMA Worker: {data.get('status', 'unknown')}")
        return True
    except Exception as e:
        log_test("8", False, str(e))
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print(f"\n{COLORS['blue']}{'='*60}{COLORS['end']}")
    print(f"{COLORS['blue']}üß™ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´{COLORS['end']}")
    print(f"{COLORS['blue']}{'='*60}{COLORS['end']}\n")
    
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê URL: {BASE_URL}\n")
    
    tests = [
        ("API Status", test_1_api_status),
        ("Auto Bot Disabled", test_2_auto_bot_disabled),
        ("Bots List", test_3_bots_list),
        ("Coins with RSI", test_4_coins_with_rsi),
        ("System Initialized", test_5_system_initialized),
        ("Maturity Check Enabled", test_6_maturity_check_enabled),
        ("Sync Positions", test_7_sync_positions),
        ("Optimal EMA Status", test_8_optimal_ema_status),
    ]
    
    results = []
    
    for name, test_func in tests:
        try:
            result = test_func()
            results.append(result)
        except Exception as e:
            print(f"{COLORS['red']}‚ùå Exception in {name}: {e}{COLORS['end']}")
            results.append(False)
        
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{COLORS['blue']}{'='*60}{COLORS['end']}")
    passed = sum(results)
    total = len(results)
    percentage = (passed / total * 100) if total > 0 else 0
    
    if passed == total:
        print(f"{COLORS['green']}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! {passed}/{total} (100%){COLORS['end']}")
        return 0
    else:
        print(f"{COLORS['yellow']}‚ö†Ô∏è –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({percentage:.1f}%){COLORS['end']}")
        print(f"{COLORS['red']}‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}{COLORS['end']}")
        return 1

if __name__ == "__main__":
    try:
        exit_code = run_all_tests()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print(f"\n{COLORS['yellow']}‚è∏Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{COLORS['end']}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{COLORS['red']}üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{COLORS['end']}")
        sys.exit(1)

