#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA –ø–µ—Ä–∏–æ–¥–æ–≤
–ó–∞–ø—É—Å–∫–∞–µ—Ç optimal_ema.py —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --all –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
"""

import os
import sys
import time
import threading
import subprocess
import logging
from datetime import datetime
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class OptimalEMAWorker:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA"""
    
    def __init__(self, update_interval: int = 3600):  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.update_interval = update_interval
        self.is_running = False
        self.worker_thread = None
        self.last_update = None
        self.process = None
        self.optimal_ema_script = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'scripts', 'sync', 'optimal_ema.py')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        if not os.path.exists(self.optimal_ema_script):
            logger.error(f"–°–∫—Ä–∏–ø—Ç optimal_ema.py –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.optimal_ema_script}")
            raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç optimal_ema.py –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.optimal_ema_script}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            logger.warning("[OPTIMAL_EMA_WORKER] –í–æ—Ä–∫–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self.worker_thread = threading.Thread(target=self._worker_loop, daemon=True)
        self.worker_thread.start()
        logger.info(f"[OPTIMAL_EMA_WORKER] üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.update_interval} —Å–µ–∫)")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä"""
        if not self.is_running:
            return
        
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if self.process and self.process.poll() is None:
            try:
                self.process.terminate()
                self.process.wait(timeout=10)
                logger.info("[OPTIMAL_EMA_WORKER] –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                logger.warning("[OPTIMAL_EMA_WORKER] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")
                self.process.kill()
        
        if self.worker_thread and self.worker_thread.is_alive():
            self.worker_thread.join(timeout=5)
        
        logger.info("[OPTIMAL_EMA_WORKER] ‚èπÔ∏è –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _worker_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞"""
        logger.info("[OPTIMAL_EMA_WORKER] üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA")
        
        while self.is_running:
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self._run_optimal_ema_update()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                for _ in range(self.update_interval):
                    if not self.is_running:
                        break
                    time.sleep(1)
                    
            except Exception as e:
                logger.error(f"[OPTIMAL_EMA_WORKER] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                for _ in range(300):  # 5 –º–∏–Ω—É—Ç
                    if not self.is_running:
                        break
                    time.sleep(1)
    
    def _run_optimal_ema_update(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA"""
        try:
            logger.info("[OPTIMAL_EMA_WORKER] üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA...")
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ optimal_ema.py —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --force (–ø–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤)
            cmd = [sys.executable, self.optimal_ema_script, '--force']
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            self.process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                encoding='utf-8',
                cwd=os.path.dirname(os.path.dirname(__file__))
            )
            
            logger.info(f"[OPTIMAL_EMA_WORKER] üìä –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω: PID {self.process.pid}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            stdout, stderr = self.process.communicate()
            
            if self.process.returncode == 0:
                self.last_update = datetime.now()
                logger.info("[OPTIMAL_EMA_WORKER] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                if stdout:
                    lines = stdout.strip().split('\n')
                    for line in lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        if line.strip():
                            logger.info(f"[OPTIMAL_EMA_WORKER] {line}")
            else:
                logger.error(f"[OPTIMAL_EMA_WORKER] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–¥: {self.process.returncode})")
                if stderr:
                    logger.error(f"[OPTIMAL_EMA_WORKER] STDERR: {stderr}")
                if stdout:
                    logger.error(f"[OPTIMAL_EMA_WORKER] STDOUT: {stdout}")
            
        except Exception as e:
            logger.error(f"[OPTIMAL_EMA_WORKER] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        finally:
            self.process = None
    
    def force_update(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if self.process and self.process.poll() is None:
            logger.warning("[OPTIMAL_EMA_WORKER] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return False
        
        logger.info("[OPTIMAL_EMA_WORKER] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        self._run_optimal_ema_update()
        return True
    
    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞"""
        return {
            'is_running': self.is_running,
            'last_update': self.last_update.isoformat() if self.last_update else None,
            'update_interval': self.update_interval,
            'is_updating': self.process is not None and self.process.poll() is None,
            'script_path': self.optimal_ema_script
        }
    
    def set_update_interval(self, interval: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if interval < 300:  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç
            logger.warning("[OPTIMAL_EMA_WORKER] –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç")
            return False
        
        self.update_interval = interval
        logger.info(f"[OPTIMAL_EMA_WORKER] –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥")
        return True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–æ—Ä–∫–µ—Ä–∞
optimal_ema_worker = None

def start_optimal_ema_worker(update_interval: int = 3600):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA"""
    global optimal_ema_worker
    
    if optimal_ema_worker is not None:
        logger.warning("[OPTIMAL_EMA_WORKER] –í–æ—Ä–∫–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return optimal_ema_worker
    
    try:
        optimal_ema_worker = OptimalEMAWorker(update_interval)
        optimal_ema_worker.start()
        return optimal_ema_worker
    except Exception as e:
        logger.error(f"[OPTIMAL_EMA_WORKER] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        return None

def stop_optimal_ema_worker():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä"""
    global optimal_ema_worker
    
    if optimal_ema_worker is not None:
        optimal_ema_worker.stop()
        optimal_ema_worker = None

def get_optimal_ema_worker():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä"""
    return optimal_ema_worker
