"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import logging

logger = logging.getLogger('SignalProcessor')


def get_effective_signal(coin, config):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –º–æ–Ω–µ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    
    Args:
        coin: –î–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–±–æ—Ç–∞
    
    Returns:
        str: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª (ENTER_LONG, ENTER_SHORT, WAIT)
    """
    symbol = coin.get('symbol', 'UNKNOWN')
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    avoid_down_trend = config.get('avoid_down_trend', True)
    avoid_up_trend = config.get('avoid_up_trend', True)
    rsi_long_threshold = config.get('rsi_long_threshold', 29)
    rsi_short_threshold = config.get('rsi_short_threshold', 71)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
    rsi = coin.get('rsi6h', 50)
    trend = coin.get('trend', coin.get('trend6h', 'NEUTRAL'))
    
    # –ï—Å–ª–∏ –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª WAIT (–∏–∑-–∑–∞ –Ω–µ–∑—Ä–µ–ª–æ—Å—Ç–∏) - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É
    base_signal = coin.get('signal', 'WAIT')
    if base_signal == 'WAIT':
        return 'WAIT'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Enhanced RSI —Å–∏–≥–Ω–∞–ª
    enhanced_rsi = coin.get('enhanced_rsi', {})
    if enhanced_rsi.get('enabled') and enhanced_rsi.get('enhanced_signal'):
        signal = enhanced_rsi.get('enhanced_signal')
    else:
        signal = base_signal
    
    if signal == 'WAIT':
        return signal
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
    if signal == 'ENTER_SHORT' and avoid_up_trend and rsi >= rsi_short_threshold and trend == 'UP':
        logger.debug(f"[SIGNAL] {symbol}: ‚ùå SHORT –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (RSI={rsi:.1f} >= {rsi_short_threshold} + UP —Ç—Ä–µ–Ω–¥)")
        return 'WAIT'
    
    if signal == 'ENTER_LONG' and avoid_down_trend and rsi <= rsi_long_threshold and trend == 'DOWN':
        logger.debug(f"[SIGNAL] {symbol}: ‚ùå LONG –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (RSI={rsi:.1f} <= {rsi_long_threshold} + DOWN —Ç—Ä–µ–Ω–¥)")
        return 'WAIT'
    
    logger.debug(f"[SIGNAL] {symbol}: ‚úÖ {signal} —Ä–∞–∑—Ä–µ—à–µ–Ω (RSI={rsi:.1f}, Trend={trend})")
    return signal


def check_autobot_filters(symbol, signal, coin_data, config, maturity_check_func, exit_scam_check_func, position_check_func):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–≤—Ç–æ–±–æ—Ç–∞
    
    Args:
        symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
        signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        coin_data: –î–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        maturity_check_func: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏
        exit_scam_check_func: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ExitScam
        position_check_func: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
    """
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏
        if not maturity_check_func(symbol):
            logger.debug(f"[AUTOBOT_FILTER] {symbol}: –ú–æ–Ω–µ—Ç–∞ –Ω–µ–∑—Ä–µ–ª–∞—è")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ ExitScam
        if not exit_scam_check_func(symbol, coin_data):
            logger.warning(f"[AUTOBOT_FILTER] {symbol}: ‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: ExitScam —Ñ–∏–ª—å—Ç—Ä")
            return False
        else:
            logger.info(f"[AUTOBOT_FILTER] {symbol}: ‚úÖ ExitScam —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
        trend = coin_data.get('trend6h', 'NEUTRAL')
        avoid_down_trend = config.get('avoid_down_trend', True)
        avoid_up_trend = config.get('avoid_up_trend', True)
        
        if signal == 'ENTER_LONG' and avoid_down_trend and trend == 'DOWN':
            logger.debug(f"[AUTOBOT_FILTER] {symbol}: DOWN —Ç—Ä–µ–Ω–¥ - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG")
            return False
            
        if signal == 'ENTER_SHORT' and avoid_up_trend and trend == 'UP':
            logger.debug(f"[AUTOBOT_FILTER] {symbol}: UP —Ç—Ä–µ–Ω–¥ - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT")
            return False
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        if not position_check_func(symbol, signal):
            logger.debug(f"[AUTOBOT_FILTER] {symbol}: –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ")
            return False
        
        logger.debug(f"[AUTOBOT_FILTER] {symbol}: ‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"[AUTOBOT_FILTER] {symbol}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return False


def process_auto_bot_signals(coins_rsi_data, bots_data, config, filter_check_func, create_bot_func):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∞–≤—Ç–æ–±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤
    
    Args:
        coins_rsi_data: –î–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç —Å RSI
        bots_data: –î–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Ç–æ–≤
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–±–æ—Ç–∞
        filter_check_func: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        create_bot_func: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–±–æ—Ç
        auto_bot_enabled = config['enabled']
        
        if not auto_bot_enabled:
            logger.debug("[AUTO_BOT] ‚èπÔ∏è –ê–≤—Ç–æ–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
            return
        
        max_concurrent = config['max_concurrent']
        current_active = sum(1 for bot in bots_data.values() 
                           if bot['status'] not in ['idle', 'paused'])
        
        if current_active >= max_concurrent:
            logger.debug(f"[AUTO_BOT] üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ ({current_active}/{max_concurrent})")
            return
        
        logger.info("[AUTO_BOT] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–µ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
        potential_coins = []
        for symbol, coin_data in coins_rsi_data.items():
            rsi = coin_data.get('rsi6h')
            trend = coin_data.get('trend6h', 'NEUTRAL')
            
            if rsi is None:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            rsi_long_threshold = config.get('rsi_long_threshold', 29)
            rsi_short_threshold = config.get('rsi_short_threshold', 71)
            
            signal = None
            if rsi <= rsi_long_threshold:
                signal = 'ENTER_LONG'
            elif rsi >= rsi_short_threshold:
                signal = 'ENTER_SHORT'
            
            if signal:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if filter_check_func(symbol, signal, coin_data):
                    potential_coins.append({
                        'symbol': symbol,
                        'rsi': rsi,
                        'trend': trend,
                        'signal': signal,
                        'coin_data': coin_data
                    })
        
        logger.info(f"[AUTO_BOT] üéØ –ù–∞–π–¥–µ–Ω–æ {len(potential_coins)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–æ–≤
        created_bots = 0
        for coin in potential_coins[:max_concurrent - current_active]:
            symbol = coin['symbol']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –±–æ—Ç–∞
            if symbol in bots_data:
                logger.debug(f"[AUTO_BOT] ‚ö†Ô∏è –ë–æ—Ç –¥–ª—è {symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            try:
                logger.info(f"[AUTO_BOT] üöÄ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è {symbol} ({coin['signal']}, RSI: {coin['rsi']:.1f})")
                create_bot_func(symbol)
                created_bots += 1
                
            except Exception as e:
                logger.error(f"[AUTO_BOT] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è {symbol}: {e}")
        
        if created_bots > 0:
            logger.info(f"[AUTO_BOT] ‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_bots} –Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤")
        
    except Exception as e:
        logger.error(f"[AUTO_BOT] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

