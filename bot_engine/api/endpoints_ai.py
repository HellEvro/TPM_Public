"""
API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–ò –º–æ–¥—É–ª—è–º–∏
"""

from flask import jsonify, request
import logging

logger = logging.getLogger('API.AI')

# –°–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–π AI –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
AI_CONFIG_NAMES = {
    # AI Master Switch
    'ai_enabled': 'AI –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã',
    
    # Anomaly Detection
    'anomaly_detection_enabled': '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π',
    'anomaly_block_threshold': '–ü–æ—Ä–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π',
    'anomaly_log_enabled': '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π',
    
    # LSTM Predictor
    'lstm_enabled': 'LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã',
    'lstm_min_confidence': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å LSTM',
    'lstm_weight': '–í–µ—Å LSTM –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏',
    
    # Pattern Recognition
    'pattern_enabled': '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤',
    'pattern_min_confidence': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤',
    'pattern_weight': '–í–µ—Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏',
    
    # Risk Management
    'risk_management_enabled': '–£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏',
    'risk_update_interval': '–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ (—Å–µ–∫)',
    
    # Optimal Entry Detection
    'optimal_entry_enabled': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞',
    
    # Auto Training
    'auto_train_enabled': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
    'auto_update_data': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
    'data_update_interval': '–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Å–µ–∫)',
    'auto_retrain': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ',
    'retrain_interval': '–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è (—Å–µ–∫)',
    'retrain_hour': '–í—Ä–µ–º—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è (—á–∞—Å)',
    
    # AI Logging
    'log_predictions': '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π',
    'log_anomalies': '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π',
    'log_patterns': '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤',
}

def log_ai_config_change(key, old_value, new_value):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"""
    if old_value != new_value:
        arrow = '‚Üí'
        display_name = AI_CONFIG_NAMES.get(key, key)
        logger.info(f"[AI_CONFIG] ‚úì {display_name}: {old_value} {arrow} {new_value}")
        return True
    return False


def register_ai_endpoints(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç API endpoints –¥–ª—è –ò–ò"""
    
    logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è AI endpoints...")
    
    @app.route('/api/ai/status', methods=['GET'])
    def get_ai_status():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ò–ò —Å–∏—Å—Ç–µ–º—ã"""
        try:
            from bot_engine.ai.ai_manager import get_ai_manager
            from bot_engine.ai.auto_trainer import get_auto_trainer
            from bot_engine.bot_config import AIConfig, RiskConfig
            
            ai_manager = get_ai_manager()
            auto_trainer = get_auto_trainer()
            
            return jsonify({
                'success': True,
                'ai_status': ai_manager.get_status(),
                'auto_trainer': auto_trainer.get_status(),
                'config': {
                    'enabled': AIConfig.AI_ENABLED,
                    'auto_train_enabled': AIConfig.AI_AUTO_TRAIN_ENABLED,
                    'auto_update_data': AIConfig.AI_AUTO_UPDATE_DATA,
                    'auto_retrain': AIConfig.AI_AUTO_RETRAIN,
                    'data_update_interval_hours': AIConfig.AI_DATA_UPDATE_INTERVAL / 3600,
                    'retrain_interval_days': AIConfig.AI_RETRAIN_INTERVAL / 86400
                }
            })
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ò–ò: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/ai/force-update', methods=['POST'])
    def force_ai_update():
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ"""
        try:
            from bot_engine.ai.auto_trainer import get_auto_trainer
            
            auto_trainer = get_auto_trainer()
            success = auto_trainer.force_update()
            
            return jsonify({
                'success': success,
                'message': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ' if success else '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
            })
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/ai/config', methods=['GET'])
    def get_ai_config():
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI"""
        try:
            from bot_engine.bot_config import AIConfig, RiskConfig
            from bot_engine.ai.ai_manager import get_ai_manager
            
            ai_manager = get_ai_manager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI (–ª–∏—Ü–µ–Ω–∑–∏—è)
            license_status = ai_manager.get_status()
            
            return jsonify({
                'success': True,
                'license': {
                    'valid': ai_manager.is_available(),
                    'type': license_status.get('license_type'),
                    'expires_at': license_status.get('expires_at'),
                    'features': license_status.get('features', {})
                },
                'config': {
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    'ai_enabled': AIConfig.AI_ENABLED,
                    'ai_confidence_threshold': AIConfig.AI_CONFIDENCE_THRESHOLD,
                    
                    # Anomaly Detection
                    'anomaly_detection_enabled': AIConfig.AI_ANOMALY_DETECTION_ENABLED,
                    'anomaly_block_threshold': AIConfig.AI_ANOMALY_BLOCK_THRESHOLD,
                    'anomaly_log_enabled': AIConfig.AI_LOG_ANOMALIES,
                    
                    # Risk Management
                    'risk_management_enabled': AIConfig.AI_RISK_MANAGEMENT_ENABLED,
                    'risk_update_interval': AIConfig.AI_RISK_UPDATE_INTERVAL,
                    
                    # Optimal Entry Detection
                    'optimal_entry_enabled': RiskConfig.AI_OPTIMAL_ENTRY_ENABLED,
                    
                    # LSTM Predictor
                    'lstm_enabled': AIConfig.AI_LSTM_ENABLED,
                    'lstm_min_confidence': AIConfig.AI_LSTM_MIN_CONFIDENCE,
                    'lstm_weight': AIConfig.AI_LSTM_WEIGHT,
                    
                    # Pattern Recognition
                    'pattern_enabled': AIConfig.AI_PATTERN_ENABLED,
                    'pattern_min_confidence': AIConfig.AI_PATTERN_MIN_CONFIDENCE,
                    'pattern_weight': AIConfig.AI_PATTERN_WEIGHT,
                    
                    # Auto Training
                    'auto_train_enabled': AIConfig.AI_AUTO_TRAIN_ENABLED,
                    'auto_update_data': AIConfig.AI_AUTO_UPDATE_DATA,
                    'auto_retrain': AIConfig.AI_AUTO_RETRAIN,
                    'data_update_interval': AIConfig.AI_DATA_UPDATE_INTERVAL,
                    'retrain_interval': AIConfig.AI_RETRAIN_INTERVAL,
                    'retrain_hour': AIConfig.AI_RETRAIN_HOUR,
                    'update_coins_count': AIConfig.AI_UPDATE_COINS_COUNT,
                    
                    # Logging
                    'log_predictions': AIConfig.AI_LOG_PREDICTIONS,
                    'log_anomalies': AIConfig.AI_LOG_ANOMALIES,
                    'log_patterns': AIConfig.AI_LOG_PATTERNS
                }
            })
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/ai/config', methods=['POST'])
    def save_ai_config():
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI"""
        try:
            from bot_engine.ai.ai_manager import get_ai_manager
            
            ai_manager = get_ai_manager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
            if not ai_manager.is_available():
                return jsonify({
                    'success': False,
                    'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è'
                }), 403
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            content_type = request.headers.get('Content-Type', '')
            if 'application/json' not in content_type:
                return jsonify({
                    'success': False,
                    'error': f'–¢—Ä–µ–±—É–µ—Ç—Å—è Content-Type: application/json, –ø–æ–ª—É—á–µ–Ω: {content_type}'
                }), 415
            
            try:
                data = request.get_json(force=True)
            except Exception as e:
                return jsonify({
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}'
                }), 400
            
            if not data:
                return jsonify({
                    'success': False,
                    'error': '–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ'
                }), 400
            
            logger.info(f"[AI_CONFIG] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            from bot_engine.bot_config import AIConfig, RiskConfig
            old_config = {
                'ai_enabled': AIConfig.AI_ENABLED,
                'ai_confidence_threshold': AIConfig.AI_CONFIDENCE_THRESHOLD,
                'anomaly_detection_enabled': AIConfig.AI_ANOMALY_DETECTION_ENABLED,
                'anomaly_block_threshold': AIConfig.AI_ANOMALY_BLOCK_THRESHOLD,
                'lstm_enabled': AIConfig.AI_LSTM_ENABLED,
                'lstm_min_confidence': AIConfig.AI_LSTM_MIN_CONFIDENCE,
                'lstm_weight': AIConfig.AI_LSTM_WEIGHT,
                'pattern_enabled': AIConfig.AI_PATTERN_ENABLED,
                'pattern_min_confidence': AIConfig.AI_PATTERN_MIN_CONFIDENCE,
                'pattern_weight': AIConfig.AI_PATTERN_WEIGHT,
                'risk_management_enabled': AIConfig.AI_RISK_MANAGEMENT_ENABLED,
                'risk_update_interval': AIConfig.AI_RISK_UPDATE_INTERVAL,
                'optimal_entry_enabled': RiskConfig.AI_OPTIMAL_ENTRY_ENABLED,
                'auto_train_enabled': AIConfig.AI_AUTO_TRAIN_ENABLED,
                'auto_update_data': AIConfig.AI_AUTO_UPDATE_DATA,
                'auto_retrain': AIConfig.AI_AUTO_RETRAIN,
                'data_update_interval': AIConfig.AI_DATA_UPDATE_INTERVAL,
                'retrain_interval': AIConfig.AI_RETRAIN_INTERVAL,
                'retrain_hour': AIConfig.AI_RETRAIN_HOUR,
                'log_predictions': AIConfig.AI_LOG_PREDICTIONS,
                'log_anomalies': AIConfig.AI_LOG_ANOMALIES,
                'log_patterns': AIConfig.AI_LOG_PATTERNS,
            }
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª bot_config.py
            config_path = 'bot_engine/bot_config.py'
            
            with open(config_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ AIConfig –∏ RiskConfig –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            in_ai_config = False
            in_risk_config = False
            updated_lines = []
            changes_count = 0
            
            for line in lines:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü AIConfig
                if 'class AIConfig:' in line:
                    in_ai_config = True
                    in_risk_config = False
                elif 'class RiskConfig:' in line:
                    in_ai_config = False
                    in_risk_config = True
                elif (in_ai_config or in_risk_config) and line.strip() and not line.startswith(' ') and not line.startswith('\t'):
                    in_ai_config = False
                    in_risk_config = False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ AIConfig
                if in_ai_config:
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    if 'AI_ENABLED =' in line and 'ai_enabled' in data:
                        if log_ai_config_change('ai_enabled', old_config['ai_enabled'], data['ai_enabled']):
                            changes_count += 1
                        line = f"    AI_ENABLED = {data['ai_enabled']}\n"
                    elif 'AI_CONFIDENCE_THRESHOLD =' in line and 'ai_confidence_threshold' in data:
                        if log_ai_config_change('ai_confidence_threshold', old_config['ai_confidence_threshold'], data['ai_confidence_threshold']):
                            changes_count += 1
                        line = f"    AI_CONFIDENCE_THRESHOLD = {data['ai_confidence_threshold']}\n"
                    
                    # Anomaly Detection
                    elif 'AI_ANOMALY_DETECTION_ENABLED =' in line and 'anomaly_detection_enabled' in data:
                        if log_ai_config_change('anomaly_detection_enabled', old_config['anomaly_detection_enabled'], data['anomaly_detection_enabled']):
                            changes_count += 1
                        line = f"    AI_ANOMALY_DETECTION_ENABLED = {data['anomaly_detection_enabled']}\n"
                    elif 'AI_ANOMALY_BLOCK_THRESHOLD =' in line and 'anomaly_block_threshold' in data:
                        if log_ai_config_change('anomaly_block_threshold', old_config['anomaly_block_threshold'], data['anomaly_block_threshold']):
                            changes_count += 1
                        line = f"    AI_ANOMALY_BLOCK_THRESHOLD = {data['anomaly_block_threshold']}\n"
                    
                    # Risk Management
                    elif 'AI_RISK_MANAGEMENT_ENABLED =' in line and 'risk_management_enabled' in data:
                        if log_ai_config_change('risk_management_enabled', old_config['risk_management_enabled'], data['risk_management_enabled']):
                            changes_count += 1
                        line = f"    AI_RISK_MANAGEMENT_ENABLED = {data['risk_management_enabled']}\n"
                    elif 'AI_RISK_UPDATE_INTERVAL =' in line and 'risk_update_interval' in data:
                        if log_ai_config_change('risk_update_interval', old_config['risk_update_interval'], data['risk_update_interval']):
                            changes_count += 1
                        line = f"    AI_RISK_UPDATE_INTERVAL = {data['risk_update_interval']}\n"
                    
                    # Auto Training
                    elif 'AI_AUTO_TRAIN_ENABLED =' in line and 'auto_train_enabled' in data:
                        if log_ai_config_change('auto_train_enabled', old_config['auto_train_enabled'], data['auto_train_enabled']):
                            changes_count += 1
                        line = f"    AI_AUTO_TRAIN_ENABLED = {data['auto_train_enabled']}\n"
                    elif 'AI_AUTO_UPDATE_DATA =' in line and 'auto_update_data' in data:
                        if log_ai_config_change('auto_update_data', old_config['auto_update_data'], data['auto_update_data']):
                            changes_count += 1
                        line = f"    AI_AUTO_UPDATE_DATA = {data['auto_update_data']}\n"
                    elif 'AI_AUTO_RETRAIN =' in line and 'auto_retrain' in data:
                        if log_ai_config_change('auto_retrain', old_config['auto_retrain'], data['auto_retrain']):
                            changes_count += 1
                        line = f"    AI_AUTO_RETRAIN = {data['auto_retrain']}\n"
                    elif 'AI_DATA_UPDATE_INTERVAL =' in line and 'data_update_interval' in data:
                        if log_ai_config_change('data_update_interval', old_config['data_update_interval'], data['data_update_interval']):
                            changes_count += 1
                        line = f"    AI_DATA_UPDATE_INTERVAL = {data['data_update_interval']}\n"
                    elif 'AI_RETRAIN_INTERVAL =' in line and 'retrain_interval' in data:
                        if log_ai_config_change('retrain_interval', old_config['retrain_interval'], data['retrain_interval']):
                            changes_count += 1
                        line = f"    AI_RETRAIN_INTERVAL = {data['retrain_interval']}\n"
                    elif 'AI_RETRAIN_HOUR =' in line and 'retrain_hour' in data:
                        if log_ai_config_change('retrain_hour', old_config['retrain_hour'], data['retrain_hour']):
                            changes_count += 1
                        line = f"    AI_RETRAIN_HOUR = {data['retrain_hour']}\n"
                    
                    # LSTM Predictor
                    elif 'AI_LSTM_ENABLED =' in line and 'lstm_enabled' in data:
                        old_value = old_config.get('lstm_enabled', AIConfig.AI_LSTM_ENABLED)
                        if log_ai_config_change('lstm_enabled', old_value, data['lstm_enabled']):
                            changes_count += 1
                        line = f"    AI_LSTM_ENABLED = {data['lstm_enabled']}\n"
                    elif 'AI_LSTM_MIN_CONFIDENCE =' in line and 'lstm_min_confidence' in data:
                        old_value = old_config.get('lstm_min_confidence', AIConfig.AI_LSTM_MIN_CONFIDENCE)
                        if log_ai_config_change('lstm_min_confidence', old_value, data['lstm_min_confidence']):
                            changes_count += 1
                        line = f"    AI_LSTM_MIN_CONFIDENCE = {data['lstm_min_confidence']}\n"
                    elif 'AI_LSTM_WEIGHT =' in line and 'lstm_weight' in data:
                        old_value = old_config.get('lstm_weight', AIConfig.AI_LSTM_WEIGHT)
                        if log_ai_config_change('lstm_weight', old_value, data['lstm_weight']):
                            changes_count += 1
                        line = f"    AI_LSTM_WEIGHT = {data['lstm_weight']}\n"
                    
                    # Pattern Recognition
                    elif 'AI_PATTERN_ENABLED =' in line and 'pattern_enabled' in data:
                        old_value = old_config.get('pattern_enabled', AIConfig.AI_PATTERN_ENABLED)
                        if log_ai_config_change('pattern_enabled', old_value, data['pattern_enabled']):
                            changes_count += 1
                        line = f"    AI_PATTERN_ENABLED = {data['pattern_enabled']}\n"
                    elif 'AI_PATTERN_MIN_CONFIDENCE =' in line and 'pattern_min_confidence' in data:
                        old_value = old_config.get('pattern_min_confidence', AIConfig.AI_PATTERN_MIN_CONFIDENCE)
                        if log_ai_config_change('pattern_min_confidence', old_value, data['pattern_min_confidence']):
                            changes_count += 1
                        line = f"    AI_PATTERN_MIN_CONFIDENCE = {data['pattern_min_confidence']}\n"
                    elif 'AI_PATTERN_WEIGHT =' in line and 'pattern_weight' in data:
                        old_value = old_config.get('pattern_weight', AIConfig.AI_PATTERN_WEIGHT)
                        if log_ai_config_change('pattern_weight', old_value, data['pattern_weight']):
                            changes_count += 1
                        line = f"    AI_PATTERN_WEIGHT = {data['pattern_weight']}\n"
                    
                    # Logging
                    elif 'AI_LOG_PREDICTIONS =' in line and 'log_predictions' in data:
                        if log_ai_config_change('log_predictions', old_config['log_predictions'], data['log_predictions']):
                            changes_count += 1
                        line = f"    AI_LOG_PREDICTIONS = {data['log_predictions']}\n"
                    elif 'AI_LOG_ANOMALIES =' in line and 'log_anomalies' in data:
                        if log_ai_config_change('log_anomalies', old_config['log_anomalies'], data['log_anomalies']):
                            changes_count += 1
                        line = f"    AI_LOG_ANOMALIES = {data['log_anomalies']}\n"
                    elif 'AI_LOG_PATTERNS =' in line and 'log_patterns' in data:
                        old_value = old_config.get('log_patterns', AIConfig.AI_LOG_PATTERNS)
                        if log_ai_config_change('log_patterns', old_value, data['log_patterns']):
                            changes_count += 1
                        line = f"    AI_LOG_PATTERNS = {data['log_patterns']}\n"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ RiskConfig
                if in_risk_config and 'AI_OPTIMAL_ENTRY_ENABLED =' in line and 'optimal_entry_enabled' in data:
                    logger.debug(f"[AI_CONFIG] üìù –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ AI_OPTIMAL_ENTRY_ENABLED, —Å—Ç–∞—Ä–æ–µ: {old_config['optimal_entry_enabled']}, –Ω–æ–≤–æ–µ: {data['optimal_entry_enabled']}")
                    if log_ai_config_change('optimal_entry_enabled', old_config['optimal_entry_enabled'], data['optimal_entry_enabled']):
                        changes_count += 1
                    line = f"    AI_OPTIMAL_ENTRY_ENABLED = {data['optimal_entry_enabled']}\n"
                    logger.debug(f"[AI_CONFIG] ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞: {line.strip()}")
                
                updated_lines.append(line)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(config_path, 'w', encoding='utf-8') as f:
                f.writelines(updated_lines)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å bot_config
            import importlib
            import bot_engine.bot_config
            importlib.reload(bot_engine.bot_config)
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if changes_count > 0:
                logger.info(f"[AI_CONFIG] ‚úÖ AI –º–æ–¥—É–ª–∏: –∏–∑–º–µ–Ω–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {changes_count}, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                logger.info("[AI_CONFIG] ‚ÑπÔ∏è AI –º–æ–¥—É–ª–∏: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            return jsonify({
                'success': True,
                'message': f'AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({changes_count} –∏–∑–º–µ–Ω–µ–Ω–∏–π)'
            })
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/ai/anomaly-stats', methods=['GET'])
    def get_anomaly_stats():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π"""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π
            # –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –∏–ª–∏ –ë–î
            
            return jsonify({
                'success': True,
                'stats': {
                    'total_analyzed': 0,
                    'anomalies_detected': 0,
                    'blocked_entries': 0,
                    'by_type': {
                        'PUMP': 0,
                        'DUMP': 0,
                        'MANIPULATION': 0
                    }
                }
            })
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    logger.info("[API] ‚úÖ AI endpoints –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

