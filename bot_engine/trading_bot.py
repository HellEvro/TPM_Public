"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ª–æ–≥–∏–∫–æ–π RSI –Ω–∞ 6H —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
"""
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import logging

from .bot_config import (
    BotStatus, TrendDirection, VolumeMode, 
    DEFAULT_BOT_CONFIG, TIMEFRAME
)
from .indicators import SignalGenerator
from .scaling_calculator import calculate_scaling_for_bot


class TradingBot:
    """–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    
    def __init__(self, symbol: str, exchange, config: dict = None):
        self.symbol = symbol
        self.exchange = exchange
        self.config = {**DEFAULT_BOT_CONFIG, **(config or {})}
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.status = self.config.get('status', BotStatus.IDLE)
        self.auto_managed = self.config.get('auto_managed', False)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏
        self.volume_mode = self.config.get('volume_mode', VolumeMode.FIXED_USDT)
        self.volume_value = self.config.get('volume_value', 10.0)
        self.max_loss_percent = self.config.get('max_loss_percent', 2.0)
        
        # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
        self.position = self.config.get('position')
        self.entry_price = self.config.get('entry_price')
        self.entry_time = self.config.get('entry_time')
        self.last_signal_time = self.config.get('last_signal_time')
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (–ª–µ—Å–µ–Ω–∫–∞)
        self.scaling_enabled = self.config.get('scaling_enabled', False)
        self.scaling_levels = self.config.get('scaling_levels', [])
        self.scaling_current_level = self.config.get('scaling_current_level', 0)
        self.scaling_group_id = self.config.get('scaling_group_id', None)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(f'TradingBot.{symbol}')
        
        # –ê–Ω–∞–ª–∏–∑
        try:
            self.signal_generator = SignalGenerator()
            self.logger.info(f"[TRADING_BOT] {symbol}: SignalGenerator —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            self.logger.error(f"[TRADING_BOT] {symbol}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SignalGenerator: {e}")
            raise
        self.last_analysis = None
        self.last_bar_timestamp = None
        
        self.logger.info(f"Bot initialized for {symbol} with config: {self.config}")
    
    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            'symbol': self.symbol,
            'status': self.status.value if hasattr(self.status, 'value') else str(self.status),
            'auto_managed': self.auto_managed,
            'volume_mode': self.volume_mode.value if hasattr(self.volume_mode, 'value') else str(self.volume_mode),
            'volume_value': self.volume_value,
            'position': self.position,
            'entry_price': self.entry_price,
            'entry_time': self.entry_time.isoformat() if self.entry_time and hasattr(self.entry_time, 'isoformat') else self.entry_time,
            'last_signal_time': self.last_signal_time.isoformat() if self.last_signal_time and hasattr(self.last_signal_time, 'isoformat') else self.last_signal_time,
            'last_bar_timestamp': self.last_bar_timestamp,
            'created_at': datetime.now().isoformat(),
            'scaling_enabled': self.scaling_enabled,
            'scaling_levels': self.scaling_levels,
            'scaling_current_level': self.scaling_current_level,
            'scaling_group_id': self.scaling_group_id
        }
    
    def update(self, force_analysis: bool = False, external_signal: str = None, external_trend: str = None) -> Dict:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É
        
        Args:
            force_analysis: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
            external_signal: –í–Ω–µ—à–Ω–∏–π —Å–∏–≥–Ω–∞–ª (ENTER_LONG, ENTER_SHORT, WAIT)
            external_trend: –í–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–Ω–¥ (UP, DOWN, NEUTRAL)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –ù–∞—á–∏–Ω–∞–µ–º update method...")
            self.logger.info(f"[TRADING_BOT] {self.symbol}: External signal: {external_signal}, trend: {external_trend}")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é, –Ω–æ position = null, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            if self.status in [BotStatus.IN_POSITION_LONG, BotStatus.IN_POSITION_SHORT] and self.position is None:
                self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç—É—Å–∞! –°—Ç–∞—Ç—É—Å: {self.status}, –Ω–æ –ø–æ–∑–∏—Ü–∏—è: {self.position}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å.")
                self.status = BotStatus.IDLE
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
            try:
                exchange_positions = self.exchange.get_positions()
                if isinstance(exchange_positions, tuple):
                    positions_list = exchange_positions[0] if exchange_positions else []
                else:
                    positions_list = exchange_positions if exchange_positions else []
                
                # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –Ω–∞—à–µ–º—É —Å–∏–º–≤–æ–ª—É
                real_position = None
                for pos in positions_list:
                    if pos.get('symbol') == self.symbol and abs(float(pos.get('size', 0))) > 0:
                        real_position = pos
                        break
                
                # –ï—Å–ª–∏ –Ω–∞ –±–∏—Ä–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è, –Ω–æ –≤ –±–æ—Ç–µ –µ—ë –Ω–µ—Ç - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
                if real_position and not self.position:
                    self.logger.warning(f"[TRADING_BOT] {self.symbol}: üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–∞ –±–∏—Ä–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è {real_position}, –Ω–æ –≤ –±–æ—Ç–µ –Ω–µ—Ç!")
                    self.position = {
                        'side': 'LONG' if float(real_position.get('size', 0)) > 0 else 'SHORT',
                        'quantity': abs(float(real_position.get('size', 0))),
                        'entry_price': real_position.get('entry_price'),
                        'order_id': real_position.get('order_id', 'unknown')
                    }
                    self.entry_price = real_position.get('entry_price')
                    self.status = BotStatus.IN_POSITION_LONG if self.position['side'] == 'LONG' else BotStatus.IN_POSITION_SHORT
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {self.position}")
                
                # –ï—Å–ª–∏ –≤ –±–æ—Ç–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è, –Ω–æ –Ω–∞ –±–∏—Ä–∂–µ –Ω–µ—Ç - –æ—á–∏—â–∞–µ–º
                elif self.position and not real_position:
                    self.logger.warning(f"[TRADING_BOT] {self.symbol}: üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –≤ –±–æ—Ç–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è {self.position}, –Ω–æ –Ω–∞ –±–∏—Ä–∂–µ –Ω–µ—Ç!")
                    self.position = None
                    self.entry_price = None
                    self.entry_time = None
                    self.status = BotStatus.IDLE
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—á–∏—â–µ–Ω–∞")
                    
            except Exception as sync_error:
                self.logger.warning(f"[TRADING_BOT] {self.symbol}: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π: {sync_error}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–π —Å–∏–≥–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if external_signal:
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {external_signal}")
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è, –ù–ï –û–¢–ö–†–´–í–ê–ï–ú –Ω–æ–≤—É—é!
                if self.position:
                    self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è {self.position['side']} - –ò–ì–ù–û–†–ò–†–£–ï–ú –≤–Ω–µ—à–Ω–∏–π —Å–∏–≥–Ω–∞–ª {external_signal}")
                    analysis = {
                        'signal': 'WAIT',  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–∏–≥–Ω–∞–ª
                        'trend': external_trend or 'NEUTRAL',
                        'rsi': 0,
                        'price': self._get_current_price() or 0
                    }
                else:
                    analysis = {
                        'signal': external_signal,
                        'trend': external_trend or 'NEUTRAL',
                        'rsi': 0,  # –ó–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ RSI –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
                        'price': self._get_current_price() or 0
                    }
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –í–Ω–µ—à–Ω–∏–π –∞–Ω–∞–ª–∏–∑: {analysis}")
            else:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π...")
                candles_data = self._get_candles_data()
                if not candles_data:
                    self.logger.warning(f"[TRADING_BOT] {self.symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
                    return {'success': False, 'error': 'failed_to_get_candles'}
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –ü–æ–ª—É—á–µ–Ω–æ {len(candles_data)} —Å–≤–µ—á–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∞–Ω–∞–ª–∏–∑
                current_bar_timestamp = candles_data[-1].get('timestamp')
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: force_analysis={force_analysis}, current_bar={current_bar_timestamp}, last_bar={self.last_bar_timestamp}")
                if not force_analysis and current_bar_timestamp == self.last_bar_timestamp:
                    # –ë–∞—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: –ë–∞—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑")
                    return self._get_current_state()
                else:
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: –ë–∞—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã...")
                analysis = self.signal_generator.generate_signals(candles_data)
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {analysis}")
                self.last_bar_timestamp = current_bar_timestamp
            
            self.last_analysis = analysis
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É...")
            if self.status != BotStatus.PAUSED:
                action_result = self._execute_trading_logic(analysis)
                if action_result:
                    self.logger.info(f"Action executed: {action_result}")
                else:
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            else:
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
            return self._get_current_state()
            
        except Exception as e:
            self.logger.error(f"Error in update: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def _get_candles_data(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π —Å –±–∏—Ä–∂–∏"""
        try:
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π...")
            self.logger.info(f"[TRADING_BOT] {self.symbol}: Exchange type: {type(self.exchange)}")
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 –±–∞—Ä–æ–≤ 6H –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            chart_response = self.exchange.get_chart_data(
                symbol=self.symbol,
                timeframe=TIMEFRAME,
                period='1w'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º period –≤–º–µ—Å—Ç–æ limit
            )
            self.logger.info(f"[TRADING_BOT] {self.symbol}: Chart response type: {type(chart_response)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–≤–µ—á–∏
            if isinstance(chart_response, dict) and chart_response.get('success'):
                candles = chart_response.get('data', {}).get('candles', [])
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å timestamp
                # (–ø–æ—Ä—è–¥–æ–∫ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤ exchange –∫–ª–∞—Å—Å–µ)
                formatted_candles = []
                for candle in candles:
                    formatted_candle = {
                        'timestamp': candle.get('time'),
                        'open': float(candle.get('open', 0)),
                        'high': float(candle.get('high', 0)),
                        'low': float(candle.get('low', 0)),
                        'close': float(candle.get('close', 0)),
                        'volume': float(candle.get('volume', 0))
                    }
                    formatted_candles.append(formatted_candle)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if formatted_candles:
                    self.logger.debug(f"Got {len(formatted_candles)} candles for {self.symbol}")
                    self.logger.debug(f"First: {formatted_candles[0]['timestamp']}, Last: {formatted_candles[-1]['timestamp']}")
                
                return formatted_candles
            else:
                self.logger.error(f"Failed to get chart data: {chart_response}")
                return []
                
        except Exception as e:
            self.logger.error(f"Failed to get candles data: {str(e)}")
            return []
    
    def _execute_trading_logic(self, analysis: Dict) -> Optional[Dict]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ None
        """
        signal = analysis.get('signal')
        trend = analysis.get('trend')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
        if self._should_force_exit(trend):
            return self._force_exit_position()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if self.status in [BotStatus.IDLE, 'running']:
            return self._handle_idle_state(signal, trend)
        
        
        elif self.status in [BotStatus.IN_POSITION_LONG, BotStatus.IN_POSITION_SHORT]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            if not self.position:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å IN_POSITION, –Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç - —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ IDLE –∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –∑–∞–Ω–æ–≤–æ
                self.logger.warning(f"[TRADING_BOT] {self.symbol}: –°—Ç–∞—Ç—É—Å {self.status} –Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ IDLE")
                self.status = BotStatus.IDLE
                return self._handle_idle_state(signal, trend)
            else:
                return self._handle_position_state(signal, trend)
        
        return None
    
    def _should_force_exit(self, current_trend: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–Ω–¥–∞"""
        if not self.position:
            return False
        
        position_type = self.position.get('side')
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
        if position_type == 'LONG' and current_trend == 'DOWN':
            return True
        elif position_type == 'SHORT' and current_trend == 'UP':
            return True
        
        return False
    
    def _handle_idle_state(self, signal: str, trend: str) -> Optional[Dict]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE - –°–†–ê–ó–£ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫–∏!"""
        self.logger.info(f"[TRADING_BOT] {self.symbol}: _handle_idle_state: signal={signal}, trend={trend}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏—è –≤ –±–æ—Ç–µ
        if self.position:
            self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è {self.position['side']} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥")
            return {'action': 'position_exists', 'side': self.position['side'], 'price': self.position.get('entry_price')}
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ!
        try:
            exchange_positions = self.exchange.get_positions()
            if isinstance(exchange_positions, tuple):
                positions_list = exchange_positions[0] if exchange_positions else []
            else:
                positions_list = exchange_positions if exchange_positions else []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É –Ω–∞ –±–∏—Ä–∂–µ
            for pos in positions_list:
                if pos.get('symbol') == self.symbol and abs(float(pos.get('size', 0))) > 0:
                    existing_side = pos.get('side', 'UNKNOWN')
                    position_size = pos.get('size', 0)
                    
                    self.logger.warning(f"[TRADING_BOT] {self.symbol}: üö´ –ù–ê –ë–ò–†–ñ–ï –£–ñ–ï –ï–°–¢–¨ –ü–û–ó–ò–¶–ò–Ø {existing_side} —Ä–∞–∑–º–µ—Ä {position_size}!")
                    self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ùå –ë–õ–û–ö–ò–†–£–ï–ú –û–¢–ö–†–´–¢–ò–ï –ù–û–í–û–ô –ü–û–ó–ò–¶–ò–ò - –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø!")
                    
                    return {
                        'action': 'blocked_exchange_position', 
                        'side': existing_side, 
                        'size': position_size,
                        'message': f'–ù–∞ –±–∏—Ä–∂–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è {existing_side} —Ä–∞–∑–º–µ—Ä {position_size}'
                    }
            
            self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚úÖ –ù–∞ –±–∏—Ä–∂–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π - –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–¥–µ–ª–∫—É")
            
        except Exception as check_error:
            self.logger.error(f"[TRADING_BOT] {self.symbol}: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ: {check_error}")
            self.logger.error(f"[TRADING_BOT] {self.symbol}: üö´ –ë–õ–û–ö–ò–†–£–ï–ú –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò –ò–ó-–ó–ê –û–®–ò–ë–ö–ò –ü–†–û–í–ï–†–ö–ò!")
            return {
                'action': 'blocked_check_error', 
                'error': str(check_error),
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ'
            }
        
        # –ü–†–û–í–ï–†–ö–ê RSI –í–†–ï–ú–ï–ù–ù–û–ì–û –§–ò–õ–¨–¢–†–ê
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            import sys
            import os
            sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
            from bots import check_rsi_time_filter
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            candles = self.exchange.get_candles(self.symbol, '6h', 100)
            if candles and len(candles) > 0:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π RSI –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç—ã
                current_rsi = getattr(self, 'current_rsi', None)
                if current_rsi is None:
                    # –ï—Å–ª–∏ RSI –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–æ—Ç–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ API
                    try:
                        rsi_data = self.exchange.get_rsi_data(self.symbol, '6h', 14)
                        current_rsi = rsi_data.get('rsi', 50) if rsi_data else 50
                    except:
                        current_rsi = 50
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
                time_filter_result = check_rsi_time_filter(candles, current_rsi, signal)
                
                if not time_filter_result['allowed']:
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥: {time_filter_result['reason']}")
                    return {
                        'action': 'blocked_time_filter',
                        'reason': time_filter_result['reason'],
                        'last_extreme_candles_ago': time_filter_result.get('last_extreme_candles_ago')
                    }
                else:
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Ö–æ–¥: {time_filter_result['reason']}")
            else:
                self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞")
        except Exception as e:
            self.logger.error(f"[TRADING_BOT] {self.symbol}: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–¥–µ–ª–∫—É (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∞–≤—Ç–æ–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω - –ù–ï –û–¢–ö–†–´–í–ê–ï–ú –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏!
        try:
            import sys
            import os
            sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
            from bots import bots_data, bots_data_lock
            
            with bots_data_lock:
                auto_bot_enabled = bots_data['auto_bot_config']['enabled']
            
            if not auto_bot_enabled:
                self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚èπÔ∏è Auto Bot –≤—ã–∫–ª—é—á–µ–Ω - –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ IDLE —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                return {'action': 'blocked_autobot_disabled', 'reason': 'autobot_off'}
        except Exception as e:
            self.logger.error(f"[TRADING_BOT] {self.symbol}: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–±–æ—Ç–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return {'action': 'blocked_check_error', 'reason': 'autobot_check_failed'}
        
        # –ü–†–Ø–ú–ê–Ø –õ–û–ì–ò–ö–ê: –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏ –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if signal == 'ENTER_LONG':
            self.logger.info(f"[TRADING_BOT] {self.symbol}: üöÄ –°–†–ê–ó–£ –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é!")
            return self._enter_position('LONG')
        
        elif signal == 'ENTER_SHORT':
            self.logger.info(f"[TRADING_BOT] {self.symbol}: üöÄ –°–†–ê–ó–£ –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é!")
            return self._enter_position('SHORT')
        
        self.logger.info(f"[TRADING_BOT] {self.symbol}: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞: signal={signal}, trend={trend}")
        return None
    
    
    def _handle_position_state(self, signal: str, trend: str) -> Optional[Dict]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è IN_POSITION_LONG/SHORT"""
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∞–≤—Ç–æ–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω - –ù–ï –û–¢–ö–†–´–í–ê–ï–ú –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏!
        try:
            import sys
            import os
            sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
            from bots import bots_data, bots_data_lock
            
            with bots_data_lock:
                auto_bot_enabled = bots_data['auto_bot_config']['enabled']
            
            if not auto_bot_enabled:
                # –ï—Å–ª–∏ –∞–≤—Ç–æ–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω - —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ (—Å—Ç–æ–ø—ã, —Ç—Ä–µ–π–ª–∏–Ω–≥)
                # –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                if signal in ['ENTER_LONG', 'ENTER_SHORT']:
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚èπÔ∏è Auto Bot –≤—ã–∫–ª—é—á–µ–Ω - –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ POSITION —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                    return {'action': 'blocked_autobot_disabled', 'reason': 'autobot_off', 'status': self.status}
        except Exception as e:
            self.logger.error(f"[TRADING_BOT] {self.symbol}: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–±–æ—Ç–∞: {e}")
        
        position_type = self.position.get('side') if self.position else None
        
        if (self.status == BotStatus.IN_POSITION_LONG and 
            (signal == 'EXIT_LONG' or position_type == 'LONG')):
            return self._exit_position()
        
        elif (self.status == BotStatus.IN_POSITION_SHORT and 
              (signal == 'EXIT_SHORT' or position_type == 'SHORT')):
            return self._exit_position()
        
        return None
    
    def _enter_position(self, side: str) -> Dict:
        """–í—Ö–æ–¥–∏—Ç –≤ –ø–æ–∑–∏—Ü–∏—é"""
        try:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è
            if self.position is not None:
                self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞! –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {self.position}")
                return {'success': False, 'error': 'position_already_exists', 'message': '–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞'}
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
            if self.status in [BotStatus.IN_POSITION_LONG, BotStatus.IN_POSITION_SHORT]:
                self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –≤ –ø–æ–∑–∏—Ü–∏–∏! –°—Ç–∞—Ç—É—Å: {self.status}")
                return {'success': False, 'error': 'bot_already_in_position', 'message': f'–ë–æ—Ç —É–∂–µ –≤ –ø–æ–∑–∏—Ü–∏–∏ (—Å—Ç–∞—Ç—É—Å: {self.status})'}
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ –ü–ï–†–ï–î –æ—Ç–∫—Ä—ã—Ç–∏–µ–º!
            try:
                exchange_positions = self.exchange.get_positions()
                if isinstance(exchange_positions, tuple):
                    positions_list = exchange_positions[0] if exchange_positions else []
                else:
                    positions_list = exchange_positions if exchange_positions else []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É –Ω–∞ –±–∏—Ä–∂–µ
                for pos in positions_list:
                    if pos.get('symbol') == self.symbol and abs(float(pos.get('size', 0))) > 0:
                        existing_side = pos.get('side', 'UNKNOWN')
                        position_size = pos.get('size', 0)
                        
                        self.logger.error(f"[TRADING_BOT] {self.symbol}: üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ù–ê –ë–ò–†–ñ–ï –£–ñ–ï –ï–°–¢–¨ –ü–û–ó–ò–¶–ò–Ø {existing_side} —Ä–∞–∑–º–µ—Ä {position_size}!")
                        self.logger.error(f"[TRADING_BOT] {self.symbol}: ‚ùå –ù–ï –ú–û–ñ–ï–ú –û–¢–ö–†–´–¢–¨ –ü–û–ó–ò–¶–ò–Æ {side} - –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø!")
                        
                        return {
                            'success': False, 
                            'error': 'exchange_position_exists', 
                            'message': f'–ù–∞ –±–∏—Ä–∂–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è {existing_side} —Ä–∞–∑–º–µ—Ä {position_size}',
                            'existing_side': existing_side,
                            'existing_size': position_size
                        }
                
                self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞ –±–∏—Ä–∂–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π - –æ—Ç–∫—Ä—ã–≤–∞–µ–º {side}")
                
            except Exception as exchange_check_error:
                self.logger.error(f"[TRADING_BOT] {self.symbol}: ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ: {exchange_check_error}")
                self.logger.error(f"[TRADING_BOT] {self.symbol}: üö´ –ë–õ–û–ö–ò–†–£–ï–ú –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò –ò–ó-–ó–ê –û–®–ò–ë–ö–ò –ü–†–û–í–ï–†–ö–ò!")
                return {
                    'success': False, 
                    'error': 'exchange_check_failed', 
                    'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ: {exchange_check_error}'
                }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±–∏—Ä–∂—É
            try:
                exchange_positions = self.exchange.get_positions()
                if isinstance(exchange_positions, tuple):
                    positions_list = exchange_positions[0] if exchange_positions else []
                else:
                    positions_list = exchange_positions if exchange_positions else []
                
                for pos in positions_list:
                    if pos.get('symbol') == self.symbol and abs(float(pos.get('size', 0))) > 0:
                        self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –ù–∞ –±–∏—Ä–∂–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è: {pos}")
                        return {'success': False, 'error': 'exchange_position_exists', 'message': '–ù–∞ –±–∏—Ä–∂–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è'}
            except Exception as e:
                self.logger.warning(f"[TRADING_BOT] {self.symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ: {e}")
            
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ {side} –ø–æ–∑–∏—Ü–∏–∏...")
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é AI (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            try:
                from bot_engine.bot_config import AIConfig
                if AIConfig.AI_ENABLED and AIConfig.AI_RISK_MANAGEMENT_ENABLED:
                    from bot_engine.ai.ai_manager import get_ai_manager
                    ai_manager = get_ai_manager()
                    
                    if ai_manager and ai_manager.risk_manager and self.volume_mode == VolumeMode.FIXED_USDT:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∏ –±–∞–ª–∞–Ω—Å
                        candles = self.exchange.get_chart_data(self.symbol, '6h', limit=50)
                        balance = self._get_available_balance() or 1000  # Fallback
                        
                        if candles and len(candles) >= 20:
                            dynamic_size = ai_manager.risk_manager.calculate_position_size(
                                self.symbol, candles, balance, signal_confidence=0.7
                            )
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º volume_value –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                            original_size = self.volume_value
                            self.volume_value = dynamic_size['size_usdt']
                            
                            self.logger.info(
                                f"[TRADING_BOT] {self.symbol}: ü§ñ AI –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª —Ä–∞–∑–º–µ—Ä: "
                                f"{original_size} USDT ‚Üí {self.volume_value} USDT "
                                f"({dynamic_size['reason']})"
                            )
            except Exception as ai_error:
                self.logger.debug(f"[TRADING_BOT] {self.symbol}: AI –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {ai_error}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            quantity = self._calculate_position_size()
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {quantity}")
            if not quantity:
                self.logger.error(f"[TRADING_BOT] {self.symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                return {'success': False, 'error': 'failed_to_calculate_position_size'}
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –†–∞–∑–º–µ—â–∞–µ–º {side} –æ—Ä–¥–µ—Ä –Ω–∞ {quantity}...")
            order_result = self.exchange.place_order(
                symbol=self.symbol,
                side=side,
                quantity=quantity,
                order_type='market'
            )
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–¥–µ—Ä–∞: {order_result}")
            
            if order_result.get('success'):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.position = {
                    'side': side,
                    'quantity': quantity,
                    'entry_price': order_result.get('price'),
                    'order_id': order_result.get('order_id')
                }
                self.entry_price = order_result.get('price')
                self.entry_time = datetime.now()
                self.status = (BotStatus.IN_POSITION_LONG if side == 'LONG' 
                              else BotStatus.IN_POSITION_SHORT)
                
                # ‚úÖ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –ü–û–ó–ò–¶–ò–Æ –í –†–ï–ï–°–¢–†–ï
                try:
                    from bots_modules.imports_and_globals import register_bot_position
                    order_id = order_result.get('order_id')
                    if order_id:
                        register_bot_position(
                            symbol=self.symbol,
                            order_id=order_id,
                            side=side,
                            entry_price=order_result.get('price'),
                            quantity=quantity
                        )
                        self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: order_id={order_id}")
                    else:
                        self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é - –Ω–µ—Ç order_id")
                except Exception as registry_error:
                    self.logger.error(f"[TRADING_BOT] {self.symbol}: ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {registry_error}")
                    # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å (—Å AI –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL –æ—Ç AI
                    sl_percent = self.max_loss_percent
                    ai_reason = None
                    
                    try:
                        from bot_engine.bot_config import AIConfig
                        if AIConfig.AI_ENABLED and AIConfig.AI_RISK_MANAGEMENT_ENABLED:
                            from bot_engine.ai.ai_manager import get_ai_manager
                            ai_manager = get_ai_manager()
                            
                            if ai_manager and ai_manager.risk_manager:
                                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                                candles = self.exchange.get_chart_data(self.symbol, '6h', limit=50)
                                
                                if candles and len(candles) >= 20:
                                    dynamic_sl = ai_manager.risk_manager.calculate_dynamic_sl(
                                        self.symbol, candles, side
                                    )
                                    
                                    sl_percent = dynamic_sl['sl_percent']
                                    ai_reason = dynamic_sl['reason']
                                    
                                    self.logger.info(
                                        f"[TRADING_BOT] {self.symbol}: ü§ñ AI –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª SL: "
                                        f"{self.max_loss_percent}% ‚Üí {sl_percent}% "
                                        f"({ai_reason})"
                                    )
                    except Exception as ai_error:
                        self.logger.debug(f"[TRADING_BOT] {self.symbol}: AI SL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ai_error}")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)
                    stop_result = self._place_stop_loss(side, self.entry_price, sl_percent)
                    if stop_result and stop_result.get('success'):
                        self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {sl_percent}%")
                    else:
                        self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å")
                except Exception as stop_error:
                    self.logger.error(f"[TRADING_BOT] {self.symbol}: ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {stop_error}")
                
                self.logger.info(f"Entered {side} position: {quantity} at {self.entry_price}")
                return {
                    'success': True,
                    'action': 'position_entered',
                    'side': side,
                    'quantity': quantity,
                    'entry_price': self.entry_price
                }
            else:
                self.logger.error(f"Failed to enter position: {order_result}")
                return {'success': False, 'error': order_result.get('error', 'order_failed')}
                
        except Exception as e:
            self.logger.error(f"Error entering position: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def _exit_position(self) -> Dict:
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.position:
                return {'success': False, 'error': 'no_position_to_exit'}
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            side = 'SELL' if self.position['side'] == 'LONG' else 'BUY'
            order_result = self.exchange.place_order(
                symbol=self.symbol,
                side=side,
                quantity=self.position['quantity'],
                order_type='market'
            )
            
            if order_result.get('success'):
                exit_price = order_result.get('fill_price')
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ exit_price –Ω–µ None
                pnl = 0.0
                if exit_price is not None:
                    pnl = self._calculate_pnl(exit_price)
                
                self.logger.info(f"Exited position: PnL = {pnl}")
                
                # ‚úÖ –£–î–ê–õ–Ø–ï–ú –ü–û–ó–ò–¶–ò–Æ –ò–ó –†–ï–ï–°–¢–†–ê
                try:
                    from bots_modules.imports_and_globals import unregister_bot_position
                    order_id = self.position.get('order_id') if self.position else None
                    if order_id:
                        unregister_bot_position(order_id)
                        self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚úÖ –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: order_id={order_id}")
                    else:
                        self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ - –Ω–µ—Ç order_id")
                except Exception as registry_error:
                    self.logger.error(f"[TRADING_BOT] {self.symbol}: ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {registry_error}")
                    # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.position = None
                self.entry_price = None
                self.entry_time = None
                self.status = BotStatus.IDLE
                
                return {
                    'success': True,
                    'action': 'position_exited',
                    'exit_price': exit_price,
                    'pnl': pnl
                }
            else:
                self.logger.error(f"Failed to exit position: {order_result}")
                return {'success': False, 'error': order_result.get('error', 'order_failed')}
                
        except Exception as e:
            self.logger.error(f"Error exiting position: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def _force_exit_position(self) -> Dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–Ω–¥–∞"""
        self.logger.warning("Force exiting position due to trend change")
        return self._exit_position()
    
    def _calculate_position_size(self) -> Optional[float]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏...")
            self.logger.info(f"[TRADING_BOT] {self.symbol}: volume_mode={self.volume_mode}, volume_value={self.volume_value}")
            
            if self.volume_mode == VolumeMode.FIXED_QTY or self.volume_mode == 'qty':
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –†–µ–∂–∏–º FIXED_QTY, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {self.volume_value}")
                return self.volume_value
            
            elif self.volume_mode == VolumeMode.FIXED_USDT or self.volume_mode == 'usdt':
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –†–µ–∂–∏–º FIXED_USDT, –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É...")
                current_price = self._get_current_price()
                if current_price:
                    size = self.volume_value / current_price
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.volume_value} / {current_price} = {size}")
                    return size
                else:
                    self.logger.warning(f"[TRADING_BOT] {self.symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")
                    return None
            
            elif self.volume_mode == VolumeMode.PERCENT_BALANCE or self.volume_mode == 'percent':
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –†–µ–∂–∏–º PERCENT_BALANCE")
                balance = self._get_available_balance()
                if balance:
                    usdt_amount = balance * (self.volume_value / 100)
                    current_price = self._get_current_price()
                    if current_price:
                        return usdt_amount / current_price
            
            self.logger.warning(f"[TRADING_BOT] {self.symbol}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º volume_mode: {self.volume_mode}")
            return None
            
        except Exception as e:
            self.logger.error(f"Error calculating position size: {str(e)}")
            return None
    
    def _calculate_scaling_levels(self) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –ª–µ—Å–µ–Ω–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞"""
        try:
            if not self.scaling_enabled:
                return {
                    'success': False,
                    'error': '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ',
                    'levels': []
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = self._get_current_price()
            if not current_price:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É',
                    'levels': []
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∞–≤—Ç–æ–±–æ—Ç–∞
            scaling_config = {
                'scaling_enabled': self.scaling_enabled,
                'scaling_mode': 'auto_double',  # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–≤–æ–µ–Ω–∏–µ
                'auto_double_start_percent': 1.0,
                'auto_double_max_levels': 5,
                'scaling_min_usdt_per_trade': 5.0
            }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–µ—Å–µ–Ω–∫—É
            result = calculate_scaling_for_bot(
                base_usdt=self.volume_value,
                price=current_price,
                scaling_config=scaling_config
            )
            
            if result['success']:
                self.scaling_levels = result['levels']
                self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚úÖ –õ–µ—Å–µ–Ω–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {len(result['levels'])} —É—Ä–æ–≤–Ω–µ–π")
                for i, level in enumerate(result['levels']):
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: –£—Ä–æ–≤–µ–Ω—å {i+1}: {level['percent']}% = {level['usdt']:.2f} USDT")
            else:
                self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ª–µ—Å–µ–Ω–∫–∏: {result['error']}")
                if result.get('recommendation'):
                    rec = result['recommendation']
                    self.logger.info(f"[TRADING_BOT] {self.symbol}: üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –º–∏–Ω–∏–º—É–º {rec['min_base_usdt']:.2f} USDT –¥–ª—è {rec['min_levels']} —É—Ä–æ–≤–Ω–µ–π")
            
            return result
            
        except Exception as e:
            self.logger.error(f"[TRADING_BOT] {self.symbol}: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ª–µ—Å–µ–Ω–∫–∏: {e}")
            return {
                'success': False,
                'error': str(e),
                'levels': []
            }
    
    def _get_current_price(self) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        try:
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É...")
            ticker = self.exchange.get_ticker(self.symbol)
            self.logger.info(f"[TRADING_BOT] {self.symbol}: Ticker response: {ticker}")
            if ticker:
                price = float(ticker.get('last', 0))
                self.logger.info(f"[TRADING_BOT] {self.symbol}: –¶–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞: {price}")
                return price
            else:
                self.logger.warning(f"[TRADING_BOT] {self.symbol}: Ticker –ø—É—Å—Ç–æ–π")
                return None
        except Exception as e:
            self.logger.error(f"Error getting current price: {str(e)}")
            return None
    
    def _get_available_balance(self) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ USDT"""
        try:
            balance_data = self.exchange.get_wallet_balance()
            return float(balance_data.get('available_balance', 0))
        except Exception as e:
            self.logger.error(f"Error getting balance: {str(e)}")
            return None
    
    def _calculate_pnl(self, exit_price: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç PnL"""
        try:
            if not self.position or not self.entry_price or exit_price is None:
                return 0.0
            
            quantity = self.position.get('quantity', 0)
            entry_price = self.entry_price
            
            if self.position['side'] == 'LONG':
                return (exit_price - entry_price) * quantity
            else:  # SHORT
                return (entry_price - exit_price) * quantity
        except Exception as e:
            self.logger.error(f"Error calculating PnL: {e}")
            return 0.0
    
    def _get_current_state(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"""
        current_price = self._get_current_price()
        current_pnl = 0.0
        
        if self.position and current_price:
            current_pnl = self._calculate_pnl(current_price)
        
        return {
            'success': True,
            'symbol': self.symbol,
            'status': self.status,
            'auto_managed': self.auto_managed,
            'trend': self.last_analysis.get('trend') if self.last_analysis else 'NEUTRAL',
            'rsi': self.last_analysis.get('rsi') if self.last_analysis else None,
            'price': current_price,
            'position': self.position,
            'pnl': current_pnl,
            'volume_mode': self.volume_mode,
            'volume_value': self.volume_value,
            'last_update': datetime.now().isoformat()
        }
    
    # –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
    def start(self, volume_mode: str = None, volume_value: float = None) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if volume_mode:
            self.volume_mode = volume_mode
        if volume_value:
            self.volume_value = volume_value
        
        if self.status == BotStatus.PAUSED:
            self.logger.info("Bot resumed from pause")
        else:
            self.status = BotStatus.IDLE
            self.logger.info("Bot started")
        
        return {'success': True, 'action': 'started'}
    
    def pause(self) -> Dict:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        self.status = BotStatus.PAUSED
        self.logger.info("Bot paused")
        return {'success': True, 'action': 'paused'}
    
    def stop(self) -> Dict:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
        if self.position:
            exit_result = self._exit_position()
            if not exit_result.get('success'):
                return exit_result
        
        self.status = BotStatus.IDLE
        self.position = None
        self.entry_price = None
        self.entry_time = None
        
        self.logger.info("Bot stopped")
        return {'success': True, 'action': 'stopped'}
    
    def force_close_position(self) -> Dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é"""
        if not self.position:
            return {'success': False, 'error': 'no_position_to_close'}
        
        return self._exit_position()
    
    def get_state_dict(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            'symbol': self.symbol,
            'status': self.status,
            'auto_managed': self.auto_managed,
            'volume_mode': self.volume_mode,
            'volume_value': self.volume_value,
            'position': self.position,
            'entry_price': self.entry_price,
            'entry_time': self.entry_time.isoformat() if self.entry_time else None,
            'last_bar_timestamp': self.last_bar_timestamp
        }
    
    def restore_from_state(self, state_dict: Dict):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        self.status = state_dict.get('status', BotStatus.IDLE)
        self.auto_managed = state_dict.get('auto_managed', False)
        self.volume_mode = state_dict.get('volume_mode', VolumeMode.FIXED_USDT)
        self.volume_value = state_dict.get('volume_value', 10.0)
        self.position = state_dict.get('position')
        self.entry_price = state_dict.get('entry_price')
        self.last_bar_timestamp = state_dict.get('last_bar_timestamp')
        
        entry_time_str = state_dict.get('entry_time')
        if entry_time_str:
            self.entry_time = datetime.fromisoformat(entry_time_str)
        
        self.logger.info(f"Bot state restored: {self.status}")
    
    def _place_stop_loss(self, side: str, entry_price: float, loss_percent: float) -> Dict:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not entry_price or entry_price <= 0:
                self.logger.error(f"[TRADING_BOT] {self.symbol}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {entry_price}")
                return {'success': False, 'error': 'invalid_entry_price'}
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if side == 'LONG':
                # –î–ª—è –ª–æ–Ω–≥–∞: —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                stop_price = entry_price * (1 - loss_percent / 100)
            else:  # SHORT
                # –î–ª—è —à–æ—Ä—Ç–∞: —Å—Ç–æ–ø-–ª–æ—Å—Å –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                stop_price = entry_price * (1 + loss_percent / 100)
            
            self.logger.info(f"[TRADING_BOT] {self.symbol}: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å: {side} @ {stop_price:.6f} (–ø–æ—Ç–µ—Ä—è: {loss_percent}%)")
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä
            stop_result = self.exchange.place_stop_loss(
                symbol=self.symbol,
                side=side,
                quantity=self.position.get('quantity', 0) if self.position else 0,
                stop_price=stop_price,
                order_type='stop_market'
            )
            
            if stop_result and stop_result.get('success'):
                self.logger.info(f"[TRADING_BOT] {self.symbol}: ‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return {'success': True, 'stop_price': stop_price, 'order_id': stop_result.get('order_id')}
            else:
                self.logger.warning(f"[TRADING_BOT] {self.symbol}: ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å: {stop_result}")
                return {'success': False, 'error': stop_result.get('error', 'stop_loss_failed')}
                
        except Exception as e:
            self.logger.error(f"[TRADING_BOT] {self.symbol}: ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
            return {'success': False, 'error': str(e)}
