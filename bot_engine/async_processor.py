"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –±–æ—Ç–æ–≤
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É RSI –¥–∞–Ω–Ω—ã—Ö, —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –±–æ—Ç–æ–≤
"""

import asyncio
import aiohttp
import json
import time
import logging
from typing import Dict, List, Optional, Any
from concurrent.futures import ThreadPoolExecutor
import threading
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class TaskStatus(Enum):
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"

@dataclass
class AsyncTask:
    id: str
    task_type: str
    status: TaskStatus
    created_at: float
    started_at: Optional[float] = None
    completed_at: Optional[float] = None
    result: Optional[Any] = None
    error: Optional[str] = None

class AsyncRSILoader:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ RSI –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, exchange, max_concurrent_requests: int = 10):
        self.exchange = exchange
        self.max_concurrent_requests = max_concurrent_requests
        self.semaphore = asyncio.Semaphore(max_concurrent_requests)
        self.session = None
        logger.info(f"[ASYNC_RSI] AsyncRSILoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∏—Ä–∂–µ–π: {type(exchange)}")
        
        if exchange is None:
            logger.warning("[ASYNC_RSI] ‚ö†Ô∏è –ë–∏—Ä–∂–∞ —Ä–∞–≤–Ω–∞ None, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback –ª–æ–≥–∏–∫–∞")
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=30),
            connector=aiohttp.TCPConnector(limit=100)
        )
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def load_coin_rsi_async(self, symbol: str) -> Optional[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç RSI –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        async with self.semaphore:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∫ –±–∏—Ä–∂–µ
                loop = asyncio.get_event_loop()
                with ThreadPoolExecutor() as executor:
                    result = await loop.run_in_executor(
                        executor, 
                        self._get_coin_rsi_data_sync, 
                        symbol
                    )
                return result
            except Exception as e:
                logger.error(f"[ASYNC_RSI] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSI –¥–ª—è {symbol}: {e}")
                return None
    
    def _get_coin_rsi_data_sync(self, symbol: str) -> Optional[Dict]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è RSI –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π maturity"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
            import sys
            import os
            sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
            
            # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é get_coin_rsi_data —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –±–∏—Ä–∂–∏
            from bots import get_coin_rsi_data, is_coin_mature_stored, add_mature_coin_to_storage
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –±–∏—Ä–∂—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            exchange_to_use = self.exchange
            logger.debug(f"[ASYNC_RSI] self.exchange –¥–ª—è {symbol}: {type(exchange_to_use)}")
            
            if not exchange_to_use:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é exchange
                try:
                    import bots
                    exchange_to_use = getattr(bots, 'exchange', None)
                    logger.debug(f"[ASYNC_RSI] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–∏—Ä–∂–∞ –¥–ª—è {symbol}: {type(exchange_to_use)}")
                    
                    if exchange_to_use:
                        logger.info(f"[ASYNC_RSI] –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∏—Ä–∂—É –¥–ª—è {symbol}")
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É –±–∏—Ä–∂–∏ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥
                        if not hasattr(exchange_to_use, 'get_chart_data'):
                            logger.error(f"[ASYNC_RSI] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–∏—Ä–∂–∞ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ get_chart_data –¥–ª—è {symbol}")
                            return None
                    else:
                        logger.error(f"[ASYNC_RSI] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: –±–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                        return None
                except Exception as e:
                    logger.error(f"[ASYNC_RSI] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∏—Ä–∂–∏ –¥–ª—è {symbol}: {e}")
                    return None
            else:
                logger.debug(f"[ASYNC_RSI] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –±–∏—Ä–∂—É –¥–ª—è {symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º RSI –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è –±–∏—Ä–∂—É
            rsi_data = get_coin_rsi_data(symbol, exchange_to_use)
            if not rsi_data:
                return None
            
            # ‚ùå –£–î–ê–õ–ï–ù–û: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RSI –¥–∞–Ω–Ω—ã—Ö –≤ maturity storage
            # –ó—Ä–µ–ª–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ get_coin_rsi_data() –∏ check_coin_maturity_with_storage()
            # –ù–ï –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –º–æ–Ω–µ—Ç—ã –≤ maturity storage –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ
            # –∫–æ–≥–¥–∞ –º–æ–Ω–µ—Ç–∞ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑—Ä–µ–ª–æ—Å—Ç–∏!
            
            return rsi_data
            
        except Exception as e:
            logger.error(f"[ASYNC_RSI] –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    async def load_batch_rsi_async(self, symbols: List[str]) -> Dict[str, Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç RSI –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–∫–µ—Ç–∞ –º–æ–Ω–µ—Ç"""
        logger.info(f"[ASYNC_RSI] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É {len(symbols)} –º–æ–Ω–µ—Ç")
        
        tasks = []
        for symbol in symbols:
            task = asyncio.create_task(self.load_coin_rsi_async(symbol))
            tasks.append((symbol, task))
        
        results = {}
        completed = 0
        failed = 0
        
        for symbol, task in tasks:
            try:
                result = await task
                if result:
                    results[symbol] = result
                    completed += 1
                else:
                    failed += 1
            except Exception as e:
                logger.error(f"[ASYNC_RSI] –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è {symbol}: {e}")
                failed += 1
        
        logger.info(f"[ASYNC_RSI] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º maturity –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–Ω–æ –≤ –∫–æ–Ω—Ü–µ
        try:
            from bots import save_mature_coins_storage
            save_mature_coins_storage()
            logger.debug(f"[ASYNC_RSI] üíæ Maturity –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–∞–∫–µ—Ç–Ω–æ")
        except Exception as e:
            logger.warning(f"[ASYNC_RSI] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è maturity –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return results

class AsyncBotProcessor:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –±–æ—Ç–æ–≤"""
    
    def __init__(self, max_concurrent_bots: int = 5):
        self.max_concurrent_bots = max_concurrent_bots
        self.semaphore = asyncio.Semaphore(max_concurrent_bots)
        self.active_tasks: Dict[str, AsyncTask] = {}
        
    async def process_bot_async(self, bot, rsi_data: Dict) -> Optional[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞"""
        async with self.semaphore:
            task_id = f"bot_{bot.symbol}_{int(time.time())}"
            task = AsyncTask(
                id=task_id,
                task_type="bot_processing",
                status=TaskStatus.RUNNING,
                created_at=time.time(),
                started_at=time.time()
            )
            
            self.active_tasks[task_id] = task
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
                loop = asyncio.get_event_loop()
                with ThreadPoolExecutor() as executor:
                    result = await loop.run_in_executor(
                        executor,
                        self._process_bot_sync,
                        bot,
                        rsi_data
                    )
                
                task.status = TaskStatus.COMPLETED
                task.completed_at = time.time()
                task.result = result
                
                return result
                
            except Exception as e:
                task.status = TaskStatus.FAILED
                task.completed_at = time.time()
                task.error = str(e)
                logger.error(f"[ASYNC_BOT] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞ {bot.symbol}: {e}")
                return None
            finally:
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                if task_id in self.active_tasks:
                    del self.active_tasks[task_id]
    
    def _process_bot_sync(self, bot, rsi_data: Dict) -> Optional[Dict]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –±–æ—Ç–∞
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                'symbol': bot.symbol,
                'status': 'processed',
                'timestamp': time.time()
            }
        except Exception as e:
            logger.error(f"[ASYNC_BOT] –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {bot.symbol}: {e}")
            return None
    
    async def process_bots_batch_async(self, bots: List, rsi_data: Dict) -> Dict[str, Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –±–æ—Ç–æ–≤"""
        logger.info(f"[ASYNC_BOT] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(bots)} –±–æ—Ç–æ–≤")
        
        tasks = []
        for bot in bots:
            task = asyncio.create_task(self.process_bot_async(bot, rsi_data))
            tasks.append((bot.symbol, task))
        
        results = {}
        completed = 0
        failed = 0
        
        for symbol, task in tasks:
            try:
                result = await task
                if result:
                    results[symbol] = result
                    completed += 1
                else:
                    failed += 1
            except Exception as e:
                logger.error(f"[ASYNC_BOT] –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è {symbol}: {e}")
                failed += 1
        
        logger.info(f"[ASYNC_BOT] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
        return results

class AsyncSignalProcessor:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, max_concurrent_signals: int = 10):
        self.max_concurrent_signals = max_concurrent_signals
        self.semaphore = asyncio.Semaphore(max_concurrent_signals)
        
    async def process_signal_async(self, symbol: str, rsi_data: Dict) -> Optional[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        async with self.semaphore:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
                loop = asyncio.get_event_loop()
                with ThreadPoolExecutor() as executor:
                    result = await loop.run_in_executor(
                        executor,
                        self._process_signal_sync,
                        symbol,
                        rsi_data
                    )
                return result
            except Exception as e:
                logger.error(f"[ASYNC_SIGNAL] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
                return None
    
    def _process_signal_sync(self, symbol: str, rsi_data: Dict) -> Optional[Dict]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                'symbol': symbol,
                'signal': 'NEUTRAL',
                'rsi': rsi_data.get('rsi6h', 50),
                'timestamp': time.time()
            }
        except Exception as e:
            logger.error(f"[ASYNC_SIGNAL] –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    async def process_signals_batch_async(self, symbols: List[str], rsi_data: Dict) -> Dict[str, Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info(f"[ASYNC_SIGNAL] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(symbols)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        tasks = []
        for symbol in symbols:
            task = asyncio.create_task(self.process_signal_async(symbol, rsi_data))
            tasks.append((symbol, task))
        
        results = {}
        completed = 0
        failed = 0
        
        for symbol, task in tasks:
            try:
                result = await task
                if result:
                    results[symbol] = result
                    completed += 1
                else:
                    failed += 1
            except Exception as e:
                logger.error(f"[ASYNC_SIGNAL] –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è {symbol}: {e}")
                failed += 1
        
        logger.info(f"[ASYNC_SIGNAL] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
        return results

class AsyncDataSaver:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–æ—Ö—Ä–∞–Ω—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, max_concurrent_saves: int = 3):
        self.max_concurrent_saves = max_concurrent_saves
        self.semaphore = asyncio.Semaphore(max_concurrent_saves)
        
    async def save_data_async(self, data: Dict, filename: str) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        async with self.semaphore:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
                loop = asyncio.get_event_loop()
                with ThreadPoolExecutor() as executor:
                    result = await loop.run_in_executor(
                        executor,
                        self._save_data_sync,
                        data,
                        filename
                    )
                return result
            except Exception as e:
                logger.error(f"[ASYNC_SAVER] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
                return False
    
    def _save_data_sync(self, data: Dict, filename: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"[ASYNC_SAVER] –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
            return False

class AsyncMainProcessor:
    """–ì–ª–∞–≤–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
    
    def __init__(self, exchange, config: Dict):
        self.exchange = exchange
        self.config = config
        
        logger.info(f"[ASYNC_MAIN] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π: {type(exchange)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.rsi_loader = AsyncRSILoader(
            exchange, 
            max_concurrent_requests=config.get('max_rsi_requests', 10)
        )
        self.bot_processor = AsyncBotProcessor(
            max_concurrent_bots=config.get('max_concurrent_bots', 5)
        )
        self.signal_processor = AsyncSignalProcessor(
            max_concurrent_signals=config.get('max_concurrent_signals', 10)
        )
        self.data_saver = AsyncDataSaver(
            max_concurrent_saves=config.get('max_concurrent_saves', 3)
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.last_update = 0
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
        self.is_running = True
        logger.info("[ASYNC_MAIN] üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            asyncio.create_task(self._rsi_update_loop()),
            asyncio.create_task(self._bot_processing_loop()),
            asyncio.create_task(self._signal_processing_loop()),
            asyncio.create_task(self._data_saving_loop()),
            asyncio.create_task(self._position_sync_loop())
        ]
        
        try:
            await asyncio.gather(*tasks)
        except Exception as e:
            logger.error(f"[ASYNC_MAIN] –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            self.is_running = False
    
    async def _rsi_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                await asyncio.sleep(self.config.get('rsi_update_interval', 1800))
                await self._update_rsi_data()
            except Exception as e:
                logger.error(f"[ASYNC_MAIN] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ RSI: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    async def _bot_processing_loop(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–≤"""
        while self.is_running:
            try:
                await asyncio.sleep(self.config.get('bot_processing_interval', 30))
                await self._process_bots()
            except Exception as e:
                logger.error(f"[ASYNC_MAIN] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–æ–≤: {e}")
                await asyncio.sleep(30)
    
    async def _signal_processing_loop(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        while self.is_running:
            try:
                await asyncio.sleep(self.config.get('signal_processing_interval', 10))
                await self._process_signals()
            except Exception as e:
                logger.error(f"[ASYNC_MAIN] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
                await asyncio.sleep(10)
    
    async def _data_saving_loop(self):
        """–¶–∏–∫–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                await asyncio.sleep(self.config.get('data_saving_interval', 30))
                await self._save_data()
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º maturity –¥–∞–Ω–Ω—ã–µ
                await self._save_maturity_data()
            except Exception as e:
                logger.error(f"[ASYNC_MAIN] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                await asyncio.sleep(30)
    
    async def _position_sync_loop(self):
        """–¶–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π"""
        while self.is_running:
            try:
                await asyncio.sleep(self.config.get('position_sync_interval', 60))  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await self._sync_positions()
            except Exception as e:
                logger.error(f"[ASYNC_MAIN] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
                await asyncio.sleep(60)
    
    async def _save_maturity_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç maturity –¥–∞–Ω–Ω—ã–µ"""
        try:
            from bots import save_mature_coins_storage
            save_mature_coins_storage()
            logger.debug("[ASYNC_MAIN] üíæ Maturity –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"[ASYNC_MAIN] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è maturity –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def _update_rsi_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç RSI –¥–∞–Ω–Ω—ã–µ"""
        logger.info("[ASYNC_MAIN] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ RSI –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
        pairs = self.exchange.get_all_pairs()
        if not pairs:
            logger.error("[ASYNC_MAIN] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º RSI –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å maturity –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        async with self.rsi_loader as loader:
            rsi_data = await loader.load_batch_rsi_async(pairs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ RSI
        try:
            from bots import coins_rsi_data, rsi_data_lock
            with rsi_data_lock:
                coins_rsi_data['coins'] = rsi_data
                coins_rsi_data['last_update'] = time.time()
                coins_rsi_data['update_in_progress'] = False
            logger.info(f"[ASYNC_MAIN] ‚úÖ RSI –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫—ç—à–µ: {len(rsi_data)} –º–æ–Ω–µ—Ç")
        except Exception as e:
            logger.error(f"[ASYNC_MAIN] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ RSI: {e}")
        
        self.last_update = time.time()
    
    async def _process_bots(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ—Ç–æ–≤"""
        # ‚úÖ –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
            # –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ bots_data –≤ —Ç–æ–º –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–µ
            pass
            
        except Exception as e:
            logger.error(f"[ASYNC_MAIN] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–≤: {e}")
            import traceback
            logger.error(f"[ASYNC_MAIN] ‚ùå Traceback: {traceback.format_exc()}")
    
    async def _process_signals(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"""
        # ‚úÖ –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã
        
        # –ó–¥–µ—Å—å –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        symbols = []
        
        if symbols:
            # –ü–æ–ª—É—á–∞–µ–º RSI –¥–∞–Ω–Ω—ã–µ
            rsi_data = {}  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ RSI –¥–∞–Ω–Ω—ã–µ
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            results = await self.signal_processor.process_signals_batch_async(symbols, rsi_data)
            logger.info(f"[ASYNC_MAIN] ‚úÖ –°–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    async def _sync_positions(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π"""
        logger.info("[ASYNC_MAIN] üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–µ–π")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            from bots import sync_bots_with_exchange
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as executor:
                result = await loop.run_in_executor(executor, sync_bots_with_exchange)
                
            if result:
                logger.info("[ASYNC_MAIN] ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("[ASYNC_MAIN] ‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                
        except Exception as e:
            logger.error(f"[ASYNC_MAIN] ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        # ‚úÖ –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã
        
        # –ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        data = {
            'timestamp': time.time(),
            'last_update': self.last_update
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        success = await self.data_saver.save_data_async(data, 'data/async_state.json')
        # ‚úÖ –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)
        if not success:
            logger.error("[ASYNC_MAIN] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
        self.is_running = False
        logger.info("[ASYNC_MAIN] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
