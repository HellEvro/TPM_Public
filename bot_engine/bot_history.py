#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–æ–≤: –∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, —Å–∏–≥–Ω–∞–ª—ã, –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
"""

import os
import json
import threading
from datetime import datetime
from typing import List, Dict, Optional, Any
import logging

logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
HISTORY_FILE = 'data/bot_history.json'

# –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
ACTION_TYPES = {
    'BOT_START': '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
    'BOT_STOP': '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞',
    'SIGNAL': '–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª',
    'POSITION_OPENED': '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏',
    'POSITION_CLOSED': '–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏',
    'STOP_LOSS': '–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ Stop Loss',
    'TAKE_PROFIT': '–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ Take Profit',
    'TRAILING_STOP': '–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ Trailing Stop',
    'ERROR': '–û—à–∏–±–∫–∞ –±–æ—Ç–∞'
}


class BotHistoryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–æ—Ç–æ–≤"""
    
    def __init__(self, history_file: str = HISTORY_FILE):
        self.history_file = history_file
        self.lock = threading.Lock()
        self.history = []
        self.trades = []
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('data', exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ñ–∞–π–ª–∞
        self._load_history()
    
    def _load_history(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.history_file):
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.history = data.get('history', [])
                    self.trades = data.get('trades', [])
                    logger.info(f"[BOT_HISTORY] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(self.history)} –¥–µ–π—Å—Ç–≤–∏–π, {len(self.trades)} —Å–¥–µ–ª–æ–∫")
            else:
                logger.info("[BOT_HISTORY] üìù –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
                self.history = []
                self.trades = []
        except Exception as e:
            logger.error(f"[BOT_HISTORY] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            self.history = []
            self.trades = []
    
    def _save_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with self.lock:
                data = {
                    'history': self.history,
                    'trades': self.trades,
                    'last_update': datetime.now().isoformat()
                }
                with open(self.history_file, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"[BOT_HISTORY] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def _add_history_entry(self, entry: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        with self.lock:
            self.history.append(entry)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10000 –∑–∞–ø–∏—Å–µ–π)
            if len(self.history) > 10000:
                self.history = self.history[-10000:]
        self._save_history()
    
    def _add_trade_entry(self, trade: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Å–¥–µ–ª–∫–µ"""
        with self.lock:
            self.trades.append(trade)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5000 —Å–¥–µ–ª–æ–∫)
            if len(self.trades) > 5000:
                self.trades = self.trades[-5000:]
        self._save_history()
    
    # ==================== –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ====================
    
    def log_bot_start(self, bot_id: str, symbol: str, direction: str, config: Dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        entry = {
            'id': f"start_{bot_id}_{datetime.now().timestamp()}",
            'timestamp': datetime.now().isoformat(),
            'action_type': 'BOT_START',
            'action_name': ACTION_TYPES['BOT_START'],
            'bot_id': bot_id,
            'symbol': symbol,
            'direction': direction,  # LONG –∏–ª–∏ SHORT
            'config': config or {},
            'details': f"–ó–∞–ø—É—â–µ–Ω –±–æ—Ç {direction} –¥–ª—è {symbol}"
        }
        self._add_history_entry(entry)
        logger.info(f"[BOT_HISTORY] üöÄ {entry['details']}")
    
    def log_bot_stop(self, bot_id: str, symbol: str, reason: str = None, pnl: float = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        entry = {
            'id': f"stop_{bot_id}_{datetime.now().timestamp()}",
            'timestamp': datetime.now().isoformat(),
            'action_type': 'BOT_STOP',
            'action_name': ACTION_TYPES['BOT_STOP'],
            'bot_id': bot_id,
            'symbol': symbol,
            'reason': reason or '–†—É—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞',
            'pnl': pnl,
            'details': f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–æ—Ç –¥–ª—è {symbol}: {reason or '–†—É—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞'}"
        }
        if pnl is not None:
            entry['details'] += f" (PnL: {pnl:.2f} USDT)"
        
        self._add_history_entry(entry)
        logger.info(f"[BOT_HISTORY] üõë {entry['details']}")
    
    def log_bot_signal(self, symbol: str, signal_type: str, rsi: float, price: float, details: Dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        entry = {
            'id': f"signal_{symbol}_{datetime.now().timestamp()}",
            'timestamp': datetime.now().isoformat(),
            'action_type': 'SIGNAL',
            'action_name': ACTION_TYPES['SIGNAL'],
            'symbol': symbol,
            'signal_type': signal_type,  # ENTER_LONG, ENTER_SHORT, EXIT
            'rsi': rsi,
            'price': price,
            'details_data': details or {},
            'details': f"–°–∏–≥–Ω–∞–ª {signal_type} –¥–ª—è {symbol} (RSI: {rsi:.2f}, —Ü–µ–Ω–∞: {price:.2f})"
        }
        self._add_history_entry(entry)
        logger.info(f"[BOT_HISTORY] üìä {entry['details']}")
    
    def log_position_opened(self, bot_id: str, symbol: str, direction: str, size: float, 
                           entry_price: float, stop_loss: float = None, take_profit: float = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        entry = {
            'id': f"open_{bot_id}_{datetime.now().timestamp()}",
            'timestamp': datetime.now().isoformat(),
            'action_type': 'POSITION_OPENED',
            'action_name': ACTION_TYPES['POSITION_OPENED'],
            'bot_id': bot_id,
            'symbol': symbol,
            'direction': direction,
            'size': size,
            'entry_price': entry_price,
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'details': f"–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {direction} –¥–ª—è {symbol}: —Ä–∞–∑–º–µ—Ä {size}, —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ {entry_price:.4f}"
        }
        self._add_history_entry(entry)
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–¥–µ–ª–∫–∏
        trade = {
            'id': f"trade_{bot_id}_{datetime.now().timestamp()}",
            'timestamp': datetime.now().isoformat(),
            'bot_id': bot_id,
            'symbol': symbol,
            'direction': direction,
            'size': size,
            'entry_price': entry_price,
            'exit_price': None,
            'pnl': None,
            'status': 'OPEN'
        }
        self._add_trade_entry(trade)
        
        logger.info(f"[BOT_HISTORY] üìà {entry['details']}")
    
    def log_position_closed(self, bot_id: str, symbol: str, direction: str, exit_price: float, 
                           pnl: float, roi: float, reason: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        entry = {
            'id': f"close_{bot_id}_{datetime.now().timestamp()}",
            'timestamp': datetime.now().isoformat(),
            'action_type': 'POSITION_CLOSED',
            'action_name': ACTION_TYPES['POSITION_CLOSED'],
            'bot_id': bot_id,
            'symbol': symbol,
            'direction': direction,
            'exit_price': exit_price,
            'pnl': pnl,
            'roi': roi,
            'reason': reason or '–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ',
            'details': f"–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {direction} –¥–ª—è {symbol}: —Ü–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ {exit_price:.4f}, PnL: {pnl:.2f} USDT ({roi:.2f}%)"
        }
        self._add_history_entry(entry)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
        with self.lock:
            for trade in reversed(self.trades):
                if trade['bot_id'] == bot_id and trade['symbol'] == symbol and trade['status'] == 'OPEN':
                    trade['exit_price'] = exit_price
                    trade['pnl'] = pnl
                    trade['roi'] = roi
                    trade['status'] = 'CLOSED'
                    trade['close_timestamp'] = datetime.now().isoformat()
                    trade['close_reason'] = reason
                    break
        self._save_history()
        
        logger.info(f"[BOT_HISTORY] üí∞ {entry['details']}")
    
    # ==================== –ú–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ====================
    
    def get_bot_history(self, symbol: Optional[str] = None, action_type: Optional[str] = None, 
                       limit: int = 100) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–æ–≤
        
        Args:
            symbol: –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (BOT_START, BOT_STOP, SIGNAL –∏ —Ç.–¥.)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        """
        with self.lock:
            filtered = self.history.copy()
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª—É
            if symbol:
                filtered = [h for h in filtered if h.get('symbol') == symbol]
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è
            if action_type:
                filtered = [h for h in filtered if h.get('action_type') == action_type]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
            filtered.sort(key=lambda x: x['timestamp'], reverse=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            return filtered[:limit]
    
    def get_bot_trades(self, symbol: Optional[str] = None, trade_type: Optional[str] = None,
                      limit: int = 100) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
        
        Args:
            symbol: –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª—É
            trade_type: –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (LONG/SHORT)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        """
        with self.lock:
            filtered = self.trades.copy()
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª—É
            if symbol:
                filtered = [t for t in filtered if t.get('symbol') == symbol]
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å–¥–µ–ª–∫–∏
            if trade_type:
                filtered = [t for t in filtered if t.get('direction') == trade_type]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
            filtered.sort(key=lambda x: x['timestamp'], reverse=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            return filtered[:limit]
    
    def get_bot_statistics(self, symbol: Optional[str] = None) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç–∞–º
        
        Args:
            symbol: –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª—É (–µ—Å–ª–∏ None - –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        with self.lock:
            trades = self.trades.copy()
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª—É
            if symbol:
                trades = [t for t in trades if t.get('symbol') == symbol]
            
            # –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
            closed_trades = [t for t in trades if t.get('status') == 'CLOSED']
            
            if not closed_trades:
                return {
                    'total_trades': 0,
                    'profitable_trades': 0,
                    'losing_trades': 0,
                    'win_rate': 0,
                    'total_pnl': 0,
                    'avg_pnl': 0,
                    'best_trade': None,
                    'worst_trade': None
                }
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            profitable = [t for t in closed_trades if t.get('pnl', 0) > 0]
            losing = [t for t in closed_trades if t.get('pnl', 0) < 0]
            
            total_pnl = sum(t.get('pnl', 0) for t in closed_trades)
            avg_pnl = total_pnl / len(closed_trades) if closed_trades else 0
            
            # –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è —Å–¥–µ–ª–∫–∏
            best_trade = max(closed_trades, key=lambda x: x.get('pnl', 0)) if closed_trades else None
            worst_trade = min(closed_trades, key=lambda x: x.get('pnl', 0)) if closed_trades else None
            
            return {
                'total_trades': len(closed_trades),
                'profitable_trades': len(profitable),
                'losing_trades': len(losing),
                'win_rate': (len(profitable) / len(closed_trades) * 100) if closed_trades else 0,
                'total_pnl': total_pnl,
                'avg_pnl': avg_pnl,
                'best_trade': best_trade,
                'worst_trade': worst_trade,
                'symbol': symbol if symbol else 'ALL'
            }
    
    def clear_history(self, symbol: Optional[str] = None):
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é
        
        Args:
            symbol: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –∏–Ω–∞—á–µ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        """
        with self.lock:
            if symbol:
                self.history = [h for h in self.history if h.get('symbol') != symbol]
                self.trades = [t for t in self.trades if t.get('symbol') != symbol]
                logger.info(f"[BOT_HISTORY] üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è {symbol}")
            else:
                self.history = []
                self.trades = []
                logger.info("[BOT_HISTORY] üóëÔ∏è –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
        
        self._save_history()


# ==================== –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ====================

bot_history_manager = BotHistoryManager()


# ==================== –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ====================

def log_bot_start(bot_id: str, symbol: str, direction: str, config: Dict = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot_history_manager.log_bot_start(bot_id, symbol, direction, config)


def log_bot_stop(bot_id: str, symbol: str, reason: str = None, pnl: float = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    bot_history_manager.log_bot_stop(bot_id, symbol, reason, pnl)


def log_bot_signal(symbol: str, signal_type: str, rsi: float, price: float, details: Dict = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    bot_history_manager.log_bot_signal(symbol, signal_type, rsi, price, details)


def log_position_opened(bot_id: str, symbol: str, direction: str, size: float, 
                       entry_price: float, stop_loss: float = None, take_profit: float = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    bot_history_manager.log_position_opened(bot_id, symbol, direction, size, entry_price, 
                                           stop_loss, take_profit)


def log_position_closed(bot_id: str, symbol: str, direction: str, exit_price: float, 
                       pnl: float, roi: float, reason: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    bot_history_manager.log_position_closed(bot_id, symbol, direction, exit_price, 
                                           pnl, roi, reason)


# ==================== –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ ====================

def create_demo_data() -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        import random
        from datetime import timedelta
        
        symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']
        
        logger.info("[BOT_HISTORY] üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...")
        
        for i in range(20):
            symbol = random.choice(symbols)
            direction = random.choice(['LONG', 'SHORT'])
            bot_id = f"demo_bot_{i}"
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            log_bot_start(bot_id, symbol, direction, {'mode': 'demo'})
            
            # –°–∏–≥–Ω–∞–ª
            rsi = random.uniform(25, 75)
            price = random.uniform(1000, 50000)
            log_bot_signal(symbol, f"ENTER_{direction}", rsi, price)
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            entry_price = price
            size = random.uniform(0.001, 0.1)
            log_position_opened(bot_id, symbol, direction, size, entry_price)
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (80% —Å–¥–µ–ª–æ–∫)
            if random.random() < 0.8:
                exit_price = entry_price * random.uniform(0.95, 1.10)
                pnl = (exit_price - entry_price) * size if direction == 'LONG' else (entry_price - exit_price) * size
                roi = ((exit_price - entry_price) / entry_price * 100) if direction == 'LONG' else ((entry_price - exit_price) / entry_price * 100)
                
                log_position_closed(bot_id, symbol, direction, exit_price, pnl, roi, 
                                  random.choice(['Stop Loss', 'Take Profit', '–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ']))
                
                log_bot_stop(bot_id, symbol, '–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞', pnl)
        
        logger.info("[BOT_HISTORY] ‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"[BOT_HISTORY] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


if __name__ == '__main__':
    # –¢–µ—Å—Ç –º–æ–¥—É–ª—è
    print("=== Test modula bot_history.py ===\n")
    
    # –û—á–∏—Å—Ç–∫–∞
    bot_history_manager.clear_history()
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    create_demo_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = bot_history_manager.get_bot_statistics()
    print(f"\n[STATISTIKA]")
    print(f"  Vsego sdelok: {stats['total_trades']}")
    print(f"  Pribylnyh: {stats['profitable_trades']}")
    print(f"  Ubytochnyh: {stats['losing_trades']}")
    print(f"  Win Rate: {stats['win_rate']:.2f}%")
    print(f"  Obschiy PnL: {stats['total_pnl']:.2f} USDT")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    history = bot_history_manager.get_bot_history(limit=5)
    print(f"\n[POSLEDNIE 5 DEYSTVIY]:")
    for h in history:
        print(f"  [{h['timestamp']}] {h['action_name']}: {h.get('symbol', 'N/A')}")

