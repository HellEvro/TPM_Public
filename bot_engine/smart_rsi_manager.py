"""
–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI
–û–±–Ω–æ–≤–ª—è–µ—Ç RSI —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –Ω–æ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–≤–µ—á–∏ 6H
"""

import time
import threading
import logging
from datetime import datetime, timezone
from typing import Dict, Optional, Callable
from bot_engine.bot_config import SystemConfig

logger = logging.getLogger('SmartRSIManager')

class SmartRSIManager:
    """–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–≤–µ—á–∏"""
    
    def __init__(self, rsi_update_callback: Callable, trading_signal_callback: Optional[Callable] = None, exchange_obj=None):
        """
        Args:
            rsi_update_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI –¥–∞–Ω–Ω—ã—Ö
            trading_signal_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            exchange_obj: –û–±—ä–µ–∫—Ç –±–∏—Ä–∂–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback
        """
        self.rsi_update_callback = rsi_update_callback
        self.trading_signal_callback = trading_signal_callback
        self.exchange_obj = exchange_obj
        self.shutdown_flag = threading.Event()
        self.last_update_time = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI 
        self.monitoring_interval = 300  # 5 –º–∏–Ω—É—Ç (–ø–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        self.candle_close_tolerance = 600  # 10 –º–∏–Ω—É—Ç –¥–æ–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ (–¥–ª—è —É—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–µ–∫)
        
        self.processed_candles = set()  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ timestamp)
        
        logger.info(f"[SMART_RSI] üß† –£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä RSI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"[SMART_RSI] üìä –ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {self.monitoring_interval//60} –º–∏–Ω—É—Ç")
        logger.info(f"[SMART_RSI] üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ 6H")
        logger.info(f"[SMART_RSI] ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–µ—Ç —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ API, —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    def get_next_6h_candle_close(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç timestamp —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ 6H"""
        current_time = int(time.time())
        
        # –°–≤–µ—á–∏ 6H –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤: 00:00, 06:00, 12:00, 18:00 UTC
        current_dt = datetime.fromtimestamp(current_time, tz=timezone.utc)
        current_hour = current_dt.hour
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
        next_closes = [0, 6, 12, 18]
        next_close_hour = None
        
        for close_hour in next_closes:
            if close_hour > current_hour:
                next_close_hour = close_hour
                break
        
        if next_close_hour is None:
            # –ï—Å–ª–∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ –ø—Ä–æ—à–ª–∏, –±–µ—Ä–µ–º 00:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            next_close_hour = 24
        
        # –°–æ–∑–¥–∞–µ–º datetime –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        next_close_dt = current_dt.replace(
            hour=next_close_hour % 24, 
            minute=0, 
            second=0, 
            microsecond=0
        )
        
        if next_close_hour == 24:
            next_close_dt = next_close_dt.replace(day=next_close_dt.day + 1, hour=0)
        
        return int(next_close_dt.timestamp())
    
    def get_time_to_candle_close(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ 6H"""
        next_close = self.get_next_6h_candle_close()
        current_time = int(time.time())
        return max(0, next_close - current_time)
    
    def get_last_6h_candle_close(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ 6H"""
        current_time = int(time.time())
        next_close = self.get_next_6h_candle_close()
        return next_close - (6 * 3600)  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ 6H –Ω–∞–∑–∞–¥
    

    
    def should_update_rsi(self) -> tuple[bool, str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å RSI –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        current_time = int(time.time())
        time_since_last_update = current_time - self.last_update_time
        
        # 1. –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if self.last_update_time == 0:
            return True, "–ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
        
        # 2. –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if time_since_last_update >= self.monitoring_interval:
            return True, f"—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ({time_since_last_update//60}–º –ø—Ä–æ—à–ª–æ)"
        
        return False, f"–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (—Å–ª–µ–¥—É—é—â–µ–µ —á–µ—Ä–µ–∑ {self.monitoring_interval - time_since_last_update}—Å)"
    
    def should_process_trading_signals_after_update(self) -> tuple[bool, str, int]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI
        –í–°–ï–ì–î–ê –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã - —É–±–∏—Ä–∞–µ–º –≥–ª—É–ø–æ–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏!
        """
        current_time = int(time.time())
        last_candle_close = self.get_last_6h_candle_close()
        
        # –í–°–ï–ì–î–ê –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã!
        # –£–±–∏—Ä–∞–µ–º –≥–ª—É–ø–æ–µ —É—Å–ª–æ–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
        return True, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞ –≤—Å–µ–≥–¥–∞", last_candle_close
    
    def check_significant_price_changes(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ–∏–∑–æ—à–ª–∏ –ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∏–∫–µ—Ä–æ–≤
        """
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ —Ç–∏–∫–µ—Ä—ã
        return False
    
    def get_next_update_time(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI"""
        return self.last_update_time + self.monitoring_interval
    

    
    def update_rsi_data(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ RSI –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            self.last_update_time = int(time.time())
            
            # ‚ö° –ë–´–°–¢–†–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–∑–∏–º –¢–û–õ–¨–ö–û —Å–≤–µ—á–∏
            logger.info(f"[SMART_RSI] üöÄ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π...")
            from bots_modules.filters import load_all_coins_candles_fast
            if load_all_coins_candles_fast():
                logger.info(f"[SMART_RSI] ‚úÖ –°–≤–µ—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã...")
                # –ü–æ—Ç–æ–º –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏ (–æ–Ω–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à —Å–≤–µ—á–µ–π)
                self.rsi_update_callback()
            else:
                logger.error(f"[SMART_RSI] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏")
            
            time_to_close = self.get_time_to_candle_close()
            hours = time_to_close // 3600
            minutes = (time_to_close % 3600) // 60
            
            if hours > 0:
                time_str = f"{hours}—á {minutes}–º"
            else:
                time_str = f"{minutes}–º"
                
            logger.info(f"[SMART_RSI] ‚úÖ RSI –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã | –î–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ 6H: {time_str}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            should_trade, trade_reason, candle_timestamp = self.should_process_trading_signals_after_update()
            if should_trade:
                logger.info("=" * 80)
                logger.info(f"[SMART_RSI] üéØ –û–ë–ù–ê–†–£–ñ–ï–ù–û –ó–ê–ö–†–´–¢–ò–ï –°–í–ï–ß–ò 6H! ({trade_reason})")
                logger.info(f"[SMART_RSI] üö® –ê–ö–¢–ò–í–ê–¶–ò–Ø –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í - –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô –í–•–û–î–ê/–í–´–•–û–î–ê")
                logger.info("=" * 80)
                
                # –ü–æ–º–µ—á–∞–µ–º —Å–≤–µ—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                self.processed_candles.add(candle_timestamp)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å callback –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
                if self.trading_signal_callback:
                    self.trading_signal_callback(candle_timestamp, exchange_obj=self.exchange_obj)
                else:
                    logger.warning(f"[SMART_RSI] ‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤—ã–π callback –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
                if len(self.processed_candles) > 10:
                    oldest_candles = sorted(self.processed_candles)[:-10]
                    for old_candle in oldest_candles:
                        self.processed_candles.remove(old_candle)
            else:
                logger.debug(f"[SMART_RSI] üí§ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è: {trade_reason}")
            
        except Exception as e:
            logger.error(f"[SMART_RSI] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI: {e}")
    

    
    def run_smart_worker(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # ‚ö° –ê–ö–¢–ò–í–ò–†–£–ï–ú –¢–†–ï–ô–°–ò–ù–ì –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if SystemConfig.ENABLE_CODE_TRACING:
            try:
                from trace_debug import enable_trace
                enable_trace()
                logger.info("[SMART_RSI] üîç –¢—Ä–µ–π—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ—Ç–æ–∫–µ Smart RSI")
            except:
                pass
        
        logger.info("=" * 80)
        logger.info("[SMART_RSI] üöÄ –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ RSI")
        logger.info("[SMART_RSI] üìä –†–µ–∂–∏–º: –ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç")
        logger.info("[SMART_RSI] üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ 6H")
        logger.info("[SMART_RSI] ‚ö° –ù–µ—Ç —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ API - —Ç–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        logger.info("=" * 80)
        
        # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        logger.info("[SMART_RSI] üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ RSI...")
        self.update_rsi_data()
        logger.info("[SMART_RSI] ‚úÖ –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ RSI –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        while not self.shutdown_flag.is_set():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RSI
                should_update, update_reason = self.should_update_rsi()
                if should_update:
                    logger.info(f"[SMART_RSI] üìä –í—Ä–µ–º—è –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_reason}")
                    self.update_rsi_data()
                
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤–º–µ—Å—Ç–æ –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã)
                if self.shutdown_flag.wait(300):  # 5 –º–∏–Ω—É—Ç
                    break
                    
            except Exception as e:
                logger.error(f"[SMART_RSI] ‚ùå –û—à–∏–±–∫–∞ –≤ —É–º–Ω–æ–º –≤–æ—Ä–∫–µ—Ä–µ: {e}")
                if self.shutdown_flag.wait(30):
                    break
        
        logger.info("[SMART_RSI] üõë –£–º–Ω—ã–π –≤–æ—Ä–∫–µ—Ä RSI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–º–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.worker_thread = threading.Thread(target=self.run_smart_worker, daemon=True)
        self.worker_thread.start()
        logger.info("[SMART_RSI] üéØ –£–º–Ω—ã–π –≤–æ—Ä–∫–µ—Ä RSI –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–º–Ω—ã–π –≤–æ—Ä–∫–µ—Ä"""
        logger.info("[SMART_RSI] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–º–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ RSI...")
        self.shutdown_flag.set()
        
        if hasattr(self, 'worker_thread'):
            self.worker_thread.join(timeout=5)
        
        logger.info("[SMART_RSI] ‚úÖ –£–º–Ω—ã–π –≤–æ—Ä–∫–µ—Ä RSI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def update_monitoring_interval(self, new_interval: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ RSI"""
        old_interval = self.monitoring_interval
        self.monitoring_interval = new_interval
        logger.info(f"[SMART_RSI] üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {old_interval}—Å ‚Üí {new_interval}—Å")
        logger.info(f"[SMART_RSI] üìä –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {new_interval//60} –º–∏–Ω—É—Ç")

    def get_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        current_time = int(time.time())
        time_to_close = self.get_time_to_candle_close()
        next_update = self.get_next_update_time()
        last_candle_close = self.get_last_6h_candle_close()
        
        return {
            'monitoring_interval': self.monitoring_interval,
            'time_to_candle_close': time_to_close,
            'time_to_candle_close_formatted': f"{time_to_close//3600}—á {(time_to_close%3600)//60}–º {time_to_close%60}—Å",
            'last_rsi_update': self.last_update_time,
            'last_rsi_update_ago': current_time - self.last_update_time if self.last_update_time > 0 else 0,
            'next_rsi_update': next_update,
            'next_rsi_update_in': max(0, next_update - current_time),
            'last_candle_close': last_candle_close,
            'processed_candles_count': len(self.processed_candles),
            'is_active': not self.shutdown_flag.is_set(),
            'trading_callback_enabled': self.trading_signal_callback is not None
        }
