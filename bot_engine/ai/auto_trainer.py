"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–µ—Ä –ò–ò –º–æ–¥–µ–ª–µ–π

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤–º–µ—Å—Ç–µ —Å –±–æ—Ç–æ–º.
"""

import logging
import threading
import time
import subprocess
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional
from bot_engine.bot_config import AIConfig

logger = logging.getLogger('AI.AutoTrainer')


class AutoTrainer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è –ò–ò –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.running = False
        self.thread = None
        self.last_data_update = None
        self.last_training = None
        
        # –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
        self.scripts_dir = Path('scripts/ai')
        self.collect_script = self.scripts_dir / 'collect_historical_data.py'
        self.train_anomaly_script = self.scripts_dir / 'train_anomaly_on_real_data.py'
        self.train_lstm_script = self.scripts_dir / 'train_lstm_predictor.py'
        self.train_pattern_script = self.scripts_dir / 'train_pattern_detector.py'
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        if self.running:
            logger.warning("[AutoTrainer] –£–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.running = True
        self.thread = threading.Thread(target=self._run, daemon=True, name="AI_AutoTrainer")
        self.thread.start()
        
        logger.info("[AutoTrainer] ‚úÖ –ó–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        logger.info(f"[AutoTrainer] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        logger.info(f"[AutoTrainer]   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–µ {AIConfig.AI_DATA_UPDATE_INTERVAL/3600:.0f}—á")
        logger.info(f"[AutoTrainer]   - –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {AIConfig.AI_RETRAIN_INTERVAL/3600:.0f}—á")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–µ—Ä"""
        if not self.running:
            return
        
        logger.info("[AutoTrainer] –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        self.running = False
        
        if self.thread:
            self.thread.join(timeout=5)
        
        logger.info("[AutoTrainer] ‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞"""
        logger.info("[AutoTrainer] üîÑ –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self._check_initial_training()
        
        while self.running:
            try:
                current_time = time.time()
                
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                data_updated = False
                if self._should_update_data(current_time):
                    data_updated = self._update_data()
                
                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å
                # –í–ê–ñ–ù–û: –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ù–ï –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
                if self._should_retrain(current_time):
                    if not data_updated or data_updated == True:  # –î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
                        self._retrain()
                    else:
                        logger.warning("[AutoTrainer] ‚ö†Ô∏è –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                
                # –°–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
                time.sleep(600)
                
            except KeyboardInterrupt:
                logger.info("[AutoTrainer] ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
                self.running = False
                break
            except Exception as e:
                logger.error(f"[AutoTrainer] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                time.sleep(60)
        
        logger.info("[AutoTrainer] üõë Auto Trainer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _check_initial_training(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
        model_path = Path(AIConfig.AI_ANOMALY_MODEL_PATH)
        
        if not model_path.exists():
            logger.warning("[AutoTrainer] ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
            
            if AIConfig.AI_AUTO_TRAIN_ON_STARTUP:
                logger.info("[AutoTrainer] üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ...")
                self._initial_setup()
        else:
            logger.info("[AutoTrainer] ‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    def _initial_setup(self):
        """–ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ"""
        logger.info("[AutoTrainer] –ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞...")
        
        # 1. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info("[AutoTrainer] –®–∞–≥ 1/2: –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        success = self._update_data(initial=True)
        
        if not success:
            logger.error("[AutoTrainer] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # 2. –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        logger.info("[AutoTrainer] –®–∞–≥ 2/2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        success = self._retrain()
        
        if success:
            logger.info("[AutoTrainer] ‚úÖ –ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            logger.error("[AutoTrainer] ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    
    def _should_update_data(self, current_time: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"""
        if not AIConfig.AI_AUTO_UPDATE_DATA:
            return False
        
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å)
        if self.last_data_update is None:
            self.last_data_update = current_time  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            return False
        
        elapsed = current_time - self.last_data_update
        return elapsed >= AIConfig.AI_DATA_UPDATE_INTERVAL
    
    def _should_retrain(self, current_time: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"""
        if not AIConfig.AI_AUTO_RETRAIN:
            return False
        
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ù–ï –ø–µ—Ä–µ–æ–±—É—á–∞–µ–º —Å—Ä–∞–∑—É (–º–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞)
        if self.last_training is None:
            self.last_training = current_time  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            return False
        
        elapsed = current_time - self.last_training
        return elapsed >= AIConfig.AI_RETRAIN_INTERVAL
    
    def _update_data(self, initial: bool = False) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            initial: True –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("[AutoTrainer] üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            if initial:
                # –ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - —Å–æ–±–∏—Ä–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
                limit = AIConfig.AI_INITIAL_COINS_COUNT
                days = 730  # 2 –≥–æ–¥–∞ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            else:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                limit = AIConfig.AI_UPDATE_COINS_COUNT
                days = 30  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            cmd = [
                sys.executable,
                str(self.collect_script),
                '--days', str(days)
            ]
            
            # –ï—Å–ª–∏ limit=0, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã (—Ñ–ª–∞–≥ --all)
            if limit == 0:
                cmd.append('--all')
                logger.info("[AutoTrainer] –†–µ–∂–∏–º: –í–°–ï –º–æ–Ω–µ—Ç—ã —Å –±–∏—Ä–∂–∏")
            else:
                cmd.extend(['--limit', str(limit)])
                logger.info(f"[AutoTrainer] –†–µ–∂–∏–º: –¢–æ–ø {limit} –º–æ–Ω–µ—Ç")
            
            logger.info(f"[AutoTrainer] –ó–∞–ø—É—Å–∫: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=3600  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                logger.info("[AutoTrainer] ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                self.last_data_update = time.time()
                return True
            else:
                logger.error(f"[AutoTrainer] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {result.stderr}")
                return False
        
        except subprocess.TimeoutExpired:
            logger.error("[AutoTrainer] ‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return False
        except KeyboardInterrupt:
            logger.warning("[AutoTrainer] ‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Auto Trainer
            self.running = False
            return False
        except Exception as e:
            logger.error(f"[AutoTrainer] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _retrain(self) -> bool:
        """
        –ü–µ—Ä–µ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("[AutoTrainer] üß† –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
            
            all_success = True
            
            # 1. –û–±—É—á–∞–µ–º Anomaly Detector
            if AIConfig.AI_ANOMALY_DETECTION_ENABLED:
                logger.info("[AutoTrainer] üìä –û–±—É—á–µ–Ω–∏–µ Anomaly Detector...")
                success = self._train_model(
                    self.train_anomaly_script,
                    "Anomaly Detector",
                    timeout=600
                )
                if not success:
                    all_success = False
            
            # 2. –û–±—É—á–∞–µ–º LSTM Predictor
            if AIConfig.AI_LSTM_ENABLED:
                logger.info("[AutoTrainer] üß† –û–±—É—á–µ–Ω–∏–µ LSTM Predictor...")
                success = self._train_model(
                    self.train_lstm_script,
                    "LSTM Predictor",
                    timeout=1800,  # 30 –º–∏–Ω—É—Ç –¥–ª—è LSTM
                    args=['--coins', '0', '--epochs', '50']
                )
                if not success:
                    all_success = False
            
            # 3. –û–±—É—á–∞–µ–º Pattern Detector
            if AIConfig.AI_PATTERN_ENABLED:
                logger.info("[AutoTrainer] üìä –û–±—É—á–µ–Ω–∏–µ Pattern Detector...")
                success = self._train_model(
                    self.train_pattern_script,
                    "Pattern Detector",
                    timeout=600,
                    args=['--coins', '0']
                )
                if not success:
                    all_success = False
            
            if all_success:
                logger.info("[AutoTrainer] ‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã")
                self.last_training = time.time()
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –≤ AI Manager
                self._reload_models()
                
                return True
            else:
                logger.warning("[AutoTrainer] ‚ö†Ô∏è –ù–µ –≤—Å–µ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                return False
        
        except KeyboardInterrupt:
            logger.warning("[AutoTrainer] ‚ö†Ô∏è –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Auto Trainer
            self.running = False
            return False
        except Exception as e:
            logger.error(f"[AutoTrainer] ‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def _train_model(self, script_path: Path, model_name: str, timeout: int = 600, args: list = None) -> bool:
        """
        –û–±—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å
        
        Args:
            script_path: –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –æ–±—É—á–µ–Ω–∏—è
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ª–æ–≥–æ–≤
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            args: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            cmd = [sys.executable, str(script_path)]
            if args:
                cmd.extend([str(arg) for arg in args])
            
            logger.info(f"[AutoTrainer] –ó–∞–ø—É—Å–∫: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=timeout
            )
            
            if result.returncode == 0:
                logger.info(f"[AutoTrainer] ‚úÖ {model_name} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω")
                return True
            else:
                logger.error(f"[AutoTrainer] ‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {model_name}: {result.stderr}")
                return False
        
        except subprocess.TimeoutExpired:
            logger.error(f"[AutoTrainer] ‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ {model_name}")
            return False
        except Exception as e:
            logger.error(f"[AutoTrainer] ‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {model_name}: {e}")
            return False
    
    def _reload_models(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ AI Manager –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            from bot_engine.ai.ai_manager import get_ai_manager
            
            ai_manager = get_ai_manager()
            
            if not ai_manager:
                logger.debug("[AutoTrainer] AI Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # 1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Anomaly Detector
            if ai_manager.anomaly_detector:
                try:
                    model_path = AIConfig.AI_ANOMALY_MODEL_PATH
                    scaler_path = AIConfig.AI_ANOMALY_SCALER_PATH
                    
                    success = ai_manager.anomaly_detector.load_model(model_path, scaler_path)
                    
                    if success:
                        logger.info("[AutoTrainer] ‚úÖ Anomaly Detector –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω (hot reload)")
                    else:
                        logger.error("[AutoTrainer] ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ Anomaly Detector")
                except Exception as e:
                    logger.error(f"[AutoTrainer] –û—à–∏–±–∫–∞ hot reload Anomaly Detector: {e}")
            
            # 2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º LSTM Predictor
            if ai_manager.lstm_predictor:
                try:
                    ai_manager.lstm_predictor.load_model()
                    logger.info("[AutoTrainer] ‚úÖ LSTM Predictor –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω (hot reload)")
                except Exception as e:
                    logger.error(f"[AutoTrainer] –û—à–∏–±–∫–∞ hot reload LSTM Predictor: {e}")
            
            # 3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Pattern Detector
            if ai_manager.pattern_detector:
                try:
                    ai_manager.pattern_detector.load_model()
                    logger.info("[AutoTrainer] ‚úÖ Pattern Detector –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω (hot reload)")
                except Exception as e:
                    logger.error(f"[AutoTrainer] –û—à–∏–±–∫–∞ hot reload Pattern Detector: {e}")
        
        except Exception as e:
            logger.error(f"[AutoTrainer] –û—à–∏–±–∫–∞ hot reload: {e}")
    
    def force_update(self) -> bool:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info("[AutoTrainer] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        
        success = self._update_data()
        if success:
            success = self._retrain()
        
        return success
    
    def get_status(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        """
        return {
            'running': self.running,
            'last_data_update': datetime.fromtimestamp(self.last_data_update).isoformat() if self.last_data_update else None,
            'last_training': datetime.fromtimestamp(self.last_training).isoformat() if self.last_training else None,
            'next_data_update': datetime.fromtimestamp(self.last_data_update + AIConfig.AI_DATA_UPDATE_INTERVAL).isoformat() if self.last_data_update else None,
            'next_training': datetime.fromtimestamp(self.last_training + AIConfig.AI_RETRAIN_INTERVAL).isoformat() if self.last_training else None
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_auto_trainer: Optional[AutoTrainer] = None


def get_auto_trainer() -> AutoTrainer:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä AutoTrainer
    """
    global _auto_trainer
    
    if _auto_trainer is None:
        _auto_trainer = AutoTrainer()
    
    return _auto_trainer


def start_auto_trainer():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–µ—Ä"""
    if AIConfig.AI_AUTO_TRAIN_ENABLED:
        trainer = get_auto_trainer()
        trainer.start()
    else:
        logger.info("[AutoTrainer] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ")


def stop_auto_trainer():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–µ—Ä"""
    global _auto_trainer
    
    if _auto_trainer:
        _auto_trainer.stop()

