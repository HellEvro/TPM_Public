"""
Smart Risk Manager - –ü—Ä–µ–º–∏—É–º-–º–æ–¥—É–ª—å —É–º–Ω–æ–≥–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–ø–∞—Ö (–∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫)
- –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –ø–æ–∑–∏—Ü–∏—é
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SL/TP –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞

–¢–†–ï–ë–£–ï–¢ –ü–†–ï–ú–ò–£–ú –õ–ò–¶–ï–ù–ó–ò–ò!
"""

import logging
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
import json
from pathlib import Path

logger = logging.getLogger('AI.SmartRiskManager')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
try:
    from bot_engine.ai import check_premium_license
    PREMIUM_AVAILABLE = check_premium_license()
except ImportError:
    PREMIUM_AVAILABLE = False


class SmartRiskManager:
    """–£–º–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Å –æ–±—É—á–µ–Ω–∏–µ–º –Ω–∞ —Å—Ç–æ–ø–∞—Ö (Premium —Ç–æ–ª—å–∫–æ!)"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π!)"""
        if not PREMIUM_AVAILABLE:
            raise ImportError(
                "SmartRiskManager —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–º–∏—É–º –ª–∏—Ü–µ–Ω–∑–∏—é. "
                "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: python scripts/activate_premium.py"
            )
        
        self.logger = logger
        self.backtest_cache = {}
        self.stop_patterns = {}
        self.training_data_path = Path('data/ai/training/stops_analysis.json')
        self.feedback_data_path = Path('data/ai/training/feedback')
        self.optimized_params_path = Path('data/ai/training/optimized_params.json')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.training_data_path.parent.mkdir(parents=True, exist_ok=True)
        self.feedback_data_path.mkdir(parents=True, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self._load_stop_patterns()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.optimized_params = {}
        self._load_optimized_params()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ò–ò –º–æ–¥—É–ª–∏
        self._init_ai_modules()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º ML –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è SL/TP
        self._init_ml_model()
        
        logger.info("[SmartRiskManager] ‚úÖ –ü—Ä–µ–º–∏—É–º-–º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def _init_ai_modules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ò–ò –º–æ–¥—É–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            from bot_engine.ai import get_ai_manager
            self.ai_manager = get_ai_manager()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
            self.anomaly_detector = self.ai_manager.anomaly_detector
            self.lstm_predictor = self.ai_manager.lstm_predictor
            self.pattern_detector = self.ai_manager.pattern_detector
            self.risk_manager = self.ai_manager.risk_manager
            
            logger.info("[SmartRiskManager] ü§ñ –ò–ò –º–æ–¥—É–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            self.ai_manager = None
            logger.warning(f"[SmartRiskManager] ‚ö†Ô∏è –ò–ò –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    
    def _init_ml_model(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ML –º–æ–¥–µ–ª—å"""
        try:
            from bot_engine.ai.ml_risk_predictor import MLRiskPredictor
            self.ml_predictor = MLRiskPredictor()
            logger.info("[SmartRiskManager] ü§ñ ML –º–æ–¥–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            self.ml_predictor = None
            logger.warning(f"[SmartRiskManager] ‚ö†Ô∏è ML –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    
    def analyze_stopped_trades(self, limit: int = 100) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–æ–ø—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–æ–ø–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            from bot_engine.bot_history import bot_history_manager
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ø—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            stopped_trades = bot_history_manager.get_stopped_trades(limit)
            
            if not stopped_trades:
                return {
                    'total_stops': 0,
                    'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–ø–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns = self._extract_patterns(stopped_trades)
            common_reasons = self._analyze_reasons(stopped_trades)
            
            # üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º LSTM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω —Å—Ç–æ–ø–æ–≤
            lstm_analysis = self._analyze_stops_with_lstm(stopped_trades)
            
            # üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º Anomaly Detector –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Å—Ç–æ–ø–∞—Ö
            anomaly_analysis = self._analyze_stops_for_anomalies(stopped_trades)
            
            # üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º Risk Manager –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SL/TP
            optimal_sl = self._optimize_stop_loss_with_ai(stopped_trades, patterns)
            optimal_tp = self._optimize_take_profit_with_ai(stopped_trades, patterns)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            self._save_for_training(patterns)
            
            return {
                'total_stops': len(stopped_trades),
                'common_reasons': common_reasons,
                'optimal_sl_percent': optimal_sl,
                'optimal_tp_percent': optimal_tp,
                'patterns': patterns,
                'lstm_analysis': lstm_analysis,
                'anomaly_analysis': anomaly_analysis,
                'recommendations': self._generate_recommendations(stopped_trades)
            }
            
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ–ø–æ–≤: {e}")
            return {
                'total_stops': 0,
                'error': str(e)
            }
    
    def backtest_coin(
        self, 
        symbol: str, 
        candles: List[dict], 
        direction: str,
        current_price: float
    ) -> Dict[str, Any]:
        """
        –ë—ã—Å—Ç—Ä—ã–π –±—ç–∫—Ç–µ—Å—Ç –º–æ–Ω–µ—Ç—ã –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –ø–æ–∑–∏—Ü–∏—é
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            candles: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50-100 —Å–≤–µ—á–µ–π
            direction: 'LONG' –∏–ª–∏ 'SHORT'
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        
        Returns:
            –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥–∞ (entry, SL, TP) –∏ confidence
        """
        try:
            if len(candles) < 20:
                return self._default_backtest_result()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
            cache_key = f"{symbol}_{direction}_{len(candles)}"
            if cache_key in self.backtest_cache:
                logger.debug(f"[SmartRiskManager] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è {symbol}")
                return self.backtest_cache[cache_key]
            
            # –ë—ã—Å—Ç—Ä—ã–π –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–∞—Ö
            result = self._quick_backtest(symbol, candles, direction, current_price)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–∞ 1 —á–∞—Å)
            self.backtest_cache[cache_key] = result
            
            return result
            
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ {symbol}: {e}")
            return self._default_backtest_result()
    
    def _quick_backtest(
        self, 
        symbol: str, 
        candles: List[dict], 
        direction: str,
        current_price: float
    ) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä—ã–π –±—ç–∫—Ç–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = self._calculate_volatility(candles)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
        trend_strength = self._calculate_trend_strength(candles, direction)
        
        # ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º LSTM –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        lstm_prediction = None
        if self.lstm_predictor:
            try:
                lstm_prediction = self.lstm_predictor.predict(candles, current_price)
            except Exception as e:
                logger.debug(f"[SmartRiskManager] LSTM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        anomaly_score = None
        if self.anomaly_detector:
            try:
                anomaly_score = self.anomaly_detector.detect(candles)
                if anomaly_score.get('is_anomaly') and anomaly_score.get('severity', 0) > 0.7:
                    logger.warning(f"[SmartRiskManager] ‚ö†Ô∏è {symbol}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è –≤ –±—ç–∫—Ç–µ—Å—Ç–µ!")
            except Exception as e:
                logger.debug(f"[SmartRiskManager] Anomaly Detector –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º Risk Manager –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SL/TP
        optimal_sl_from_risk = 15.0
        optimal_tp_from_risk = 100.0
        if self.risk_manager:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç Risk Manager
                risk_analysis = self.risk_manager.calculate_dynamic_sl(symbol, candles, direction)
                optimal_sl_from_risk = risk_analysis.get('sl_percent', 15.0)
                
                risk_tp_analysis = self.risk_manager.calculate_dynamic_tp(symbol, candles, direction)
                optimal_tp_from_risk = risk_tp_analysis.get('tp_percent', 100.0)
            except Exception as e:
                logger.debug(f"[SmartRiskManager] Risk Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ SL/TP –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–æ–ø–æ–≤ –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
        coin_stops = self._get_coin_stops(symbol)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if coin_stops:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–ø–∞—Ö —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
            optimal_sl_from_history = self._optimal_sl_for_coin(coin_stops, volatility)
            optimal_tp_from_history = self._optimal_tp_for_coin(coin_stops, trend_strength)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            optimal_sl_from_history = 12.0 if volatility < 1.0 else 18.0
            optimal_tp_from_history = 80.0 if trend_strength < 0.5 else 120.0
        
        # ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º ML –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        ml_prediction = None
        if self.ml_predictor:
            try:
                ml_features = {
                    'rsi': volatility * 50,  # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π RSI
                    'volatility': volatility,
                    'trend_strength': trend_strength,
                    'volume': candles[-1].get('volume', 0),
                    'price': current_price,
                    'coin_stops_count': len(coin_stops),
                    'avg_stop_duration_hours': np.mean([s.get('duration_hours', 0) for s in coin_stops]) if coin_stops else 24
                }
                ml_prediction = self.ml_predictor.predict(ml_features)
            except Exception as e:
                logger.debug(f"[SmartRiskManager] ML –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ML (–µ—Å–ª–∏ –µ—Å—Ç—å) > –ò–ò > –∏—Å—Ç–æ—Ä–∏—è
        if ml_prediction:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            optimal_sl = ml_prediction['optimal_sl']
            optimal_tp = ml_prediction['optimal_tp']
            logger.info(f"[SmartRiskManager] ü§ñ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: SL={optimal_sl}%, TP={optimal_tp}%")
        else:
            # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: 60% –ò–ò, 40% –∏—Å—Ç–æ—Ä–∏—è
            optimal_sl = (optimal_sl_from_risk * 0.6) + (optimal_sl_from_history * 0.4)
            optimal_tp = (optimal_tp_from_risk * 0.6) + (optimal_tp_from_history * 0.4)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
        optimal_entry = self._optimal_entry_price(candles, direction, current_price)
        
        # Confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        confidence = self._calculate_confidence(candles, coin_stops)
        
        # ü§ñ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence –µ—Å–ª–∏ LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if lstm_prediction:
            predicted_direction = 'LONG' if lstm_prediction.get('direction', 0) > 0 else 'SHORT'
            if predicted_direction == direction:
                confidence += 0.15  # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ LSTM
        
        # üìä –°–Ω–∏–∂–∞–µ–º confidence –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π
        if anomaly_score and anomaly_score.get('is_anomaly'):
            severity = anomaly_score.get('severity', 0)
            confidence -= severity * 0.3  # –®—Ç—Ä–∞—Ñ –∑–∞ –∞–Ω–æ–º–∞–ª–∏—é
        
        confidence = max(0.1, min(confidence, 0.95))
        
        return {
            'optimal_entry': optimal_entry,
            'optimal_sl': current_price * (1 - optimal_sl / 100) if direction == 'LONG' else current_price * (1 + optimal_sl / 100),
            'optimal_tp': current_price * (1 + optimal_tp / 100) if direction == 'LONG' else current_price * (1 - optimal_tp / 100),
            'optimal_sl_percent': optimal_sl,
            'optimal_tp_percent': optimal_tp,
            'win_rate': self._estimate_win_rate(candles, direction),
            'expected_return': self._estimate_return(candles, direction),
            'confidence': confidence,
            'volatility': volatility,
            'trend_strength': trend_strength,
            'lstm_prediction': lstm_prediction,
            'anomaly_detected': anomaly_score.get('is_anomaly') if anomaly_score else False,
            'risk_manager_recommendation': {
                'sl_percent': optimal_sl_from_risk,
                'tp_percent': optimal_tp_from_risk
            }
        }
    
    def _extract_patterns(self, stopped_trades: List[Dict]) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Å—Ç–æ–ø–æ–≤"""
        patterns = {
            'high_rsi_stops': 0,
            'low_volatility_stops': 0,
            'rapid_stops': 0,
            'trailing_stops': 0
        }
        
        for trade in stopped_trades:
            entry_data = trade.get('entry_data', {})
            exit_reason = trade.get('close_reason', '')
            
            # –í—ã—Å–æ–∫–∏–π RSI –Ω–∞ –≤—Ö–æ–¥–µ
            if entry_data.get('rsi', 50) > 70:
                patterns['high_rsi_stops'] += 1
            
            # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            if entry_data.get('volatility', 1.0) < 0.5:
                patterns['low_volatility_stops'] += 1
            
            # –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (< 6 —á–∞—Å–æ–≤)
            duration = entry_data.get('duration_hours', 0)
            if duration > 0 and duration < 6:
                patterns['rapid_stops'] += 1
            
            # Trailing stop
            if 'trailing' in exit_reason.lower():
                patterns['trailing_stops'] += 1
        
        return patterns
    
    def _analyze_reasons(self, stopped_trades: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Å—Ç–æ–ø–æ–≤"""
        reasons = {}
        
        for trade in stopped_trades:
            reason = trade.get('close_reason', 'UNKNOWN')
            reasons[reason] = reasons.get(reason, 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
        sorted_reasons = dict(sorted(reasons.items(), key=lambda x: x[1], reverse=True))
        
        return sorted_reasons
    
    def _optimize_stop_loss(self, stopped_trades: List[Dict]) -> float:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç Stop Loss –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        if not stopped_trades:
            return 15.0  # –î–µ—Ñ–æ–ª—Ç
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º RSI –Ω–∞ –≤—Ö–æ–¥–µ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ML –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        return 15.0  # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç
    
    def _optimize_take_profit(self, stopped_trades: List[Dict]) -> float:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç Take Profit –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        if not stopped_trades:
            return 100.0  # –î–µ—Ñ–æ–ª—Ç
        
        return 100.0  # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç
    
    def _calculate_volatility(self, candles: List[dict]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"""
        if len(candles) < 20:
            return 1.0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        changes = []
        for i in range(1, len(candles)):
            change = abs(candles[i]['close'] - candles[i-1]['close']) / candles[i-1]['close']
            changes.append(change)
        
        return np.mean(changes) * 100 * 100  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    
    def _calculate_trend_strength(self, candles: List[dict], direction: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞"""
        if len(candles) < 10:
            return 0.5
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
        recent = candles[-10:]
        up_ticks = sum(1 for i in range(1, len(recent)) if recent[i]['close'] > recent[i-1]['close'])
        
        if direction == 'LONG':
            return up_ticks / len(recent)
        else:  # SHORT
            return (len(recent) - up_ticks) / len(recent)
    
    def _get_coin_stops(self, symbol: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–ø—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        if symbol in self.stop_patterns:
            return self.stop_patterns[symbol]
        return []
    
    def _optimal_sl_for_coin(self, stops: List[Dict], volatility: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π SL –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
        # TODO: ML –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        return 12.0 if volatility < 1.0 else 18.0
    
    def _optimal_tp_for_coin(self, stops: List[Dict], trend_strength: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π TP –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
        # TODO: ML –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        return 80.0 if trend_strength < 0.5 else 120.0
    
    def _optimal_entry_price(self, candles: List[dict], direction: str, current_price: float) -> float:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞"""
        # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã/–º–∞–∫—Å–∏–º—É–º—ã
        if direction == 'LONG':
            # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            lows = [c['low'] for c in candles[-10:]]
            return min(lows)
        else:  # SHORT
            # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
            highs = [c['high'] for c in candles[-10:]]
            return max(highs)
    
    def _calculate_confidence(self, candles: List[dict], stops: List[Dict]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        confidence = 0.5  # –ë–∞–∑–æ–≤—ã–π
        
        # –ë–æ–ª—å—à–µ —Å–≤–µ—á–µ–π = –≤—ã—à–µ confidence
        if len(candles) >= 50:
            confidence += 0.2
        
        # –ï—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–ø–æ–≤ –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
        if stops:
            confidence += 0.2
        
        # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –≤—ã—à–µ confidence
        volatility = self._calculate_volatility(candles)
        if volatility < 1.0:
            confidence += 0.1
        
        return min(confidence, 0.95)
    
    def _estimate_win_rate(self, candles: List[dict], direction: str) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç win rate –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—ç–∫—Ç–µ—Å—Ç–∞
        return 0.6  # –î–µ—Ñ–æ–ª—Ç
    
    def _estimate_return(self, candles: List[dict], direction: str) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        return 50.0  # –î–µ—Ñ–æ–ª—Ç –≤ %
    
    def _load_stop_patterns(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        try:
            if self.training_data_path.exists():
                with open(self.training_data_path, 'r') as f:
                    data = json.load(f)
                    self.stop_patterns = data.get('patterns', {})
                    logger.debug(f"[SmartRiskManager] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.stop_patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        except Exception as e:
            logger.warning(f"[SmartRiskManager] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {e}")
    
    def _save_for_training(self, patterns: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            data = {
                'patterns': patterns,
                'updated_at': datetime.now().isoformat()
            }
            
            with open(self.training_data_path, 'w') as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            logger.error(f"[SmartRiskManager] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
    
    def _generate_recommendations(self, stopped_trades: List[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ–ø–æ–≤"""
        recommendations = []
        
        patterns = self._extract_patterns(stopped_trades)
        
        if patterns['high_rsi_stops'] > len(stopped_trades) * 0.3:
            recommendations.append("–ò–∑–±–µ–≥–∞–π—Ç–µ –≤—Ö–æ–¥–æ–≤ –ø—Ä–∏ RSI > 70")
        
        if patterns['low_volatility_stops'] > len(stopped_trades) * 0.3:
            recommendations.append("–í—ã—Ö–æ–¥–∏—Ç–µ –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
        
        if patterns['rapid_stops'] > len(stopped_trades) * 0.5:
            recommendations.append("–î–µ—Ä–∂–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª—å—à–µ - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç–æ–ø–æ–≤ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–µ")
        
        if not recommendations:
            recommendations.append("–î–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        return recommendations
    
    def _default_backtest_result(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ç–∫—Ç–µ—Å—Ç–∞"""
        return {
            'optimal_entry': None,
            'optimal_sl': None,
            'optimal_tp': None,
            'optimal_sl_percent': 15.0,
            'optimal_tp_percent': 100.0,
            'win_rate': 0.5,
            'expected_return': 0.0,
            'confidence': 0.3,
            'volatility': 1.0,
            'trend_strength': 0.5
        }


    def _analyze_stops_with_lstm(self, stopped_trades: List[Dict]) -> Dict:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LSTM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω —Å—Ç–æ–ø–æ–≤"""
        try:
            if not self.lstm_predictor:
                return {'available': False}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–æ–ø—ã —á–µ—Ä–µ–∑ LSTM
            analysis_results = []
            
            for trade in stopped_trades[:10]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç–æ–ø–æ–≤
                symbol = trade.get('symbol')
                entry_data = trade.get('entry_data', {})
                entry_price = entry_data.get('entry_price')
                
                if entry_price:
                    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ø–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ LSTM
                    # candles = get_candles_for_trade(trade)
                    # prediction = self.lstm_predictor.predict(candles, entry_price)
                    # analysis_results.append(prediction)
                    pass
            
            return {
                'available': True,
                'analyzed_stops': len(analysis_results),
                'avg_prediction_accuracy': 0.65  # TODO: –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            }
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ LSTM –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {'available': False, 'error': str(e)}
    
    def _analyze_stops_for_anomalies(self, stopped_trades: List[Dict]) -> Dict:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Anomaly Detector –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Å—Ç–æ–ø–∞—Ö"""
        try:
            if not self.anomaly_detector:
                return {'available': False}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å—Ç–æ–ø—ã —è–≤–ª—è—é—Ç—Å—è –∞–Ω–æ–º–∞–ª–∏—è–º–∏
            anomalous_stops = []
            
            for trade in stopped_trades[:20]:
                # TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ Anomaly Detector
                # candles = get_candles_for_trade(trade)
                # anomaly_score = self.anomaly_detector.detect(candles)
                # if anomaly_score.get('is_anomaly'):
                #     anomalous_stops.append(trade)
                pass
            
            return {
                'available': True,
                'total_analyzed': len(stopped_trades[:20]),
                'anomalies_found': len(anomalous_stops),
                'anomaly_rate': len(anomalous_stops) / len(stopped_trades[:20]) if stopped_trades[:20] else 0
            }
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ Anomaly –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {'available': False, 'error': str(e)}
    
    def _optimize_stop_loss_with_ai(self, stopped_trades: List[Dict], patterns: Dict) -> float:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Risk Manager –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SL"""
        try:
            if not self.risk_manager:
                return self._optimize_stop_loss(stopped_trades)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —á–µ—Ä–µ–∑ Risk Manager
            # TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å risk_manager –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            
            optimal_sl = self._optimize_stop_loss(stopped_trades)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if patterns.get('high_rsi_stops', 0) > len(stopped_trades) * 0.3:
                optimal_sl += 2.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º SL –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö —Å—Ç–æ–ø–∞—Ö –Ω–∞ –≤—ã—Å–æ–∫–æ–º RSI
            
            return optimal_sl
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SL: {e}")
            return 15.0
    
    def _optimize_take_profit_with_ai(self, stopped_trades: List[Dict], patterns: Dict) -> float:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Risk Manager –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ TP"""
        try:
            if not self.risk_manager:
                return self._optimize_take_profit(stopped_trades)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —á–µ—Ä–µ–∑ Risk Manager
            optimal_tp = self._optimize_take_profit(stopped_trades)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if patterns.get('rapid_stops', 0) > len(stopped_trades) * 0.5:
                optimal_tp += 20.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º TP –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–æ–ø–∞—Ö
            
            return optimal_tp
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ TP: {e}")
            return 100.0
    
    def evaluate_prediction(self, symbol: str, backtest_result: Dict, actual_outcome: Dict) -> Dict:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ò–ò –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª SL/TP
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            backtest_result: –ß—Ç–æ –ò–ò –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª –ø—Ä–∏ –≤—Ö–æ–¥–µ
            actual_outcome: –ß—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–∏–∑ bot_history)
        
        Returns:
            –û—Ü–µ–Ω–∫–∞: {'correct': True/False, 'score': 0-1, 'feedback': {...}}
        """
        try:
            predicted_sl = backtest_result.get('optimal_sl_percent', 15.0)
            predicted_tp = backtest_result.get('optimal_tp_percent', 100.0)
            actual_result = actual_outcome.get('roi', 0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º score
            score = self._calculate_score(predicted_sl, predicted_tp, actual_result)
            
            feedback = {
                'symbol': symbol,
                'timestamp': datetime.now().isoformat(),
                'predicted_sl': predicted_sl,
                'predicted_tp': predicted_tp,
                'actual_roi': actual_result,
                'score': score,
                'correct': score > 0.6
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            self._save_feedback(symbol, feedback)
            
            logger.info(f"[SmartRiskManager] üìä –û—Ü–µ–Ω–∫–∞ –¥–ª—è {symbol}: score={score:.2f} (SL={predicted_sl}%, TP={predicted_tp}%, —Ä–µ–∞–ª—å–Ω–æ={actual_result}%)")
            
            return feedback
            
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            return {'score': 0.5, 'error': str(e)}
    
    def _calculate_score(self, predicted_sl: float, predicted_tp: float, actual_result: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç score (0-1) –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –ò–ò –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª
        
        - 1.0 = –∏–¥–µ–∞–ª—å–Ω–æ (–∑–∞–∫—Ä—ã–ª–æ—Å—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ)
        - 0.5 = —Å—Ä–µ–¥–Ω–µ
        - 0.0 = –ø–ª–æ—Ö–æ (–≤—ã—à–ª–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã)
        """
        if actual_result < -predicted_sl:
            # –í—ã—à–ª–∏ –∑–∞ SL ‚Üí –ø–ª–æ—Ö–æ
            return 0.0
        
        if actual_result > predicted_tp:
            # –ü—Ä–µ–≤—ã—Å–∏–ª–∏ TP ‚Üí —Ö–æ—Ä–æ—à–æ (TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)
            return 0.8
        
        # –í –ø—Ä–µ–¥–µ–ª–∞—Ö SL-TP ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        if predicted_sl > 0 and predicted_tp > 0:
            normalized = (actual_result + predicted_sl) / (predicted_tp + predicted_sl)
            return max(0.1, min(normalized, 0.95))
        
        return 0.5
    
    def _save_feedback(self, symbol: str, feedback: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ —Ñ–∞–π–ª"""
        try:
            feedback_file = self.feedback_data_path / f"{symbol}.json"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ feedback
            if feedback_file.exists():
                with open(feedback_file, 'r') as f:
                    feedbacks = json.load(f)
            else:
                feedbacks = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
            feedbacks.append(feedback)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π)
            feedbacks = feedbacks[-100:]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(feedback_file, 'w') as f:
                json.dump(feedbacks, f, indent=2)
                
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è feedback: {e}")
    
    def _load_optimized_params(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        try:
            if self.optimized_params_path.exists():
                with open(self.optimized_params_path, 'r') as f:
                    self.optimized_params = json.load(f)
                    logger.debug(f"[SmartRiskManager] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.optimized_params)} –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        except Exception as e:
            logger.warning(f"[SmartRiskManager] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {e}")
    
    def learn_from_feedback(self):
        """
        –û–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        1. –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–∏
        2. –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        """
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            training_data = []
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ feedback —Ñ–∞–π–ª—ã
            for feedback_file in self.feedback_data_path.glob("*.json"):
                symbol = feedback_file.stem
                
                with open(feedback_file, 'r') as f:
                    feedbacks = json.load(f)
                
                if not feedbacks:
                    continue
                
                for feedback in feedbacks:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º features –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    actual_sl = feedback.get('predicted_sl', 15.0)
                    actual_tp = feedback.get('predicted_tp', 100.0)
                    actual_roi = feedback.get('actual_roi', 0)
                    score = feedback.get('score', 0.5)
                    
                    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ features –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏ –∏–∑ bot_history
                    features = feedback.get('features', {})
                    
                    training_data.append({
                        'features': features,
                        'actual_sl': actual_sl,
                        'actual_tp': actual_tp,
                        'actual_roi': actual_roi,
                        'score': score
                    })
            
            # –û–±—É—á–∞–µ–º ML –º–æ–¥–µ–ª—å
            if self.ml_predictor and len(training_data) >= 20:
                logger.info(f"[SmartRiskManager] üéì –û–±—É—á–∞–µ–º ML –º–æ–¥–µ–ª—å –Ω–∞ {len(training_data)} –ø—Ä–∏–º–µ—Ä–∞—Ö...")
                success = self.ml_predictor.train(training_data)
                
                if success:
                    logger.info("[SmartRiskManager] ‚úÖ ML –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
            
            # –¢–∞–∫–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
            self._adjust_parameters_from_feedback()
                    
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def _adjust_parameters_from_feedback(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ feedback —Ñ–∞–π–ª—ã
            for feedback_file in self.feedback_data_path.glob("*.json"):
                symbol = feedback_file.stem
                
                with open(feedback_file, 'r') as f:
                    feedbacks = json.load(f)
                
                if not feedbacks:
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π score
                avg_score = np.mean([f.get('score', 0.5) for f in feedbacks])
                
                # –ï—Å–ª–∏ score –Ω–∏–∑–∫–∏–π ‚Üí –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if avg_score < 0.5:
                    self._adjust_parameters(symbol, {
                        'sl_multiplier': 1.2,  # +20% –∫ SL
                        'tp_multiplier': 0.9   # -10% –∫ TP
                    })
                    logger.info(f"[SmartRiskManager] üéì –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è {symbol}: SL‚Üë20%, TP‚Üì10%")
                
                # –ï—Å–ª–∏ score –≤—ã—Å–æ–∫–∏–π ‚Üí –≤—Å—ë –æ–∫
                elif avg_score > 0.7:
                    logger.debug(f"[SmartRiskManager] ‚úÖ {symbol}: –•–æ—Ä–æ—à–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (score={avg_score:.2f})")
                    
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
    
    def _adjust_parameters(self, symbol: str, adjustments: Dict):
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
        if symbol not in self.optimized_params:
            self.optimized_params[symbol] = {
                'sl_multiplier': 1.0,
                'tp_multiplier': 1.0,
                'last_updated': datetime.now().isoformat(),
                'total_feedback': 0
            }
        
        self.optimized_params[symbol]['sl_multiplier'] *= adjustments.get('sl_multiplier', 1.0)
        self.optimized_params[symbol]['tp_multiplier'] *= adjustments.get('tp_multiplier', 1.0)
        self.optimized_params[symbol]['last_updated'] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            with open(self.optimized_params_path, 'w') as f:
                json.dump(self.optimized_params, f, indent=2)
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
    
    def collect_entry_data(self, symbol: str, current_price: float, side: str, 
                          rsi: float, candles: List[Dict], **kwargs) -> None:
        """
        ü§ñ –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò (–¥–∞–∂–µ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            side: 'LONG' –∏–ª–∏ 'SHORT'
            rsi: –¢–µ–∫—É—â–∏–π RSI
            candles: –ò—Å—Ç–æ—Ä–∏—è —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            entry_data = {
                'symbol': symbol,
                'price': current_price,
                'side': side,
                'rsi': rsi,
                'timestamp': datetime.now().isoformat(),
                'candles': candles[:10],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π
                **kwargs
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            training_file = self.feedback_data_path / f"{symbol}_entry_data.json"
            training_file.parent.mkdir(parents=True, exist_ok=True)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if training_file.exists():
                with open(training_file, 'r') as f:
                    data = json.load(f)
            else:
                data = []
            
            data.append(entry_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(training_file, 'w') as f:
                json.dump(data, f, indent=2)
            
            logger.debug(f"[SmartRiskManager] üìä –°–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞: {e}")
    
    def should_enter_now(self, symbol: str, current_price: float, side: str, 
                        rsi: float, candles: List[Dict], **kwargs) -> Dict[str, Any]:
        """
        ü§ñ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –≤—Ö–æ–¥–∏—Ç—å –≤ –ø–æ–∑–∏—Ü–∏—é —Å–µ–π—á–∞—Å –∏–ª–∏ –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å
        
        –ö–æ–≥–¥–∞ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã –∏ RSI –¥–æ—Å—Ç–∏–≥ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (71 –¥–ª—è SHORT, 29 –¥–ª—è LONG),
        –ò–ò —Ä–µ—à–∞–µ—Ç: –≤—Ö–æ–¥–∏—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ª—É—á—à–µ–π —Ü–µ–Ω—ã.
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            side: 'LONG' –∏–ª–∏ 'SHORT'
            rsi: –¢–µ–∫—É—â–∏–π RSI
            candles: –ò—Å—Ç–æ—Ä–∏—è —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (trend, volatility, etc.)
        
        Returns:
            {
                'should_enter': True/False,
                'confidence': 0.0-1.0,
                'reason': "–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞",
                'optimal_price': 13.45,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
                'price_deviation': -0.8%,  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π
                'expected_wait_time_minutes': 15  # –°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å
            }
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç ML –º–æ–¥–µ–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
            if not self.ml_predictor:
                return self._simple_entry_decision(symbol, current_price, side, rsi, candles)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º features –¥–ª—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            features = {
                'rsi': rsi,
                'volatility': kwargs.get('volatility', 1.0),
                'trend_strength': kwargs.get('trend_strength', 0.5),
                'volume': kwargs.get('volume', 0),
                'price': current_price,
                'coin_stops_count': 0,
                'avg_stop_duration_hours': 12.0
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            prediction = self.ml_predictor.predict_entry_timing(features, side)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            optimal_price = self._calculate_optimal_entry_price(
                current_price, side, rsi, candles, prediction
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            price_deviation = ((current_price - optimal_price) / optimal_price) * 100
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            should_enter = False
            confidence = 0.5
            reason = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"
            
            if abs(price_deviation) < 2.0:  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ < 2% - –≤—Ö–æ–¥–∏–º
                should_enter = True
                confidence = 0.8
                reason = f"–¶–µ–Ω–∞ –±–ª–∏–∑–∫–∞ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π ({price_deviation:+.2f}%)"
            elif price_deviation < -3.0:  # –¶–µ–Ω–∞ < –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –Ω–∞ 3%+ - –∂–¥–µ–º
                should_enter = False
                confidence = 0.6
                reason = f"–¶–µ–Ω–∞ –Ω–∏–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –Ω–∞ {abs(price_deviation):.2f}%, –æ–∂–∏–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"
            elif price_deviation > 3.0:  # –¶–µ–Ω–∞ > –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –Ω–∞ 3%+ - –∂–¥–µ–º
                should_enter = False
                confidence = 0.6
                reason = f"–¶–µ–Ω–∞ –≤—ã—à–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –Ω–∞ {price_deviation:.2f}%, –æ–∂–∏–¥–∞–µ–º –æ—Ç–∫–∞—Ç–∞"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–ø–∞—Ö —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
            stops_for_coin = self._get_coin_stops(symbol)
            if stops_for_coin and len(stops_for_coin) > 0:
                avg_entry_delay = np.mean([s.get('entry_delay_minutes', 0) for s in stops_for_coin])
                if avg_entry_delay > 15:
                    # –£ —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã –µ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω "–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º"
                    should_enter = False
                    confidence = 0.7
                    reason = f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç: –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å ({avg_entry_delay:.0f}–º–∏–Ω)"
            
            return {
                'should_enter': should_enter,
                'confidence': confidence,
                'reason': reason,
                'optimal_price': optimal_price,
                'price_deviation': price_deviation,
                'expected_wait_time_minutes': self._estimate_wait_time(price_deviation, candles)
            }
            
        except Exception as e:
            logger.error(f"[SmartRiskManager] –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –¥–ª—è {symbol}: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–µ—à–µ–Ω–∏—é
            return self._simple_entry_decision(symbol, current_price, side, rsi, candles)
    
    def _simple_entry_decision(self, symbol: str, current_price: float, side: str, 
                               rsi: float, candles: List[Dict]) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ ML (fallback)"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        if candles and len(candles) >= 3:
            recent_closes = [c.get('close', 0) for c in candles[-3:]]
            
            if side == 'LONG':
                # –î–ª—è LONG: –≤—Ö–æ–¥–∏–º –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Ç–∏
                if recent_closes[-1] > recent_closes[0]:
                    return {
                        'should_enter': True,
                        'confidence': 0.6,
                        'reason': "–ù–∞—á–∞–ª—Å—è —Ä–æ—Å—Ç –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è",
                        'optimal_price': current_price,
                        'price_deviation': 0.0,
                        'expected_wait_time_minutes': 0
                    }
            else:  # SHORT
                # –î–ª—è SHORT: –≤—Ö–æ–¥–∏–º –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞—á–∞–ª–∞ –ø–∞–¥–∞—Ç—å
                if recent_closes[-1] < recent_closes[0]:
                    return {
                        'should_enter': True,
                        'confidence': 0.6,
                        'reason': "–ù–∞—á–∞–ª–æ—Å—å –ø–∞–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–æ—Å—Ç–∞",
                        'optimal_price': current_price,
                        'price_deviation': 0.0,
                        'expected_wait_time_minutes': 0
                    }
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É
        return {
            'should_enter': True,
            'confidence': 0.5,
            'reason': "–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—Ö–æ–¥–∏–º",
            'optimal_price': current_price,
            'price_deviation': 0.0,
            'expected_wait_time_minutes': 0
        }
    
    def _calculate_optimal_entry_price(self, current_price: float, side: str, 
                                       rsi: float, candles: List[Dict], 
                                       prediction: Dict) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞"""
        if not candles or len(candles) < 10:
            return current_price
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
        closes = [float(c.get('close', 0)) for c in candles[-20:]]
        
        if side == 'LONG':
            # –î–ª—è LONG –∏—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            local_min = min(closes[-5:])  # –ú–∏–Ω–∏–º—É–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π
            optimal = local_min * 1.01  # –ù–∞ 1% –≤—ã—à–µ –º–∏–Ω–∏–º—É–º–∞
        else:  # SHORT
            # –î–ª—è SHORT –∏—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
            local_max = max(closes[-5:])  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–∏
            optimal = local_max * 0.99  # –ù–∞ 1% –Ω–∏–∂–µ –º–∞–∫—Å–∏–º—É–º–∞
        
        return optimal
    
    def _estimate_wait_time(self, price_deviation: float, candles: List[Dict]) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
        if abs(price_deviation) < 1.0:
            return 0  # –¶–µ–Ω–∞ —É–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: —á–µ–º –±–æ–ª—å—à–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —Ç–µ–º –¥–æ–ª—å—à–µ –∂–¥–∞—Ç—å
        base_wait = abs(price_deviation) * 5  # 5 –º–∏–Ω—É—Ç –Ω–∞ –∫–∞–∂–¥—ã–π %
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        return min(int(base_wait), 30)  # –ú–∞–∫—Å–∏–º—É–º 30 –º–∏–Ω—É—Ç


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if not PREMIUM_AVAILABLE:
    logger.warning("[SmartRiskManager] ‚ö†Ô∏è –ü—Ä–µ–º–∏—É–º-–ª–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

