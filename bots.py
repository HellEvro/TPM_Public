#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª bots.py - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏
"""

# –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if os.name == 'nt':
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
    except:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ os
        try:
            import subprocess
            subprocess.run(['chcp', '65001'], shell=True, capture_output=True)
        except:
            pass

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ü–ï–†–ï–î –≤—Å–µ–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
if not os.path.exists('app/config.py'):
    print("\n" + "="*80)
    print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("="*80)
    print()
    print("üìù –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print()
    print("   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    if os.name == 'nt':  # Windows
        print("      copy app\\config.example.py app\\config.py")
    else:  # Linux/Mac
        print("      cp app/config.example.py app/config.py")
    print()
    print("   2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ app/config.py:")
    print("      - –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ API –∫–ª—é—á–∏ –±–∏—Ä–∂")
    print("      - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    print()
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞:")
    print("      python bots.py")
    print()
    print("   üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: docs/INSTALL.md")
    print()
    print("="*80)
    print()
    sys.exit(1)

import signal
import threading
import time
import logging
import json
from datetime import datetime
from flask import Flask
from flask_cors import CORS

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
from bots_modules.imports_and_globals import check_and_stop_existing_bots_processes

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 5001 –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
if __name__ == '__main__':
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–ï–†–í–û–ô –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    can_continue = check_and_stop_existing_bots_processes()
    if not can_continue:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 5001, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
        sys.exit(1)

# –ò–º–ø–æ—Ä—Ç —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from utils.color_logger import setup_color_logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...")
from bots_modules.imports_and_globals import *
from bots_modules.calculations import *
from bots_modules.maturity import *
from bots_modules.optimal_ema import *
from bots_modules.filters import *
from bots_modules.bot_class import *
from bots_modules.sync_and_cache import *
from bots_modules.workers import *
from bots_modules.init_functions import *
from bots_modules.api_endpoints import *

print("–í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –∏—Å—Ç–æ—Ä–∏–∏ –±–æ—Ç–æ–≤ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π, —á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
try:
    from bot_engine.bot_history import (
        bot_history_manager, log_bot_start, log_bot_stop, log_bot_signal,
        log_position_opened, log_position_closed
    )
    BOT_HISTORY_AVAILABLE = True
    logger = logging.getLogger('BotsService')
    logger.info("[BOT_HISTORY] ‚úÖ –ú–æ–¥—É–ª—å bot_history –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"[WARNING] –ú–æ–¥—É–ª—å bot_history –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    class DummyHistoryManager:
        def get_bot_history(self, *args, **kwargs): return []
        def get_bot_trades(self, *args, **kwargs): return []
        def get_bot_statistics(self, *args, **kwargs): return {}
        def clear_history(self, *args, **kwargs): pass
    
    bot_history_manager = DummyHistoryManager()
    def log_bot_start(*args, **kwargs): pass
    def log_bot_stop(*args, **kwargs): pass
    def log_bot_signal(*args, **kwargs): pass
    def log_position_opened(*args, **kwargs): pass
    def log_position_closed(*args, **kwargs): pass
    BOT_HISTORY_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_color_logging()

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
file_handler = logging.FileHandler('logs/bots.log', encoding='utf-8')
file_handler.setLevel(logging.INFO)
file_formatter = logging.Formatter('[BOTS] %(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_formatter)
root_logger = logging.getLogger()
root_logger.addHandler(file_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è stdout
if hasattr(sys.stdout, 'reconfigure'):
    sys.stdout.reconfigure(encoding='utf-8')

logger = logging.getLogger('BotsService')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è shutdown
graceful_shutdown = False

# Signal handlers
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global graceful_shutdown
    
    logger.warning(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
    graceful_shutdown = True
    shutdown_flag.set()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Flask
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    cleanup_bot_service()
    print("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    os._exit(0)

_cleanup_done = False

def cleanup_bot_service():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
    global _cleanup_done
    
    if _cleanup_done:
        return
    
    _cleanup_done = True
    
    logger.info("=" * 80)
    logger.info("–û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´ INFOBOT")
    logger.info("=" * 80)
    
    try:
        if async_processor:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
            stop_async_processor()
        
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–æ–≤...")
        save_bots_state()
        
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç...")
        save_mature_coins_storage()
        
        logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("=" * 80)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

def run_bots_service():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è API –±–æ—Ç–æ–≤"""
    try:
        logger.info("=" * 80)
        logger.info("–ó–ê–ü–£–°–ö BOTS SERVICE API (–ü–æ—Ä—Ç 5001)")
        logger.info("=" * 80)
        
        print("\n" + "=" * 80)
        print("‚úÖ BOTS SERVICE –ó–ê–ü–£–©–ï–ù –ò –†–ê–ë–û–¢–ê–ï–¢!")
        print("=" * 80)
        print("üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:5001")
        print("üìä –°—Ç–∞—Ç—É—Å: http://localhost:5001/api/status")
        print("ü§ñ –ë–æ—Ç—ã: http://localhost:5001/api/bots")
        print("=" * 80)
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 80 + "\n")
        
        bots_app.run(
            host='0.0.0.0',
            port=5001,
            debug=False,
            use_reloader=False,
            threaded=True
        )
    except KeyboardInterrupt:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    import atexit
    atexit.register(cleanup_bot_service)
    
    try:
        from bots_modules.workers import auto_save_worker, auto_bot_worker
        
        load_auto_bot_config()
        
        try:
            init_bot_service()
        except Exception as init_error:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫): {init_error}")
            import traceback
            traceback.print_exc()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä Optimal EMA
        try:
            from bot_engine.optimal_ema_worker import start_optimal_ema_worker
            optimal_ema_worker = start_optimal_ema_worker(update_interval=21600)  # 6 —á–∞—Å–æ–≤
            if optimal_ema_worker:
                logger.info("üìä Optimal EMA Worker –∑–∞–ø—É—â–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)")
            else:
                logger.warning("‚ö†Ô∏è Optimal EMA Worker –Ω–µ –∑–∞–ø—É—â–µ–Ω (—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)")
        except Exception as ema_error:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Optimal EMA Worker: {ema_error}")
        
        auto_save_thread = threading.Thread(target=auto_save_worker, daemon=True)
        auto_save_thread.start()
        logger.info("Auto Save Worker –∑–∞–ø—É—â–µ–Ω")
        
        auto_bot_thread = threading.Thread(target=auto_bot_worker, daemon=True)
        auto_bot_thread.start()
        logger.info("Auto Bot Worker –∑–∞–ø—É—â–µ–Ω")
        
        run_bots_service()
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        try:
            cleanup_bot_service()
            print("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n")
        except:
            pass
        os._exit(0)
