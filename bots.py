#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª bots.py - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏
"""

# –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import os
import sys

# üîç –¢–†–ï–ô–°–ò–ù–ì –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ sys, –Ω–æ –¥–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
try:
    # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
    from bot_engine.bot_config import SystemConfig
    ENABLE_TRACE = SystemConfig.ENABLE_CODE_TRACING
    
    if ENABLE_TRACE:
        from trace_debug import enable_trace
        enable_trace()
        print("=" * 80)
        print("TRACE: ENABLED - all code execution will be logged with timing")
        print("WARNING: This will slow down the system significantly!")
        print("=" * 80, flush=True)
    else:
        print("[INFO] Code tracing DISABLED (set SystemConfig.ENABLE_CODE_TRACING = True to enable)")
except Exception as e:
    print(f"[WARNING] Could not initialize tracing: {e}")
    ENABLE_TRACE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if os.name == 'nt':
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
    except:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ os
        try:
            import subprocess
            subprocess.run(['chcp', '65001'], shell=True, capture_output=True)
        except:
            pass

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ü–ï–†–ï–î –≤—Å–µ–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
if not os.path.exists('app/config.py'):
    print("\n" + "="*80)
    print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("="*80)
    print()
    print("üìù –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print()
    print("   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    if os.name == 'nt':  # Windows
        print("      copy app\\config.example.py app\\config.py")
    else:  # Linux/Mac
        print("      cp app/config.example.py app/config.py")
    print()
    print("   2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ app/config.py:")
    print("      - –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ API –∫–ª—é—á–∏ –±–∏—Ä–∂")
    print("      - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    print()
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞:")
    print("      python bots.py")
    print()
    print("   üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: docs/INSTALL.md")
    print()
    print("="*80)
    print()
    sys.exit(1)

import signal
import threading
import time
import logging
import json
from datetime import datetime
from flask import Flask
from flask_cors import CORS

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
from bots_modules.imports_and_globals import check_and_stop_existing_bots_processes

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
def check_api_keys():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–∞–º–∏
        if not os.path.exists('app/keys.py'):
            return False
            
        from app.config import EXCHANGES, ACTIVE_EXCHANGE
        active_exchange = EXCHANGES.get(ACTIVE_EXCHANGE, {})
        api_key = active_exchange.get('api_key', '')
        api_secret = active_exchange.get('api_secret', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–∏ –Ω–µ –ø—É—Å—Ç—ã–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç "YOUR_" (–∏–∑ –ø—Ä–∏–º–µ—Ä–∞)
        if not api_key or not api_secret:
            return False
        if 'YOUR_' in api_key or 'YOUR_' in api_secret:
            return False
        if api_key == 'YOUR_API_KEY_HERE' or api_secret == 'YOUR_SECRET_KEY_HERE':
            return False
            
        return True
    except:
        return False

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 5001 –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
if __name__ == '__main__':
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–ï–†–í–û–ô –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    can_continue = check_and_stop_existing_bots_processes()
    if not can_continue:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 5001, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    if not check_api_keys():
        print("\n" + "="*80)
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("="*80)
        print()
        print("üìå –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
        try:
            from app.config import ACTIVE_EXCHANGE
            print(f"   –ë–∏—Ä–∂–∞: {ACTIVE_EXCHANGE}")
        except:
            print("   –ë–∏—Ä–∂–∞: –ù–ï –û–ü–†–ï–î–ï–õ–ï–ù–ê")
        
        if not os.path.exists('app/keys.py'):
            print("   –§–∞–π–ª —Å –∫–ª—é—á–∞–º–∏: app/keys.py –ù–ï –ù–ê–ô–î–ï–ù")
        else:
            print("   API –∫–ª—é—á–∏: –ù–ï –ù–ê–°–¢–†–û–ï–ù–´ –∏–ª–∏ –°–û–î–ï–†–ñ–ê–¢ –ü–†–ò–ú–ï–†–´")
        print()
        print("üí° –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
        print("   1. –°–æ–∑–¥–∞–π—Ç–µ app/keys.py —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –æ—Ç –±–∏—Ä–∂–∏")
        print("   2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –≤ app/config.py (EXCHANGES)")
        print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ bots.py")
        print()
        print("‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Ç–æ—Ä–≥–æ–≤–ª—è –ù–ï–í–û–ó–ú–û–ñ–ù–ê –±–µ–∑ –∫–ª—é—á–µ–π!")
        print("   –ë—É–¥—É—Ç –æ—à–∏–±–∫–∏: 'Http status code is not 200. (ErrCode: 401)'")
        print()
        print("="*80)
        print()

# –ò–º–ø–æ—Ä—Ç —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from utils.color_logger import setup_color_logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...")
from bots_modules.imports_and_globals import *
from bots_modules.calculations import *
from bots_modules.maturity import *
from bots_modules.optimal_ema import *
from bots_modules.filters import *
from bots_modules.bot_class import *
from bots_modules.sync_and_cache import *
from bots_modules.workers import *
from bots_modules.init_functions import *

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –∏—Å—Ç–æ—Ä–∏–∏ –±–æ—Ç–æ–≤ (–ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–æ–º API endpoints!)
try:
    print("[BOT_HISTORY] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot_history...")
    from bot_engine.bot_history import (
        bot_history_manager, log_bot_start, log_bot_stop, log_bot_signal,
        log_position_opened, log_position_closed
    )
    print(f"[BOT_HISTORY] ‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω, bot_history_manager: {bot_history_manager}")
    BOT_HISTORY_AVAILABLE = True
    logger = logging.getLogger('BotsService')
    logger.info("[BOT_HISTORY] ‚úÖ –ú–æ–¥—É–ª—å bot_history –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bot_history_manager –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
    import bots_modules.imports_and_globals as globals_module
    globals_module.bot_history_manager = bot_history_manager
    globals_module.BOT_HISTORY_AVAILABLE = True
    print(f"[BOT_HISTORY] ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å: {globals_module.bot_history_manager}")
except ImportError as e:
    print(f"[WARNING] –ú–æ–¥—É–ª—å bot_history –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    class DummyHistoryManager:
        def get_bot_history(self, *args, **kwargs): return []
        def get_bot_trades(self, *args, **kwargs): return []
        def get_bot_statistics(self, *args, **kwargs): return {}
        def clear_history(self, *args, **kwargs): pass
    
    bot_history_manager = DummyHistoryManager()
    def log_bot_start(*args, **kwargs): pass
    def log_bot_stop(*args, **kwargs): pass
    def log_bot_signal(*args, **kwargs): pass
    def log_position_opened(*args, **kwargs): pass
    def log_position_closed(*args, **kwargs): pass
    BOT_HISTORY_AVAILABLE = False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
    import bots_modules.imports_and_globals as globals_module
    globals_module.bot_history_manager = bot_history_manager
    globals_module.BOT_HISTORY_AVAILABLE = False
    print(f"[BOT_HISTORY] ‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å: {globals_module.bot_history_manager}")
except Exception as e:
    print(f"[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ bot_history: {e}")
    import traceback
    traceback.print_exc()

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API endpoints (–ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ bot_history_manager)
from bots_modules.api_endpoints import *

print("–í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_color_logging()

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
file_handler = logging.FileHandler('logs/bots.log', encoding='utf-8')
file_handler.setLevel(logging.INFO)
file_formatter = logging.Formatter('[BOTS] %(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_formatter)
root_logger = logging.getLogger()
root_logger.addHandler(file_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è stdout
if hasattr(sys.stdout, 'reconfigure'):
    sys.stdout.reconfigure(encoding='utf-8')

logger = logging.getLogger('BotsService')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è shutdown
graceful_shutdown = False

# Signal handlers
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global graceful_shutdown
    
    logger.warning(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
    graceful_shutdown = True
    shutdown_flag.set()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Flask
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    cleanup_bot_service()
    print("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    os._exit(0)

_cleanup_done = False

def open_firewall_port_5001():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç 5001 –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (Windows/macOS/Linux)"""
    try:
        import subprocess
        import platform
        
        print("[BOTS] üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ 5001 –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ...")
        
        system = platform.system()
        port = 5001
        
        if system == 'Windows':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞ 5001
            result = subprocess.run(
                ['netsh', 'advfirewall', 'firewall', 'show', 'rule', 'name=InfoBot Bot Service'],
                capture_output=True,
                text=True
            )
            
            if 'InfoBot Bot Service' not in result.stdout:
                print("[BOTS] üî• –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç 5001...")
                subprocess.run([
                    'netsh', 'advfirewall', 'firewall', 'add', 'rule',
                    'name=InfoBot Bot Service',
                    'dir=in',
                    'action=allow',
                    'protocol=TCP',
                    f'localport={port}'
                ], check=True)
                print("[BOTS] ‚úÖ –ü–æ—Ä—Ç 5001 –æ—Ç–∫—Ä—ã—Ç")
            else:
                print("[BOTS] ‚úÖ –ü–æ—Ä—Ç 5001 —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
        
        elif system == 'Darwin':  # macOS
            print("[BOTS] üí° –ù–∞ macOS –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç 5001 –≤—Ä—É—á–Ω—É—é")
        
        elif system == 'Linux':
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ufw
                subprocess.run(['which', 'ufw'], check=True)
                result = subprocess.run(['ufw', 'status'], capture_output=True, text=True)
                if f'{port}/tcp' not in result.stdout:
                    subprocess.run(['sudo', 'ufw', 'allow', str(port), '/tcp'], check=True)
                    print(f"[BOTS] ‚úÖ –ü–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç")
                else:
                    print(f"[BOTS] ‚úÖ –ü–æ—Ä—Ç {port} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
            except:
                print(f"[BOTS] ‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç {port} –≤—Ä—É—á–Ω—É—é")
        
        else:
            print(f"[BOTS] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}")
            print("[BOTS] üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é —Å–º. docs/INSTALL.md")
            
    except Exception as e:
        print(f"[BOTS] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç 5001 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")
        print("[BOTS] üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é —Å–º. docs/INSTALL.md")

def cleanup_bot_service():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
    global _cleanup_done
    
    if _cleanup_done:
        return
    
    _cleanup_done = True
    
    logger.info("=" * 80)
    logger.info("–û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´ INFOBOT")
    logger.info("=" * 80)
    
    try:
        # üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö...")
        from bots_modules.continuous_data_loader import stop_continuous_loader
        stop_continuous_loader()
        
        if async_processor:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
            stop_async_processor()
        
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–æ–≤...")
        save_bots_state()
        
        # ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã)
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç...")
        save_mature_coins_storage()
        
        logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("=" * 80)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

def run_bots_service():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è API –±–æ—Ç–æ–≤"""
    try:
        logger.info("=" * 80)
        logger.info("–ó–ê–ü–£–°–ö BOTS SERVICE API (–ü–æ—Ä—Ç 5001)")
        logger.info("=" * 80)
        
        print("\n" + "=" * 80)
        print("‚úÖ BOTS SERVICE –ó–ê–ü–£–©–ï–ù –ò –†–ê–ë–û–¢–ê–ï–¢!")
        print("=" * 80)
        print("üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:5001")
        print("üìä –°—Ç–∞—Ç—É—Å: http://localhost:5001/api/status")
        print("ü§ñ –ë–æ—Ç—ã: http://localhost:5001/api/bots")
        print("=" * 80)
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 80 + "\n")
        
        bots_app.run(
            host='0.0.0.0',
            port=5001,
            debug=False,
            use_reloader=False,
            threaded=True
        )
    except KeyboardInterrupt:
        raise
    except SystemExit as e:
        if e.code == 42:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            logger.info("üîÑ –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
            print("üîÑ –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            import subprocess
            subprocess.Popen([sys.executable] + sys.argv)
            sys.exit(0)
        else:
            raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    import atexit
    atexit.register(cleanup_bot_service)
    
    try:
        from bots_modules.workers import auto_save_worker, auto_bot_worker, positions_monitor_worker
        
        load_auto_bot_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        def init_bots_async():
            try:
                init_bot_service()
            except Exception as init_error:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫): {init_error}")
                import traceback
                traceback.print_exc()
        
        init_thread = threading.Thread(target=init_bots_async, daemon=True)
        init_thread.start()
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç–∞ –≤ —Ñ–æ–Ω–µ...")
        
        # ‚úÖ Optimal EMA Worker - —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA –≤ —Ñ–æ–Ω–µ
        from bot_engine.optimal_ema_worker import start_optimal_ema_worker
        optimal_ema_worker = start_optimal_ema_worker(update_interval=21600) # 6 —á–∞—Å–æ–≤
        if optimal_ema_worker:
            logger.info("‚úÖ Optimal EMA Worker –∑–∞–ø—É—â–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Optimal EMA Worker")
        
        auto_save_thread = threading.Thread(target=auto_save_worker, daemon=True)
        auto_save_thread.start()
        logger.info("Auto Save Worker –∑–∞–ø—É—â–µ–Ω")
        
        auto_bot_thread = threading.Thread(target=auto_bot_worker, daemon=True)
        auto_bot_thread.start()
        logger.info("Auto Bot Worker –∑–∞–ø—É—â–µ–Ω")
        
        # ‚úÖ Positions Monitor Worker - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        positions_monitor_thread = threading.Thread(target=positions_monitor_worker, daemon=True)
        positions_monitor_thread.start()
        logger.info("üìä Positions Monitor Worker –∑–∞–ø—É—â–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5—Å)")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI Manager (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π)
        ai_manager = None
        try:
            from bot_engine.bot_config import AIConfig
            
            if AIConfig.AI_ENABLED:
                logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥—É–ª–µ–π...")
                from bot_engine.ai.ai_manager import get_ai_manager
                ai_manager = get_ai_manager()
                
                # –ï—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –≤–∞–ª–∏–¥–Ω–∞ –∏ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º Auto Trainer
                if ai_manager.is_available() and AIConfig.AI_AUTO_TRAIN_ENABLED:
                    from bot_engine.ai.auto_trainer import start_auto_trainer
                    start_auto_trainer()
                    logger.info("ü§ñ AI Auto Trainer –∑–∞–ø—É—â–µ–Ω (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ)")
                elif ai_manager.is_available():
                    logger.info("ü§ñ AI –º–æ–¥—É–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã (–∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
                else:
                    logger.warning("‚ö†Ô∏è AI –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é)")
            else:
                logger.info("‚ÑπÔ∏è AI –º–æ–¥—É–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        except ImportError as ai_import_error:
            logger.debug(f"AI –º–æ–¥—É–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã: {ai_import_error}")
        except Exception as ai_error:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI: {ai_error}")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç 5001 –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ
        open_firewall_port_5001()
        
        run_bots_service()
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AI Auto Trainer
            try:
                from bot_engine.ai.auto_trainer import stop_auto_trainer
                stop_auto_trainer()
            except:
                pass
            
            cleanup_bot_service()
            print("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n")
        except:
            pass
        os._exit(0)
