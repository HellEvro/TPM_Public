#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –º–æ–Ω–µ—Ç"""

import requests
import sys
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

def check_signals():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º"""
    try:
        print("üîç –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–û–í –ú–û–ù–ï–¢")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ RSI
        r = requests.get('http://localhost:5001/api/bots/coins-with-rsi')
        data = r.json()
        coins = data.get('coins', {})
        
        print(f"\nüìä –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(coins)}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals = {}
        for symbol, coin in coins.items():
            sig = coin.get('signal', 'UNKNOWN')
            signals[sig] = signals.get(sig, 0) + 1
        
        print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for sig, count in sorted(signals.items()):
            print(f"  {sig}: {count}")
        
        # –ò—â–µ–º –º–æ–Ω–µ—Ç—ã —Å ENTER_LONG/SHORT
        long_coins = [(s, c) for s, c in coins.items() if c.get('signal') == 'ENTER_LONG']
        short_coins = [(s, c) for s, c in coins.items() if c.get('signal') == 'ENTER_SHORT']
        
        print(f"\nüü¢ LONG –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: {len(long_coins)}")
        if long_coins:
            for symbol, coin in long_coins[:5]:
                print(f"  {symbol}: RSI={coin.get('rsi')}, Trend={coin.get('trend')}")
        
        print(f"\nüî¥ SHORT –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: {len(short_coins)}")
        if short_coins:
            for symbol, coin in short_coins[:5]:
                print(f"  {symbol}: RSI={coin.get('rsi')}, Trend={coin.get('trend')}")
        
        # –ò—â–µ–º –º–æ–Ω–µ—Ç—ã –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–æ–Ω–∞—Ö RSI
        print(f"\nüî• –ú–æ–Ω–µ—Ç—ã –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–æ–Ω–∞—Ö RSI:")
        extreme_low = [(s, c) for s, c in coins.items() if c.get('rsi') and c.get('rsi') < 30]
        extreme_high = [(s, c) for s, c in coins.items() if c.get('rsi') and c.get('rsi') > 70]
        
        print(f"  RSI < 30: {len(extreme_low)}")
        if extreme_low:
            for symbol, coin in extreme_low[:10]:
                print(f"    {symbol}: RSI={coin.get('rsi'):.1f}, Signal={coin.get('signal')}, Trend={coin.get('trend')}")
        
        print(f"\n  RSI > 70: {len(extreme_high)}")
        if extreme_high:
            for symbol, coin in extreme_high[:10]:
                print(f"    {symbol}: RSI={coin.get('rsi'):.1f}, Signal={coin.get('signal')}, Trend={coin.get('trend')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print(f"\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        config_r = requests.get('http://localhost:5001/api/bots/auto-bot')
        config_data = config_r.json()
        config = config_data.get('config', {})
        
        print(f"  RSI LONG –ø–æ—Ä–æ–≥: {config.get('rsi_long_threshold')}")
        print(f"  RSI SHORT –ø–æ—Ä–æ–≥: {config.get('rsi_short_threshold')}")
        print(f"  RSI Time Filter: {config.get('rsi_time_filter_enabled')}")
        print(f"  RSI Time Filter Candles: {config.get('rsi_time_filter_candles')}")
        print(f"  ExitScam Filter: {config.get('exit_scam_enabled')}")
        print(f"  Maturity Check: {config.get('enable_maturity_check')}")
        print(f"  Min Candles for Maturity: {config.get('min_candles_for_maturity')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    check_signals()

