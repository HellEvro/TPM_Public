#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç
"""
import sys
import io
import requests
import json

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

def check_maturity_logic():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –∑—Ä–µ–ª–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –ó–†–ï–õ–û–°–¢–ò –ú–û–ù–ï–¢")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
        response = requests.get('http://localhost:5001/api/bots/coins-with-rsi', timeout=30)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return
        
        data = response.json()
        coins = data.get('coins', {})
        
        print(f"üìä –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {len(coins)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤—Ä—É—á–Ω—É—é
        test_symbols = ['BTC', 'ETH', 'BIO', 'DOGE', 'ADA']
        
        for symbol in test_symbols:
            if symbol in coins:
                print(f"\nüìà {symbol}:")
                coin = coins[symbol]
                print(f"  RSI: {coin.get('rsi6h', 'N/A')}")
                print(f"  –°–∏–≥–Ω–∞–ª: {coin.get('signal', 'N/A')}")
                print(f"  –¢—Ä–µ–Ω–¥: {coin.get('trend6h', 'N/A')}")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏
                print(f"  üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑—Ä–µ–ª–æ—Å—Ç–∏...")
                update_response = requests.get(f'http://localhost:5001/api/bots/coins-with-rsi?refresh_symbol={symbol}', timeout=10)
                
                if update_response.status_code == 200:
                    print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç
        print(f"\nüèÜ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç:")
        try:
            with open('data/mature_coins.json', 'r', encoding='utf-8') as f:
                mature_data = json.load(f)
            print(f"  üìä –ó—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç: {len(mature_data)}")
            
            if len(mature_data) > 50:
                print(f"  ‚ö†Ô∏è –°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç! –í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ")
            elif len(mature_data) > 0:
                print(f"  üìù –ü—Ä–∏–º–µ—Ä—ã –∑—Ä–µ–ª—ã—Ö –º–æ–Ω–µ—Ç: {list(mature_data.keys())[:10]}")
            else:
                print(f"  ‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ–µ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤)")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    check_maturity_logic()
