#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""

import requests
import sys
import io

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

def find_candidates():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    try:
        print("üîç –ü–û–ò–°–ö –ü–û–î–•–û–î–Ø–©–ò–• –ö–ê–ù–î–ò–î–ê–¢–û–í")
        print("=" * 60)
        
        r = requests.get('http://localhost:5001/api/bots/coins-with-rsi')
        coins = r.json().get('coins', {})
        
        print(f"üìä –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {len(coins)}")
        
        # –ò—â–µ–º LONG –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (RSI <= 29, trend != DOWN)
        long_candidates = []
        for symbol, coin in coins.items():
            rsi = coin.get('rsi6h')
            trend = coin.get('trend6h')
            zone = coin.get('rsi_zone')
            signal = coin.get('signal')
            
            if rsi and rsi <= 29 and zone == 'BUY_ZONE':
                long_candidates.append((symbol, rsi, trend, signal))
        
        long_candidates.sort(key=lambda x: x[1])
        
        print(f"\nüü¢ LONG –∫–∞–Ω–¥–∏–¥–∞—Ç—ã (RSI <= 29, BUY_ZONE): {len(long_candidates)}")
        for symbol, rsi, trend, signal in long_candidates:
            trend_emoji = 'üìà' if trend == 'UP' else 'üìâ' if trend == 'DOWN' else '‚û°Ô∏è'
            signal_emoji = '‚úÖ' if signal == 'ENTER_LONG' else '‚ùå'
            print(f"  {signal_emoji} {symbol}: RSI={rsi:.1f}, Trend={trend_emoji}{trend}, Signal={signal}")
        
        # –ò—â–µ–º SHORT –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (RSI >= 71, trend != UP)
        short_candidates = []
        for symbol, coin in coins.items():
            rsi = coin.get('rsi6h')
            trend = coin.get('trend6h')
            zone = coin.get('rsi_zone')
            signal = coin.get('signal')
            
            if rsi and rsi >= 71 and zone == 'SELL_ZONE':
                short_candidates.append((symbol, rsi, trend, signal))
        
        short_candidates.sort(key=lambda x: -x[1])
        
        print(f"\nüî¥ SHORT –∫–∞–Ω–¥–∏–¥–∞—Ç—ã (RSI >= 71, SELL_ZONE): {len(short_candidates)}")
        for symbol, rsi, trend, signal in short_candidates:
            trend_emoji = 'üìà' if trend == 'UP' else 'üìâ' if trend == 'DOWN' else '‚û°Ô∏è'
            signal_emoji = '‚úÖ' if signal == 'ENTER_SHORT' else '‚ùå'
            print(f"  {signal_emoji} {symbol}: RSI={rsi:.1f}, Trend={trend_emoji}{trend}, Signal={signal}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞
        long_with_good_trend = [c for c in long_candidates if c[3] == 'ENTER_LONG']
        short_with_good_trend = [c for c in short_candidates if c[3] == 'ENTER_SHORT']
        
        print(f"\nüìä –ò—Ç–æ–≥–æ:")
        print(f"  LONG —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º: {len(long_with_good_trend)}/{len(long_candidates)}")
        print(f"  SHORT —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º: {len(short_with_good_trend)}/{len(short_candidates)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    find_candidates()

