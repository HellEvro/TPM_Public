#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ optimal_ema.py –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –≤ bots.py
"""

import os
import sys
import json
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def sync_optimal_ema_data():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA –º–µ–∂–¥—É —Å–∫—Ä–∏–ø—Ç–∞–º–∏"""
    try:
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        optimal_ema_file = 'data/optimal_ema.json'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(optimal_ema_file):
            logger.warning(f"–§–∞–π–ª {optimal_ema_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open(optimal_ema_file, 'r', encoding='utf-8') as f:
            optimal_ema_data = json.load(f)
        
        if not optimal_ema_data:
            logger.warning("–§–∞–π–ª optimal_ema.json –ø—É—Å—Ç–æ–π")
            return False
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(optimal_ema_data)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ bots.py
        try:
            from bots import update_optimal_ema_data
            success = update_optimal_ema_data(optimal_ema_data)
            
            if success:
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return False
                
        except ImportError as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö EMA...")
    
    success = sync_optimal_ema_data()
    
    if success:
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    else:
        logger.error("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)

if __name__ == '__main__':
    main()
